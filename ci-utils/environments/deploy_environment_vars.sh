#!/bin/bash

function common_variables_by_environment() {
  export TIMEZONE=${TIMEZONE}

  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # common variables for ephemeral environments
    export LAST_CONTACT_RECIPIENT=${LAST_CONTACT_RECIPIENT_DEV}
    export REDIS_HOSTNAME=${REDIS_HOSTNAME_DEV}
    export REDIS_CUSTOMER_CACHE_HOSTNAME=${REDIS_CUSTOMER_CACHE_HOSTNAME_DEV}
    export REDIS_TNBA_FEEDBACK_HOSTNAME=${REDIS_TNBA_FEEDBACK_HOSTNAME_DEV}
    export REDIS_EMAIL_TAGGER_HOSTNAME=${REDIS_EMAIL_TAGGER_HOSTNAME_DEV}
    export PAPERTRAIL_HOST=${PAPERTRAIL_HOST_DEV}
    export PAPERTRAIL_PORT=${PAPERTRAIL_PORT_DEV}
    export PAPERTRAIL_API_TOKEN=${PAPERTRAIL_API_TOKEN_DEV}
    export EXTERNAL_SECRETS_IAM_ROLE_ARN=${EXTERNAL_SECRETS_IAM_ROLE_ARN_DEV}
    export PAPERTRAIL_ACTIVE="false"
  else
    # common environment variables for production environment
    export LAST_CONTACT_RECIPIENT=${LAST_CONTACT_RECIPIENT_PRO}
    export REDIS_HOSTNAME=${REDIS_HOSTNAME_PRO}
    export REDIS_CUSTOMER_CACHE_HOSTNAME=${REDIS_CUSTOMER_CACHE_HOSTNAME_PRO}
    export REDIS_TNBA_FEEDBACK_HOSTNAME=${REDIS_TNBA_FEEDBACK_HOSTNAME_PRO}
    export REDIS_EMAIL_TAGGER_HOSTNAME=${REDIS_EMAIL_TAGGER_HOSTNAME_PRO}
    export PAPERTRAIL_HOST=${PAPERTRAIL_HOST_PRO}
    export PAPERTRAIL_PORT=${PAPERTRAIL_PORT_PRO}
    export PAPERTRAIL_API_TOKEN=${PAPERTRAIL_API_TOKEN_PRO}
    export EXTERNAL_SECRETS_IAM_ROLE_ARN=${EXTERNAL_SECRETS_IAM_ROLE_ARN_PRO}
    export PAPERTRAIL_ACTIVE="true"
  fi
}

function bruin_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # bruin-bridge environment variables for ephemeral environments
    export BRUIN_BRIDGE__BRUIN_LOGIN_URL="${DEV__BRUIN_BRIDGE__LOGIN_URL}"
    export BRUIN_BRIDGE__BRUIN_BASE_URL="${DEV__BRUIN_BRIDGE__BASE_URL}"
    export BRUIN_BRIDGE__BRUIN_CLIENT_ID="${DEV__BRUIN_BRIDGE__CLIENT_ID}"
    export BRUIN_BRIDGE__BRUIN_CLIENT_SECRET="${DEV__BRUIN_BRIDGE__CLIENT_SECRET}"
    export BRUIN_BRIDGE__BRUIN_LOGIN_URL_IP="${DEV__BRUIN_BRIDGE__LOGIN_URL_IP}"
    export BRUIN_BRIDGE__BRUIN_BASE_URL_IP="${DEV__BRUIN_BRIDGE__BASE_URL_IP}"
  else
    # bruin-bridge environment variables for production environment
    export BRUIN_BRIDGE__BRUIN_LOGIN_URL="${PRO__BRUIN_BRIDGE__LOGIN_URL}"
    export BRUIN_BRIDGE__BRUIN_BASE_URL="${PRO__BRUIN_BRIDGE__BASE_URL}"
    export BRUIN_BRIDGE__BRUIN_CLIENT_ID="${PRO__BRUIN_BRIDGE__CLIENT_ID}"
    export BRUIN_BRIDGE__BRUIN_CLIENT_SECRET="${PRO__BRUIN_BRIDGE__CLIENT_SECRET}"
  fi
}

function customer_cache_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # customer-cache environment variables for ephemeral environments
    export CUSTOMER_CACHE__VELOCLOUD_HOSTS="$(echo "${DEV__CUSTOMER_CACHE__VELOCLOUD_HOSTS}" | jq . -c)"
    export CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT="${DEV__CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT}"
    export CUSTOMER_CACHE__REFRESH_JOB_INTERVAL="${DEV__CUSTOMER_CACHE__REFRESH_JOB_INTERVAL}"
    export CUSTOMER_CACHE__REFRESH_CHECK_INTERVAL="${DEV__CUSTOMER_CACHE__REFRESH_CHECK_INTERVAL}"
    export CUSTOMER_CACHE__BLACKLISTED_EDGES="$(echo "${DEV__CUSTOMER_CACHE__BLACKLISTED_EDGES}" | jq . -c)"
    export CUSTOMER_CACHE__BLACKLISTED_CLIENTS_WITH_PENDING_STATUS="$(echo "${DEV__CUSTOMER_CACHE__BLACKLISTED_CLIENTS_WITH_PENDING_STATUS}" | jq . -c)"
    export CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES="$(echo "${DEV__CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES}" | jq . -c)"
  else
    # customer-cache environment variables for production environment
    export CUSTOMER_CACHE__VELOCLOUD_HOSTS="$(echo "${PRO__CUSTOMER_CACHE__VELOCLOUD_HOSTS}" | jq . -c)"
    export CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT="${PRO__CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT}"
    export CUSTOMER_CACHE__REFRESH_JOB_INTERVAL="${PRO__CUSTOMER_CACHE__REFRESH_JOB_INTERVAL}"
    export CUSTOMER_CACHE__REFRESH_CHECK_INTERVAL="${PRO__CUSTOMER_CACHE__REFRESH_CHECK_INTERVAL}"
    export CUSTOMER_CACHE__BLACKLISTED_EDGES="$(echo "${PRO__CUSTOMER_CACHE__BLACKLISTED_EDGES}" | jq . -c)"
    export CUSTOMER_CACHE__BLACKLISTED_CLIENTS_WITH_PENDING_STATUS="$(echo "${PRO__CUSTOMER_CACHE__BLACKLISTED_CLIENTS_WITH_PENDING_STATUS}" | jq . -c)"
    export CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES="$(echo "${PRO__CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES}" | jq . -c)"
  fi
}

function digi_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # digi-bridge environment variables for ephemeral environments
    export DIGI_BRIDGE__DIGI_REBOOT_API_BASE_URL="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_BASE_URL}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_ID="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_ID}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_SECRET="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_SECRET}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_TOKEN_TTL="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_TOKEN_TTL}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_IP="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_IP}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_DNS_RECORD_NAME="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_DNS_RECORD_NAME}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_TEST_IP="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_TEST_IP}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_TEST_DNS_RECORD_NAME="${DEV__DIGI_BRIDGE__DIGI_REBOOT_API_TEST_DNS_RECORD_NAME}"
  else
    # digi-bridge environment variables for production environment
    export DIGI_BRIDGE__DIGI_REBOOT_API_BASE_URL="${PRO__DIGI_BRIDGE__DIGI_REBOOT_API_BASE_URL}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_ID="${PRO__DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_ID}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_SECRET="${PRO__DIGI_BRIDGE__DIGI_REBOOT_API_CLIENT_SECRET}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_TOKEN_TTL="${PRO__DIGI_BRIDGE__DIGI_REBOOT_API_TOKEN_TTL}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_IP="${PRO__DIGI_BRIDGE__DIGI_REBOOT_API_IP}"
    export DIGI_BRIDGE__DIGI_REBOOT_API_DNS_RECORD_NAME="${PRO__DIGI_BRIDGE__DIGI_REBOOT_API_DNS_RECORD_NAME}"
  fi
}

function digi_reboot_report_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # digi-reboot-report environment variables for ephemeral environments
    export DIGI_REBOOT_REPORT__REPORT_JOB_INTERVAL="${DEV__DIGI_REBOOT_REPORT__REPORT_JOB_INTERVAL}"
    export DIGI_REBOOT_REPORT__LOGS_LOOKUP_INTERVAL="${DEV__DIGI_REBOOT_REPORT__LOGS_LOOKUP_INTERVAL}"
    export DIGI_REBOOT_REPORT__REPORT_RECIPIENT="${DEV__DIGI_REBOOT_REPORT__REPORT_RECIPIENT}"
  else
    # digi-reboot-report environment variables for production environment
    export DIGI_REBOOT_REPORT__REPORT_JOB_INTERVAL="${PRO__DIGI_REBOOT_REPORT__REPORT_JOB_INTERVAL}"
    export DIGI_REBOOT_REPORT__LOGS_LOOKUP_INTERVAL="${PRO__DIGI_REBOOT_REPORT__LOGS_LOOKUP_INTERVAL}"
    export DIGI_REBOOT_REPORT__REPORT_RECIPIENT="${PRO__DIGI_REBOOT_REPORT__REPORT_RECIPIENT}"
  fi
}

function dri_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # dri-bridge environment variables for ephemeral environments
    export DRI_BRIDGE__BASE_URL="${DEV__DRI_BRIDGE__BASE_URL}"
    export DRI_BRIDGE__USERNAME="${DEV__DRI_BRIDGE__USERNAME}"
    export DRI_BRIDGE__PASSWORD="${DEV__DRI_BRIDGE__PASSWORD}"
    export DRI_BRIDGE__DRI_DATA_REDIS_TTL="${DEV__DRI_BRIDGE__DRI_DATA_REDIS_TTL}"
  else
    # dri-bridge environment variables for production environment
    export DRI_BRIDGE__BASE_URL="${PRO__DRI_BRIDGE__BASE_URL}"
    export DRI_BRIDGE__USERNAME="${PRO__DRI_BRIDGE__USERNAME}"
    export DRI_BRIDGE__PASSWORD="${PRO__DRI_BRIDGE__PASSWORD}"
    export DRI_BRIDGE__DRI_DATA_REDIS_TTL="${PRO__DRI_BRIDGE__DRI_DATA_REDIS_TTL}"
  fi
}

function email_tagger_kre_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # email-tagger-kre-bridge environment variables for ephemeral environments
    export EMAIL_TAGGER_KRE_BRIDGE__KRE_BASE_URL="${DEV__EMAIL_TAGGER_KRE_BRIDGE__KRE_BASE_URL}"
  else
    # email-tagger-kre-bridge environment variables for production environment
    export EMAIL_TAGGER_KRE_BRIDGE__KRE_BASE_URL="${PRO__EMAIL_TAGGER_KRE_BRIDGE__KRE_BASE_URL}"
  fi
}

function email_tagger_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # email-tagger-monitor environment variables for ephemeral environments
    export EMAIL_TAGGER_MONITOR__NEW_EMAILS_JOB_INTERVAL="${DEV__EMAIL_TAGGER_MONITOR__NEW_EMAILS_JOB_INTERVAL}"
    export EMAIL_TAGGER_MONITOR__NEW_TICKETS_JOB_INTERVAL="${DEV__EMAIL_TAGGER_MONITOR__NEW_TICKETS_JOB_INTERVAL}"
    export EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_EMAILS="${DEV__EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_EMAILS}"
    export EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_TICKETS="${DEV__EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_TICKETS}"
    export EMAIL_TAGGER_MONITOR__API_REQUEST_KEY="${DEV__EMAIL_TAGGER_MONITOR__API_REQUEST_KEY}"
    export EMAIL_TAGGER_MONITOR__API_REQUEST_SIGNATURE_SECRET_KEY="${DEV__EMAIL_TAGGER_MONITOR__API_REQUEST_SIGNATURE_SECRET_KEY}"
    export EMAIL_TAGGER_MONITOR__API_ENDPOINT_PREFIX="${DEV__EMAIL_TAGGER_MONITOR__API_ENDPOINT_PREFIX}"
  else
    # email-tagger-monitor environment variables for production environment
    export EMAIL_TAGGER_MONITOR__NEW_EMAILS_JOB_INTERVAL="${PRO__EMAIL_TAGGER_MONITOR__NEW_EMAILS_JOB_INTERVAL}"
    export EMAIL_TAGGER_MONITOR__NEW_TICKETS_JOB_INTERVAL="${PRO__EMAIL_TAGGER_MONITOR__NEW_TICKETS_JOB_INTERVAL}"
    export EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_EMAILS="${PRO__EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_EMAILS}"
    export EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_TICKETS="${PRO__EMAIL_TAGGER_MONITOR__MAX_CONCURRENT_TICKETS}"
    export EMAIL_TAGGER_MONITOR__API_REQUEST_KEY="${PRO__EMAIL_TAGGER_MONITOR__API_REQUEST_KEY}"
    export EMAIL_TAGGER_MONITOR__API_REQUEST_SIGNATURE_SECRET_KEY="${PRO__EMAIL_TAGGER_MONITOR__API_REQUEST_SIGNATURE_SECRET_KEY}"
    export EMAIL_TAGGER_MONITOR__API_ENDPOINT_PREFIX="${PRO__EMAIL_TAGGER_MONITOR__API_ENDPOINT_PREFIX}"
  fi
}

function fraud_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # fraud-monitor environment variables for ephemeral environments
    export FRAUD_MONITOR__MONITORING_JOB_INTERVAL="${DEV__FRAUD_MONITOR__MONITORING_JOB_INTERVAL}"
    export FRAUD_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS="${DEV__FRAUD_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS}"
    export FRAUD_MONITOR__OBSERVED_INBOX_SENDERS="$(echo "${DEV__FRAUD_MONITOR__OBSERVED_INBOX_SENDERS}" | jq . -c)"
    export FRAUD_MONITOR__DEFAULT_CONTACT_FOR_NEW_TICKETS="$(echo "${DEV__FRAUD_MONITOR__DEFAULT_CONTACT_FOR_NEW_TICKETS}" | jq . -c)"
    export FRAUD_MONITOR__DEFAULT_CLIENT_INFO_FOR_DID_WITHOUT_INVENTORY="$(echo "${DEV__FRAUD_MONITOR__DEFAULT_CLIENT_INFO_FOR_DID_WITHOUT_INVENTORY}" | jq . -c)"
  else
    # fraud-monitor environment variables for production environment
    export FRAUD_MONITOR__MONITORING_JOB_INTERVAL="${PRO__FRAUD_MONITOR__MONITORING_JOB_INTERVAL}"
    export FRAUD_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS="${PRO__FRAUD_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS}"
    export FRAUD_MONITOR__OBSERVED_INBOX_SENDERS="$(echo "${PRO__FRAUD_MONITOR__OBSERVED_INBOX_SENDERS}" | jq . -c)"
    export FRAUD_MONITOR__DEFAULT_CONTACT_FOR_NEW_TICKETS="$(echo "${PRO__FRAUD_MONITOR__DEFAULT_CONTACT_FOR_NEW_TICKETS}" | jq . -c)"
    export FRAUD_MONITOR__DEFAULT_CLIENT_INFO_FOR_DID_WITHOUT_INVENTORY="$(echo "${PRO__FRAUD_MONITOR__DEFAULT_CLIENT_INFO_FOR_DID_WITHOUT_INVENTORY}" | jq . -c)"
  fi
}

function hawkeye_affecting_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # hawkeye-affecting-monitor environment variables for ephemeral environments
    export HAWKEYE_AFFECTING_MONITOR__MONITORING_JOB_INTERVAL="${DEV__HAWKEYE_AFFECTING_MONITOR__MONITORING_JOB_INTERVAL}"
    export HAWKEYE_AFFECTING_MONITOR__PROBES_TESTS_RESULTS_LOOKUP_INTERVAL="${DEV__HAWKEYE_AFFECTING_MONITOR__PROBES_TESTS_RESULTS_LOOKUP_INTERVAL}"
    export HAWKEYE_AFFECTING_MONITOR__MONITORED_PRODUCT_CATEGORY="${DEV__HAWKEYE_AFFECTING_MONITOR__MONITORED_PRODUCT_CATEGORY}"
  else
    # hawkeye-affecting-monitor environment variables for production environment
    export HAWKEYE_AFFECTING_MONITOR__MONITORING_JOB_INTERVAL="${PRO__HAWKEYE_AFFECTING_MONITOR__MONITORING_JOB_INTERVAL}"
    export HAWKEYE_AFFECTING_MONITOR__PROBES_TESTS_RESULTS_LOOKUP_INTERVAL="${PRO__HAWKEYE_AFFECTING_MONITOR__PROBES_TESTS_RESULTS_LOOKUP_INTERVAL}"
    export HAWKEYE_AFFECTING_MONITOR__MONITORED_PRODUCT_CATEGORY="${PRO__HAWKEYE_AFFECTING_MONITOR__MONITORED_PRODUCT_CATEGORY}"
  fi
}

function hawkeye_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # hawkeye-bridge environment variables for ephemeral environments
    export HAWKEYE_BRIDGE__CLIENT_USERNAME="${DEV__HAWKEYE_BRIDGE__CLIENT_USERNAME}"
    export HAWKEYE_BRIDGE__CLIENT_PASSWORD="${DEV__HAWKEYE_BRIDGE__CLIENT_PASSWORD}"
    export HAWKEYE_BRIDGE__BASE_URL="${DEV__HAWKEYE_BRIDGE__BASE_URL}"
  else
    # hawkeye-bridge environment variables for production environment
    export HAWKEYE_BRIDGE__CLIENT_USERNAME="${PRO__HAWKEYE_BRIDGE__CLIENT_USERNAME}"
    export HAWKEYE_BRIDGE__CLIENT_PASSWORD="${PRO__HAWKEYE_BRIDGE__CLIENT_PASSWORD}"
    export HAWKEYE_BRIDGE__BASE_URL="${PRO__HAWKEYE_BRIDGE__BASE_URL}"
  fi
}

function hawkeye_customer_cache_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # hawkeye-customer-cache environment variables for ephemeral environments
    export HAWKEYE_CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT="${DEV__HAWKEYE_CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT}"
    export HAWKEYE_CUSTOMER_CACHE__REFRESH_JOB_INTERVAL="${DEV__HAWKEYE_CUSTOMER_CACHE__REFRESH_JOB_INTERVAL}"
    export HAWKEYE_CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES="$(echo "${DEV__HAWKEYE_CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES}" | jq . -c)"
  else
    # hawkeye-customer-cache environment variables for production environment
    export HAWKEYE_CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT="${PRO__HAWKEYE_CUSTOMER_CACHE__DUPLICATE_INVENTORIES_RECIPIENT}"
    export HAWKEYE_CUSTOMER_CACHE__REFRESH_JOB_INTERVAL="${PRO__HAWKEYE_CUSTOMER_CACHE__REFRESH_JOB_INTERVAL}"
    export HAWKEYE_CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES="$(echo "${PRO__HAWKEYE_CUSTOMER_CACHE__WHITELISTED_MANAGEMENT_STATUSES}" | jq . -c)"
  fi
}

function hawkeye_outage_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # hawkeye-outage-monitor environment variables for ephemeral environments
    export HAWKEYE_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL="${DEV__HAWKEYE_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL}"
    export HAWKEYE_OUTAGE_MONITOR__QUARANTINE_FOR_DEVICES_IN_OUTAGE="${DEV__HAWKEYE_OUTAGE_MONITOR__QUARANTINE_FOR_DEVICES_IN_OUTAGE}"
    export HAWKEYE_OUTAGE_MONITOR__MONITORED_PRODUCT_CATEGORY="${DEV__HAWKEYE_OUTAGE_MONITOR__MONITORED_PRODUCT_CATEGORY}"
    export HAWKEYE_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE="${DEV__HAWKEYE_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE}"
  else
    # hawkeye-outage-monitor environment variables for production environment
    export HAWKEYE_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL="${PRO__HAWKEYE_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL}"
    export HAWKEYE_OUTAGE_MONITOR__QUARANTINE_FOR_DEVICES_IN_OUTAGE="${PRO__HAWKEYE_OUTAGE_MONITOR__QUARANTINE_FOR_DEVICES_IN_OUTAGE}"
    export HAWKEYE_OUTAGE_MONITOR__MONITORED_PRODUCT_CATEGORY="${PRO__HAWKEYE_OUTAGE_MONITOR__MONITORED_PRODUCT_CATEGORY}"
    export HAWKEYE_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE="${PRO__HAWKEYE_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE}"
  fi
}

function intermapper_outage_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # intermapper-outage-monitor environment variables for ephemeral environments
    export INTERMAPPER_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL="${DEV__INTERMAPPER_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL}"
    export INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS="${DEV__INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS}"
    export INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_SENDERS="$(echo "${DEV__INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_SENDERS}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__MONITORED_DOWN_EVENTS="$(echo "${DEV__INTERMAPPER_OUTAGE_MONITOR__MONITORED_DOWN_EVENTS}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__MONITORED_UP_EVENTS="$(echo "${DEV__INTERMAPPER_OUTAGE_MONITOR__MONITORED_UP_EVENTS}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__MAX_CONCURRENT_EMAIL_BATCHES="${DEV__INTERMAPPER_OUTAGE_MONITOR__MAX_CONCURRENT_EMAIL_BATCHES}"
    export INTERMAPPER_OUTAGE_MONITOR__WHITELISTED_PRODUCT_CATEGORIES_FOR_AUTORESOLVE="$(echo "${DEV__INTERMAPPER_OUTAGE_MONITOR__WHITELISTED_PRODUCT_CATEGORIES_FOR_AUTORESOLVE}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE="${DEV__INTERMAPPER_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE}"
    export INTERMAPPER_OUTAGE_MONITOR__DRI_PARAMETERS_FOR_PIAB_NOTES="$(echo "${DEV__INTERMAPPER_OUTAGE_MONITOR__DRI_PARAMETERS_FOR_PIAB_NOTES}" | jq . -c)"
  else
    # intermapper-outage-monitor environment variables for production environment
    export INTERMAPPER_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL="${PRO__INTERMAPPER_OUTAGE_MONITOR__MONITORING_JOB_INTERVAL}"
    export INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS="${PRO__INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_EMAIL_ADDRESS}"
    export INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_SENDERS="$(echo "${PRO__INTERMAPPER_OUTAGE_MONITOR__OBSERVED_INBOX_SENDERS}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__MONITORED_DOWN_EVENTS="$(echo "${PRO__INTERMAPPER_OUTAGE_MONITOR__MONITORED_DOWN_EVENTS}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__MONITORED_UP_EVENTS="$(echo "${PRO__INTERMAPPER_OUTAGE_MONITOR__MONITORED_UP_EVENTS}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__MAX_CONCURRENT_EMAIL_BATCHES="${PRO__INTERMAPPER_OUTAGE_MONITOR__MAX_CONCURRENT_EMAIL_BATCHES}"
    export INTERMAPPER_OUTAGE_MONITOR__WHITELISTED_PRODUCT_CATEGORIES_FOR_AUTORESOLVE="$(echo "${PRO__INTERMAPPER_OUTAGE_MONITOR__WHITELISTED_PRODUCT_CATEGORIES_FOR_AUTORESOLVE}" | jq . -c)"
    export INTERMAPPER_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE="${PRO__INTERMAPPER_OUTAGE_MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE}"
    export INTERMAPPER_OUTAGE_MONITOR__DRI_PARAMETERS_FOR_PIAB_NOTES="$(echo "${PRO__INTERMAPPER_OUTAGE_MONITOR__DRI_PARAMETERS_FOR_PIAB_NOTES}" | jq . -c)"
  fi
}

function last_contact_report_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # intermapper-outage-monitor environment variables for ephemeral environments
    export LAST_CONTACT_REPORT__MONITORED_VELOCLOUD_HOSTS="$(echo "${DEV__LAST_CONTACT_REPORT__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export LAST_CONTACT_REPORT__REPORT_RECIPIENT="${DEV__LAST_CONTACT_REPORT__REPORT_RECIPIENT}"
  else
    # intermapper-outage-monitor environment variables for production environment
    export LAST_CONTACT_REPORT__MONITORED_VELOCLOUD_HOSTS="$(echo "${PRO__LAST_CONTACT_REPORT__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export LAST_CONTACT_REPORT__REPORT_RECIPIENT="${PRO__LAST_CONTACT_REPORT__REPORT_RECIPIENT}"
  fi
}

function links_metrics_api_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # links-metris-api environment variables for ephemeral environments
    export LINKS_METRICS_API_WHITELIST_ACCESS=${LINKS_METRICS_API_WHITELIST_ACCESS_PRO}
    export TICKET_COLLECTOR_MONGO_PORT=${TICKET_COLLECTOR_MONGO_PORT_PRO}
    export OREILLY_SECURITY_GROUP_ID=${OREILLY_SECURITY_GROUP_ID_DEV}
    export AUTOMATION_SSL_CERTIFICATE_ARN=${AUTOMATION_SSL_CERTIFICATE_ARN}
  else
    # links-metris-api environment variables for production environment
    export LINKS_METRICS_API_WHITELIST_ACCESS=${LINKS_METRICS_API_WHITELIST_ACCESS_PRO}
    export TICKET_COLLECTOR_MONGO_PORT=${TICKET_COLLECTOR_MONGO_PORT_PRO}
    export OREILLY_SECURITY_GROUP_ID=${OREILLY_SECURITY_GROUP_ID_PRO}
    export AUTOMATION_SSL_CERTIFICATE_ARN=${AUTOMATION_SSL_CERTIFICATE_ARN}
  fi
}

function lumin_billing_report_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # lumin-billing-report environment variables for ephemeral environments
    export BILLING_RECIPIENT=${BILLING_RECIPIENT_REPORT_DEV}
  else
    # lumin-billing-report environment variables for production environment
    export BILLING_RECIPIENT=${BILLING_RECIPIENT_REPORT_PROD}
  fi
}

function notifier_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # notifier environment variables for ephemeral environments
    export NOTIFIER__SLACK_WEBHOOK_URL="${DEV__NOTIFIER__SLACK_WEBHOOK_URL}"
    export NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_USERNAME="${DEV__NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_USERNAME}"
    export NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_PASSWORD="${DEV__NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_PASSWORD}"
    export NOTIFIER__MONITORABLE_EMAIL_ACCOUNTS="$(echo "${DEV__NOTIFIER__MONITORABLE_EMAIL_ACCOUNTS}" | jq . -c)"
  else
    # notifier environment variables for production environment
    export NOTIFIER__SLACK_WEBHOOK_URL="${PRO__NOTIFIER__SLACK_WEBHOOK_URL}"
    export NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_USERNAME="${PRO__NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_USERNAME}"
    export NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_PASSWORD="${PRO__NOTIFIER__EMAIL_ACCOUNT_FOR_MESSAGE_DELIVERY_PASSWORD}"
    export NOTIFIER__MONITORABLE_EMAIL_ACCOUNTS="$(echo "${PRO__NOTIFIER__MONITORABLE_EMAIL_ACCOUNTS}" | jq . -c)"
  fi
}

function notifications_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # notifications_bridge environment variables for ephemeral environments
    export NOTIFICATIONS_BRIDGE__SLACK_WEBHOOK_URL="${DEV__NOTIFICATIONS_BRIDGE__SLACK_WEBHOOK_URL}"
  else
    # notifications_bridge environment variables for production environment
    export NOTIFICATIONS_BRIDGE__SLACK_WEBHOOK_URL="${PRO__NOTIFICATIONS_BRIDGE__SLACK_WEBHOOK_URL}"
  fi
}

function repair_tickets_kre_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # repair-tickets-kre-bridge environment variables for ephemeral environments
    export REPAIR_TICKETS_KRE_BRIDGE__KRE_BASE_URL="${DEV__REPAIR_TICKETS_KRE_BRIDGE__KRE_BASE_URL}"
  else
    # repair-tickets-kre-bridge environment variables for production environment
    export REPAIR_TICKETS_KRE_BRIDGE__KRE_BASE_URL="${PRO__REPAIR_TICKETS_KRE_BRIDGE__KRE_BASE_URL}"
  fi
}

function repair_tickets_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # repair-tickets-monitor environment variables for ephemeral environments
    export REPAIR_TICKETS_MONITOR__RTA_MONITOR_JOB_INTERVAL="${DEV__REPAIR_TICKETS_MONITOR__RTA_MONITOR_JOB_INTERVAL}"
    export REPAIR_TICKETS_MONITOR__NEW_CREATED_TICKETS_FEEDBACK_JOB_INTERVAL="${DEV__REPAIR_TICKETS_MONITOR__NEW_CREATED_TICKETS_FEEDBACK_JOB_INTERVAL}"
    export REPAIR_TICKETS_MONITOR__NEW_CLOSED_TICKETS_FEEDBACK_JOB_INTERVAL="${DEV__REPAIR_TICKETS_MONITOR__NEW_CLOSED_TICKETS_FEEDBACK_JOB_INTERVAL}"
    export REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_EMAILS_FOR_MONITORING="${DEV__REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_EMAILS_FOR_MONITORING}"
    export REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CREATED_TICKETS_FOR_FEEDBACK="${DEV__REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CREATED_TICKETS_FOR_FEEDBACK}"
    export REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CLOSED_TICKETS_FOR_FEEDBACK="${DEV__REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CLOSED_TICKETS_FOR_FEEDBACK}"
    export REPAIR_TICKETS_MONITOR__TAG_IDS_MAPPING="$(echo "${DEV__REPAIR_TICKETS_MONITOR__TAG_IDS_MAPPING}" | jq . -c)"
  else
    # repair-tickets-monitor environment variables for production environment
    export REPAIR_TICKETS_MONITOR__RTA_MONITOR_JOB_INTERVAL="${PRO__REPAIR_TICKETS_MONITOR__RTA_MONITOR_JOB_INTERVAL}"
    export REPAIR_TICKETS_MONITOR__NEW_CREATED_TICKETS_FEEDBACK_JOB_INTERVAL="${PRO__REPAIR_TICKETS_MONITOR__NEW_CREATED_TICKETS_FEEDBACK_JOB_INTERVAL}"
    export REPAIR_TICKETS_MONITOR__NEW_CLOSED_TICKETS_FEEDBACK_JOB_INTERVAL="${PRO__REPAIR_TICKETS_MONITOR__NEW_CLOSED_TICKETS_FEEDBACK_JOB_INTERVAL}"
    export REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_EMAILS_FOR_MONITORING="${PRO__REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_EMAILS_FOR_MONITORING}"
    export REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CREATED_TICKETS_FOR_FEEDBACK="${PRO__REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CREATED_TICKETS_FOR_FEEDBACK}"
    export REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CLOSED_TICKETS_FOR_FEEDBACK="${PRO__REPAIR_TICKETS_MONITOR__MAX_CONCURRENT_CLOSED_TICKETS_FOR_FEEDBACK}"
    export REPAIR_TICKETS_MONITOR__TAG_IDS_MAPPING="$(echo "${PRO__REPAIR_TICKETS_MONITOR__TAG_IDS_MAPPING}" | jq . -c)"
  fi
}

function service_affecting_monitor_variables() {
  export EXEC_MONITOR_REPORTS_ON_START=${EXEC_MONITOR_REPORTS_ON_START}
  export EXEC_BANDWIDTH_REPORTS_ON_START=${EXEC_BANDWIDTH_REPORTS_ON_START}

  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # service-affecting-monitor environment variables for ephemeral environments
    # Global
    export SERVICE_AFFECTING__MONITORED_PRODUCT_CATEGORY="${DEV__SERVICE_AFFECTING__MONITORED_PRODUCT_CATEGORY}"

    # Monitoring
    export SERVICE_AFFECTING__MONITOR__MONITORING_JOB_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__MONITORING_JOB_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__MONITORED_VELOCLOUD_HOSTS="$(echo "${DEV__SERVICE_AFFECTING__MONITOR__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export SERVICE_AFFECTING__MONITOR__DEFAULT_CONTACT_INFO_PER_CUSTOMER="$(echo "${DEV__SERVICE_AFFECTING__MONITOR__DEFAULT_CONTACT_INFO_PER_CUSTOMER}" | jq . -c)"
    export SERVICE_AFFECTING__MONITOR__CUSTOMERS_TO_ALWAYS_USE_DEFAULT_CONTACT_INFO="$(echo "${DEV__SERVICE_AFFECTING__MONITOR__CUSTOMERS_TO_ALWAYS_USE_DEFAULT_CONTACT_INFO}" | jq . -c)"
    export SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_THRESHOLD="${DEV__SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_THRESHOLD="${DEV__SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_THRESHOLD="${DEV__SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_THRESHOLD="${DEV__SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_THRESHOLD="${DEV__SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_AUTORESOLVE_THRESHOLD="${DEV__SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_AUTORESOLVE_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__AUTORESOLVE_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__MONITOR__AUTORESOLVE_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_TROUBLE="${DEV__SERVICE_AFFECTING__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_TROUBLE}"
    export SERVICE_AFFECTING__MONITOR__MAX_AUTORESOLVES_PER_TICKET="${DEV__SERVICE_AFFECTING__MONITOR__MAX_AUTORESOLVES_PER_TICKET}"
    export SERVICE_AFFECTING__MONITOR__CUSTOMERS_WITH_BANDWIDTH_OVER_UTILIZATION_MONITORING="$(echo "${DEV__SERVICE_AFFECTING__MONITOR__CUSTOMERS_WITH_BANDWIDTH_OVER_UTILIZATION_MONITORING}" | jq . -c)"

    # Reoccuring Trouble Report
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__EXECUTION_CRON_EXPRESSION="${DEV__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__EXECUTION_CRON_EXPRESSION}"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REPORTED_TROUBLES="$(echo "${DEV__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REPORTED_TROUBLES}" | jq . -c)"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__TICKETS_LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__TICKETS_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REOCCURRING_TROUBLE_TICKETS_THRESHOLD="${DEV__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REOCCURRING_TROUBLE_TICKETS_THRESHOLD}"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__RECIPIENTS_PER_CUSTOMER="$(echo "${DEV__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__RECIPIENTS_PER_CUSTOMER}" | jq . -c)"

    # Daily Bandwidth Report
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__EXECUTION_CRON_EXPRESSION="${DEV__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__EXECUTION_CRON_EXPRESSION}"
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__LOOKUP_INTERVAL="${DEV__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__ENABLED_CUSTOMERS="$(echo "${DEV__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__ENABLED_CUSTOMERS}" | jq . -c)"
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__RECIPIENTS="$(echo "${DEV__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__RECIPIENTS}" | jq . -c)"
  else
    # service-affecting-monitor environment variables for production environment
    # Global
    export SERVICE_AFFECTING__MONITORED_PRODUCT_CATEGORY="${PRO__SERVICE_AFFECTING__MONITORED_PRODUCT_CATEGORY}"

    # Monitoring
    export SERVICE_AFFECTING__MONITOR__MONITORING_JOB_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__MONITORING_JOB_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__MONITORED_VELOCLOUD_HOSTS="$(echo "${PRO__SERVICE_AFFECTING__MONITOR__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export SERVICE_AFFECTING__MONITOR__DEFAULT_CONTACT_INFO_PER_CUSTOMER="$(echo "${PRO__SERVICE_AFFECTING__MONITOR__DEFAULT_CONTACT_INFO_PER_CUSTOMER}" | jq . -c)"
    export SERVICE_AFFECTING__MONITOR__CUSTOMERS_TO_ALWAYS_USE_DEFAULT_CONTACT_INFO="$(echo "${PRO__SERVICE_AFFECTING__MONITOR__CUSTOMERS_TO_ALWAYS_USE_DEFAULT_CONTACT_INFO}" | jq . -c)"
    export SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_THRESHOLD="${PRO__SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_THRESHOLD="${PRO__SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_THRESHOLD="${PRO__SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_THRESHOLD="${PRO__SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_THRESHOLD="${PRO__SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_AUTORESOLVE_THRESHOLD="${PRO__SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_AUTORESOLVE_THRESHOLD}"
    export SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__LATENCY_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__PACKET_LOSS_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__JITTER_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__BANDWIDTH_OVER_UTILIZATION_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__CIRCUIT_INSTABILITY_MONITORING_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__AUTORESOLVE_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__MONITOR__AUTORESOLVE_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_TROUBLE="${PRO__SERVICE_AFFECTING__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_TROUBLE}"
    export SERVICE_AFFECTING__MONITOR__MAX_AUTORESOLVES_PER_TICKET="${PRO__SERVICE_AFFECTING__MONITOR__MAX_AUTORESOLVES_PER_TICKET}"
    export SERVICE_AFFECTING__MONITOR__CUSTOMERS_WITH_BANDWIDTH_OVER_UTILIZATION_MONITORING="$(echo "${PRO__SERVICE_AFFECTING__MONITOR__CUSTOMERS_WITH_BANDWIDTH_OVER_UTILIZATION_MONITORING}" | jq . -c)"

    # Reoccuring Trouble Report
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__EXECUTION_CRON_EXPRESSION="${PRO__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__EXECUTION_CRON_EXPRESSION}"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REPORTED_TROUBLES="$(echo "${PRO__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REPORTED_TROUBLES}" | jq . -c)"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__TICKETS_LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__TICKETS_LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REOCCURRING_TROUBLE_TICKETS_THRESHOLD="${PRO__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__REOCCURRING_TROUBLE_TICKETS_THRESHOLD}"
    export SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__RECIPIENTS_PER_CUSTOMER="$(echo "${PRO__SERVICE_AFFECTING__REOCCURRING_TROUBLE_REPORT__RECIPIENTS_PER_CUSTOMER}" | jq . -c)"

    # Daily Bandwidth Report
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__EXECUTION_CRON_EXPRESSION="${PRO__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__EXECUTION_CRON_EXPRESSION}"
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__LOOKUP_INTERVAL="${PRO__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__LOOKUP_INTERVAL}"
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__ENABLED_CUSTOMERS="$(echo "${PRO__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__ENABLED_CUSTOMERS}" | jq . -c)"
    export SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__RECIPIENTS="$(echo "${PRO__SERVICE_AFFECTING__DAILY_BANDWIDTH_REPORT__RECIPIENTS}" | jq . -c)"
  fi
}

function service_outage_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # service-outage-monitor (SOM) environment variables for ephemeral environments
    # Global
    export SERVICE_OUTAGE__MONITORED_PRODUCT_CATEGORY="${DEV__SERVICE_OUTAGE__MONITORED_PRODUCT_CATEGORY}"

    # Monitoring
    export SERVICE_OUTAGE__MONITOR__MONITORING_JOB_INTERVAL="${DEV__SERVICE_OUTAGE__MONITOR__MONITORING_JOB_INTERVAL}"
    export SERVICE_OUTAGE__MONITOR__MONITORED_VELOCLOUD_HOSTS="$(echo "${DEV__SERVICE_OUTAGE__MONITOR__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_LINK_DOWN_OUTAGE="${DEV__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_LINK_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HARD_DOWN_OUTAGE="${DEV__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HARD_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_LINK_DOWN_OUTAGE="${DEV__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_LINK_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_SOFT_DOWN_OUTAGE="${DEV__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_SOFT_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_HARD_DOWN_OUTAGE="${DEV__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_HARD_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__BLACKLISTED_EDGES="$(echo "${DEV__SERVICE_OUTAGE__MONITOR__BLACKLISTED_EDGES}" | jq . -c)"
    export SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE="${DEV__SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_BEFORE_ATTEMPTING_NEW_DIGI_REBOOTS="${DEV__SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_BEFORE_ATTEMPTING_NEW_DIGI_REBOOTS}"
    export SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_EDGE_DOWN_OUTAGES="${DEV__SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_EDGE_DOWN_OUTAGES}"
    export SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_LINK_DOWN_OUTAGES="${DEV__SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_LINK_DOWN_OUTAGES}"
    export SERVICE_OUTAGE__MONITOR__MAX_AUTORESOLVES_PER_TICKET="${DEV__SERVICE_OUTAGE__MONITOR__MAX_AUTORESOLVES_PER_TICKET}"

    # Triage
    export SERVICE_OUTAGE__TRIAGE__MONITORING_JOB_INTERVAL="${DEV__SERVICE_OUTAGE__TRIAGE__MONITORING_JOB_INTERVAL}"
    export SERVICE_OUTAGE__TRIAGE__MONITORED_VELOCLOUD_HOSTS="$(echo "${DEV__SERVICE_OUTAGE__TRIAGE__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export SERVICE_OUTAGE__TRIAGE__MAX_EVENTS_PER_EVENT_NOTE="${DEV__SERVICE_OUTAGE__TRIAGE__MAX_EVENTS_PER_EVENT_NOTE}"
  else
    # service-outage-monitor (SOM) environment variables for production environment
    # Global
    export SERVICE_OUTAGE__MONITORED_PRODUCT_CATEGORY="${PRO__SERVICE_OUTAGE__MONITORED_PRODUCT_CATEGORY}"

    # Monitoring
    export SERVICE_OUTAGE__MONITOR__MONITORING_JOB_INTERVAL="${PRO__SERVICE_OUTAGE__MONITOR__MONITORING_JOB_INTERVAL}"
    export SERVICE_OUTAGE__MONITOR__MONITORED_VELOCLOUD_HOSTS="$(echo "${PRO__SERVICE_OUTAGE__MONITOR__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_LINK_DOWN_OUTAGE="${PRO__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_LINK_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HARD_DOWN_OUTAGE="${PRO__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HARD_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_LINK_DOWN_OUTAGE="${PRO__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_LINK_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_SOFT_DOWN_OUTAGE="${PRO__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_SOFT_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_HARD_DOWN_OUTAGE="${PRO__SERVICE_OUTAGE__MONITOR__QUARANTINE_FOR_EDGES_IN_HA_HARD_DOWN_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__BLACKLISTED_EDGES="$(echo "${PRO__SERVICE_OUTAGE__MONITOR__BLACKLISTED_EDGES}" | jq . -c)"
    export SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE="${PRO__SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_TO_AUTORESOLVE_AFTER_LAST_DOCUMENTED_OUTAGE}"
    export SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_BEFORE_ATTEMPTING_NEW_DIGI_REBOOTS="${PRO__SERVICE_OUTAGE__MONITOR__GRACE_PERIOD_BEFORE_ATTEMPTING_NEW_DIGI_REBOOTS}"
    export SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_EDGE_DOWN_OUTAGES="${PRO__SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_EDGE_DOWN_OUTAGES}"
    export SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_LINK_DOWN_OUTAGES="${PRO__SERVICE_OUTAGE__MONITOR__SEVERITY_FOR_LINK_DOWN_OUTAGES}"
    export SERVICE_OUTAGE__MONITOR__MAX_AUTORESOLVES_PER_TICKET="${PRO__SERVICE_OUTAGE__MONITOR__MAX_AUTORESOLVES_PER_TICKET}"

    # Triage
    export SERVICE_OUTAGE__TRIAGE__MONITORING_JOB_INTERVAL="${PRO__SERVICE_OUTAGE__TRIAGE__MONITORING_JOB_INTERVAL}"
    export SERVICE_OUTAGE__TRIAGE__MONITORED_VELOCLOUD_HOSTS="$(echo "${PRO__SERVICE_OUTAGE__TRIAGE__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export SERVICE_OUTAGE__TRIAGE__MAX_EVENTS_PER_EVENT_NOTE="${PRO__SERVICE_OUTAGE__TRIAGE__MAX_EVENTS_PER_EVENT_NOTE}"
  fi
}

function t7_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # t7-bridge environment variables for ephemeral environments
    export T7_BRIDGE__KRE_BASE_URL="${DEV__T7_BRIDGE__KRE_BASE_URL}"
  else
    # t7-bridge environment variables for production environment
    export T7_BRIDGE__KRE_BASE_URL="${PRO__T7_BRIDGE__KRE_BASE_URL}"
  fi
}

function tnba_feedback_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # tnba-feedback environment variables for ephemeral environments
    export TNBA_FEEDBACK__FEEDBACK_JOB_INTERVAL="${DEV__TNBA_FEEDBACK__FEEDBACK_JOB_INTERVAL}"
    export TNBA_FEEDBACK__MONITORED_VELOCLOUD_HOSTS="${DEV__TNBA_FEEDBACK__MONITORED_VELOCLOUD_HOSTS}"
    export TNBA_FEEDBACK__MONITORED_PRODUCT_CATEGORY="${DEV__TNBA_FEEDBACK__MONITORED_PRODUCT_CATEGORY}"
    export TNBA_FEEDBACK__GRACE_PERIOD_BEFORE_RESENDING_TICKETS="${DEV__TNBA_FEEDBACK__GRACE_PERIOD_BEFORE_RESENDING_TICKETS}"
  else
    # tnba-feedback environment variables for production environment
    export TNBA_FEEDBACK__FEEDBACK_JOB_INTERVAL="${PRO__TNBA_FEEDBACK__FEEDBACK_JOB_INTERVAL}"
    export TNBA_FEEDBACK__MONITORED_VELOCLOUD_HOSTS="${PRO__TNBA_FEEDBACK__MONITORED_VELOCLOUD_HOSTS}"
    export TNBA_FEEDBACK__MONITORED_PRODUCT_CATEGORY="${PRO__TNBA_FEEDBACK__MONITORED_PRODUCT_CATEGORY}"
    export TNBA_FEEDBACK__GRACE_PERIOD_BEFORE_RESENDING_TICKETS="${PRO__TNBA_FEEDBACK__GRACE_PERIOD_BEFORE_RESENDING_TICKETS}"
  fi
}

function tnba_monitor_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # tnba-monitor environment variables for ephemeral environments
    export TNBA_MONITOR__MONITORING_JOB_INTERVAL="${DEV__TNBA_MONITOR__MONITORING_JOB_INTERVAL}"
    export TNBA_MONITOR__MONITORED_VELOCLOUD_HOSTS="$(echo "${DEV__TNBA_MONITOR__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export TNBA_MONITOR__MONITORED_PRODUCT_CATEGORY="${DEV__TNBA_MONITOR__MONITORED_PRODUCT_CATEGORY}"
    export TNBA_MONITOR__BLACKLISTED_EDGES="$(echo "${DEV__TNBA_MONITOR__BLACKLISTED_EDGES}" | jq . -c)"
    export TNBA_MONITOR__GRACE_PERIOD_BEFORE_APPENDING_NEW_TNBA_NOTES="${DEV__TNBA_MONITOR__GRACE_PERIOD_BEFORE_APPENDING_NEW_TNBA_NOTES}"
    export TNBA_MONITOR__GRACE_PERIOD_BEFORE_MONITORING_TICKETS_BASED_ON_LAST_DOCUMENTED_OUTAGE="${DEV__TNBA_MONITOR__GRACE_PERIOD_BEFORE_MONITORING_TICKETS_BASED_ON_LAST_DOCUMENTED_OUTAGE}"
    export TNBA_MONITOR__MIN_REQUIRED_CONFIDENCE_FOR_REQUEST_AND_REPAIR_COMPLETED_PREDICTIONS="${DEV__TNBA_MONITOR__MIN_REQUIRED_CONFIDENCE_FOR_REQUEST_AND_REPAIR_COMPLETED_PREDICTIONS}"
  else
    # tnba-monitor environment variables for production environment
    export TNBA_MONITOR__MONITORING_JOB_INTERVAL="${PRO__TNBA_MONITOR__MONITORING_JOB_INTERVAL}"
    export TNBA_MONITOR__MONITORED_VELOCLOUD_HOSTS="$(echo "${PRO__TNBA_MONITOR__MONITORED_VELOCLOUD_HOSTS}" | jq . -c)"
    export TNBA_MONITOR__MONITORED_PRODUCT_CATEGORY="${PRO__TNBA_MONITOR__MONITORED_PRODUCT_CATEGORY}"
    export TNBA_MONITOR__BLACKLISTED_EDGES="$(echo "${PRO__TNBA_MONITOR__BLACKLISTED_EDGES}" | jq . -c)"
    export TNBA_MONITOR__GRACE_PERIOD_BEFORE_APPENDING_NEW_TNBA_NOTES="${PRO__TNBA_MONITOR__GRACE_PERIOD_BEFORE_APPENDING_NEW_TNBA_NOTES}"
    export TNBA_MONITOR__GRACE_PERIOD_BEFORE_MONITORING_TICKETS_BASED_ON_LAST_DOCUMENTED_OUTAGE="${PRO__TNBA_MONITOR__GRACE_PERIOD_BEFORE_MONITORING_TICKETS_BASED_ON_LAST_DOCUMENTED_OUTAGE}"
    export TNBA_MONITOR__MIN_REQUIRED_CONFIDENCE_FOR_REQUEST_AND_REPAIR_COMPLETED_PREDICTIONS="${PRO__TNBA_MONITOR__MIN_REQUIRED_CONFIDENCE_FOR_REQUEST_AND_REPAIR_COMPLETED_PREDICTIONS}"
  fi
}

function velocloud_bridge_variables() {
  if [[ "${CI_COMMIT_REF_SLUG}" != "master" ]]; then
    # velocloud-bridge environment variables for ephemeral environments
    export VELOCLOUD_BRIDGE__VELOCLOUD_CREDENTIALS="${DEV__VELOCLOUD_BRIDGE__VELOCLOUD_CREDENTIALS}"
  else
    # velocloud-bridge environment variables for production environment
    export VELOCLOUD_BRIDGE__VELOCLOUD_CREDENTIALS="${PRO__VELOCLOUD_BRIDGE__VELOCLOUD_CREDENTIALS}"
  fi
}

function create_enabled_var_for_each_subchart() {
  # Create dinamically enabled value for each subchart in an environment variable
  for environment_var in $(env | grep "_DESIRED"); do
    MODULE_DESIRED_TASKS_NAME=$(echo "${environment_var}" | awk -F "=" '{print $1}')
    MODULE_DESIRED_TASKS_VALUE=$(echo "${environment_var}" | awk -F "=" '{print $2}')
    MODULE_ENABLED_VARIABLE="$(printf '%s\n' "${MODULE_DESIRED_TASKS_NAME//_DESIRED_TASKS/}" | awk '{ print toupper($0) }')_ENABLED"
    if [ "$MODULE_DESIRED_TASKS_VALUE" -gt "0" ]; then
      export "${MODULE_ENABLED_VARIABLE}=true"
    else
      export "${MODULE_ENABLED_VARIABLE}=false"
    fi
  done
}

function environments_assign() {
  # assign enabled variable for each subchart
  create_enabled_var_for_each_subchart
  # assign common environment variables for each environment
  common_variables_by_environment
  # assign specific environment variables for each subchart
  bruin_bridge_variables
  customer_cache_variables
  digi_bridge_variables
  digi_reboot_report_variables
  dri_bridge_variables
  email_tagger_kre_bridge_variables
  email_tagger_monitor_variables
  fraud_monitor_variables
  hawkeye_affecting_monitor_variables
  hawkeye_bridge_variables
  hawkeye_customer_cache_variables
  hawkeye_outage_monitor_variables
  intermapper_outage_monitor_variables
  last_contact_report_variables
  links_metrics_api_variables
  lumin_billing_report_variables
  notifier_variables
  notifications_bridge_variables
  repair_tickets_kre_bridge_variables
  repair_tickets_monitor_variables
  service_affecting_monitor_variables
  service_outage_monitor_variables
  t7_bridge_variables
  tnba_feedback_variables
  tnba_monitor_variables
  velocloud_bridge_variables
}

function main() {
  environments_assign
}

main