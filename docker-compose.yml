version: '3.6'
services:
  # EXAMPLE OF BASE-MICROSERVICE
  # ============================
  base-microservice:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: base-microservice/Dockerfile
      args:
        IGZ_PACKAGES_REPOSITORY_URL: https://s3pypi.mettel-automation.net/igzpackages/index.html
    env_file:
      - base-microservice/src/config/env
    depends_on:
      - nats-server
      - redis
    ports:
      - 9100:9100
  # ============================

  bruin-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/bruin-bridge/Dockerfile
    env_file:
      - services/bruin-bridge/src/config/env
    volumes:
      - ./services/bruin-bridge:/service/app
    depends_on:
      - nats-server
      - redis
      - integration-tests
    ports:
      - 5006:5000
      - 9190:9090

  customer-cache:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/customer-cache/Dockerfile
    env_file:
      - services/customer-cache/src/config/env
    volumes:
      - ./services/customer-cache:/service/app
    depends_on:
      - nats-server
      - redis
      - redis-customer-cache
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5013:5000
      - 9390:9090

  digi-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/digi-bridge/Dockerfile
    env_file:
      - services/digi-bridge/src/config/env
    volumes:
      - ./services/digi-bridge:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5015:5000
      - 9490:9090

  digi-reboot-report:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/digi-reboot-report/Dockerfile
    env_file:
      - services/digi-reboot-report/src/config/env
    volumes:
      - ./services/digi-reboot-report:/service/app
    depends_on:
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5016:5000
      - 9590:9090

  dri-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/dri-bridge/Dockerfile
    env_file:
      - services/dri-bridge/src/config/env
    volumes:
      - ./services/dri-bridge:/service/app
    ports:
      - 5020:5000
      - 9290:9090

  email-tagger-kre-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/email-tagger-kre-bridge/Dockerfile
    env_file:
      - services/email-tagger-kre-bridge/src/config/env
    volumes:
      - ./services/email-tagger-kre-bridge:/service/app
    depends_on:
      - nats-server
      - redis
      - integration-tests
    ports:
      - 5056:5000
      - 9690:9090

    # extra_hosts:
    #  - host.docker.internal:192.168.1.51

  email-tagger-monitor:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: services/email-tagger-monitor/Dockerfile
    env_file:
      - services/email-tagger-monitor/src/config/env
    volumes:
      - ./services/email-tagger-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - redis-email-tagger
      - "notifications-bridge"
    ports:
      - 5055:5000
      - 9790:9090

  fraud-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/fraud-monitor/Dockerfile
    env_file:
      - services/fraud-monitor/src/config/env
    volumes:
      - ./services/fraud-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5024:5000
      - 9890:9090

  gateway-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/gateway-monitor/Dockerfile
    env_file:
      - services/gateway-monitor/src/config/env
    volumes:
      - ./services/gateway-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - velocloud-bridge
      - servicenow-bridge
      - notifications-bridge
    ports:
      - 5010:5000
      - 9009:9000

  hawkeye-affecting-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/hawkeye-affecting-monitor/Dockerfile
    env_file:
      - services/hawkeye-affecting-monitor/src/config/env
    volumes:
      - ./services/hawkeye-affecting-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - "notifications-bridge"
    ports:
      - 5707:5000
      - 9770:9090

  hawkeye-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/hawkeye-bridge/Dockerfile
    env_file:
      - services/hawkeye-bridge/src/config/env
    volumes:
      - ./services/hawkeye-bridge:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5507:5000
      - 9990:9090

  hawkeye-customer-cache:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/hawkeye-customer-cache/Dockerfile
    env_file:
      - services/hawkeye-customer-cache/src/config/env
    volumes:
      - ./services/hawkeye-customer-cache:/service/app
    depends_on:
      - nats-server
      - redis
      - redis-customer-cache
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5023:5000
      - 9091:9090

  hawkeye-outage-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/hawkeye-outage-monitor/Dockerfile
    env_file:
      - services/hawkeye-outage-monitor/src/config/env
    volumes:
      - ./services/hawkeye-outage-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - "notifications-bridge"
    ports:
      - 5607:5000
      - 9270:9090

  intermapper-outage-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/intermapper-outage-monitor/Dockerfile
    env_file:
      - services/intermapper-outage-monitor/src/config/env
    volumes:
      - ./services/intermapper-outage-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5017:5000
      - 9092:9090

  last-contact-report:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/last-contact-report/Dockerfile
    env_file:
      - services/last-contact-report/src/config/env
    volumes:
      - ./services/last-contact-report:/service/app
    depends_on:
      - nats-server
      - redis
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5003:5000
      - 9093:9090

  links-metrics-api:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/links-metrics-api/Dockerfile
    env_file:
      - services/links-metrics-api/src/config/env
    volumes:
      - ./services/links-metrics-api:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5019:5000
      - 9192:9090

  links-metrics-collector:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/links-metrics-collector/Dockerfile
    env_file:
      - services/links-metrics-collector/src/config/env
    volumes:
      - ./services/links-metrics-collector:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5018:5000
      - 9193:9090

  lumin-billing-report:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/lumin-billing-report/Dockerfile
    env_file:
      - services/lumin-billing-report/src/config/env
    volumes:
      - ./services/lumin-billing-report:/service/app
    ports:
      - 5099:5000
      - 9094:9090

  nats-server:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/env
    ports:
      - 4222:4222
      - 8222:8222
    hostname: nats-server

  nats-server-1:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/nats-server-1-env
    hostname: nats-server-1

  nats-server-2:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/nats-server-2-env
    hostname: nats-server-2

  email-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/notifier/Dockerfile
    env_file:
      - services/email-bridge/src/config/env
    volumes:
      - ./services/email-bridge:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5002:5000
      - 9095:9090
    stdin_open: true # for debug
    tty: true # for debug

  notifications-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/notifications-bridge/Dockerfile
    env_file:
      - services/notifications-bridge/src/config/env
    volumes:
      - ./services/notifications-bridge:/service/app
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5022:5000
      - 9101:9090
    stdin_open: true # for debug
    tty: true # for debug

  repair-tickets-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/repair-tickets-monitor/Dockerfile
    env_file:
      - services/repair-tickets-monitor/src/config/env
    volumes:
      - ./services/repair-tickets-monitor:/service/app
    depends_on:
      - nats-server
      - repair-tickets-kre-bridge
      - bruin-bridge
      - redis
      - redis-email-tagger
      - "notifications-bridge"
      - "email-bridge"
    ports:
      - 5057:5000
      - 9096:9090
    stdin_open: true # for debug
    tty: true # for debug


  repair-tickets-kre-bridge:
    build:
      context: .
      dockerfile: services/repair-tickets-kre-bridge/Dockerfile
    env_file:
      - services/repair-tickets-kre-bridge/src/config/env
    volumes:
      - ./services/repair-tickets-kre-bridge:/service/app
    depends_on:
      - nats-server
      - redis
      - integration-tests
    ports:
      - 5058:5000
      - 9010:9000
    extra_hosts:
      - host.docker.internal:host-gateway
    stdin_open: true # for debug
    tty: true # for debug

# service-affecting-monitor instances vary depending on the environment you want to test, so their configuration
# can't be hardcoded in this docker-compose file
#
# Use the following template if you need to spin up such instances:
# -------------------------------------------------------------------------------------
#  service-affecting-monitor-<id>:
#    build:
#      # Context must be the root of the monorepo
#      context: .
#      dockerfile: services/service-affecting-monitor/Dockerfile
#    env_file:
#      - services/service-affecting-monitor/src/config/<env_filename>
#    depends_on:
#      - nats-server
#      - redis
#      - "notifications-bridge"
#      - "email-bridge"
#    ports:
#      - <port_mapped_to_quartz>:5000
#      - <port_mapped_to_metrics_server>:9090
# -------------------------------------------------------------------------------------
# where:
#  - <id> is an identifier for the service
#  - <env_filename> is the filename of the env file you want to use for the configuration of the service
#  - <port_mapped_to_quartz> is the port of the host machine mapped to Quartz's
#  - <port_mapped_to_metrics_server> is the port of the host machine mapped to the metric server's

# service-outage-monitor instances vary depending on the environment you want to test, so their configuration
# can't be hardcoded in this docker-compose file
#
# Use the following template if you need to spin up such instances:
# -------------------------------------------------------------------------------------
#  service-outage-monitor-<id>:
#    build:
#      # Context must be the root of the monorepo
#      context: .
#      dockerfile: services/service-outage-monitor/Dockerfile
#    env_file:
#      - services/service-outage-monitor/src/config/<env_filename>
#    depends_on:
#      - nats-server
#      - redis
#      - "notifications-bridge"
#    ports:
#      - <port_mapped_to_quartz>:5000
#      - <port_mapped_to_metrics_server>:9090
# -------------------------------------------------------------------------------------
# where:
#  - <id> is an identifier for the service
#  - <env_filename> is the filename of the env file you want to use for the configuration of the service
#  - <port_mapped_to_quartz> is the port of the host machine mapped to Quartz's
#  - <port_mapped_to_metrics_server> is the port of the host machine mapped to the metric server's

  service-outage-monitor-triage:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/service-outage-monitor/Dockerfile
    env_file:
      - services/service-outage-monitor/src/config/env-triage
    volumes:
      - ./services/service-outage-monitor:/service/app
    depends_on:
      - nats-server
      - redis
      - "notifications-bridge"
    ports:
      - 5007:5000
      - 9180:9090

  servicenow-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/servicenow-bridge/Dockerfile
    env_file:
      - services/servicenow-bridge/src/config/env
    volumes:
      - ./services/servicenow-bridge:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5021:5000
      - 9099:9090

  t7-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/t7-bridge/Dockerfile
    env_file:
      - services/t7-bridge/src/config/env
    volumes:
      - ./services/t7-bridge:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5009:5000
      - 9097:9090

  tnba-feedback:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/tnba-feedback/Dockerfile
    env_file:
      - services/tnba-feedback/src/config/env
    volumes:
      - ./services/tnba-feedback:/service/app
    depends_on:
      - nats-server
      - redis
      - redis-tnba-feedback
      - "notifications-bridge"
    ports:
      - 5014:5000
      - 9098:9090

# tnba-monitor instances vary depending on the environment you want to test, so their configuration
# can't be hardcoded in this docker-compose file
#
# Use the following template if you need to spin up such instances:
# -------------------------------------------------------------------------------------
#  tnba-monitor-<id>:
#    build:
#      # Context must be the root of the monorepo
#      context: .
#      dockerfile: services/tnba-monitor/Dockerfile
#    env_file:
#      - services/tnba-monitor/src/config/<env_filename>
#    depends_on:
#      - nats-server
#      - redis
#      - "notifications-bridge"
#    ports:
#      - <port_mapped_to_quartz>:5000
#      - <port_mapped_to_metrics_server>:9090
# -------------------------------------------------------------------------------------
# where:
#  - <id> is an identifier for the service
#  - <env_filename> is the filename of the env file you want to use for the configuration of the service
#  - <port_mapped_to_quartz> is the port of the host machine mapped to Quartz's
#  - <port_mapped_to_metrics_server> is the port of the host machine mapped to the metric server's

  velocloud-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: services/velocloud-bridge/Dockerfile
    env_file:
      - services/velocloud-bridge/src/config/env
    volumes:
      - ./services/velocloud-bridge:/service/app
    depends_on:
      - nats-server
      - redis
    ports:
      - 5001:5000
      - 9191:9090

  redis:
    image: redis:5.0.4
    ports:
      - 6379:6379
    expose:
      - 6379

  redis-customer-cache:
    image: redis:5.0.4
    ports:
      - 6380:6379
    expose:
      - 6380

  redis-tnba-feedback:
    image: redis:5.0.4
    ports:
      - 6381:6379
    expose:
      - 6381

  redis-email-tagger:
    image: redis:5.0.4
    ports:
      - 6382:6379
    expose:
      - 6382

  grafana:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: metrics-dashboard/grafana/Dockerfile
    env_file:
      - metrics-dashboard/grafana/config/env
    depends_on:
      - prometheus
      - nats-server
      - redis
    restart: unless-stopped
    ports:
      - 3001:3000
    volumes:
      - ./metrics-dashboard/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./metrics-dashboard/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./metrics-dashboard/grafana/dashboards-definitions:/var/lib/grafana/dashboards-definitions

  prometheus:
    image: prom/prometheus:v2.7.2
    restart: unless-stopped
    volumes:
      - ./metrics-dashboard/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics-dashboard/thanos/storage/:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.min-block-duration=2m'
      - '--storage.tsdb.max-block-duration=2m'
      - '--storage.tsdb.retention.time=6m'
    ports:
      - 9090:9090

  thanos-sidecar:
    build:
      context: .
      dockerfile: metrics-dashboard/thanos/Dockerfile
      args:
        GRPC_ADDRESS: 10091
        HTTP_ADDRESS: 10902
    depends_on:
      - prometheus
    restart: unless-stopped
    command:
      - 'sidecar'
      - '--tsdb.path=/prometheus'
      - '--prometheus.url=http://prometheus:9090'
      - '--grpc-address=0.0.0.0:10091'
      - '--http-address=0.0.0.0:10902'
    volumes:
      - ./metrics-dashboard/thanos/storage/:/prometheus
    ports:
      - 10091:10091
      - 10902:10902

  thanos-querier:
    build:
      context: .
      dockerfile: metrics-dashboard/thanos/Dockerfile
      args:
        HTTP_ADDRESS: 19091
    depends_on:
      - thanos-sidecar
    restart: unless-stopped
    command:
      - 'query'
      - '--http-address=0.0.0.0:19091'
      - '--store=thanos-sidecar:10091'
    ports:
      - 19091:19091

  mongo:
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: bruin
    volumes:
      - ${HOME}/databases/mettel/mongodb:/data/db

  mongo-links-metrics:
    image: mongo:latest
    restart: always
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: metrics
    volumes:
      - ./databases/link_metrics/mongodb:/data/db

  # Mongo Express Web-based MongoDB admin interface
  mongo-express:
    image: mongo-express
    container_name: 'mongo-express'
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
      # Change mongodb server to another mongo instance name in docker compose to inspect it
      - ME_CONFIG_MONGODB_SERVER=mongo-links-metrics
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
    ports:
      - '8081:8081'
    restart: always

  integration-tests:
    build:
      context: .
      dockerfile: integration-tests/Dockerfile
    ports:
      - 8001:8001
      - 8002:8002
      - 50001:50001
      - 50002:50002
    volumes:
      - ./integration-tests:/service/app
