version: '3.6'
services:
  nats-server:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/env
    ports:
      - 4222:4222
      - 8222:8222
    hostname: nats-server
  nats-server-1:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/nats-server-1-env
    hostname: nats-server-1
  nats-server-2:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/nats-server-2-env
    hostname: nats-server-2

  # EXAMPLE OF BASE-MICROSERVICE
  # ============================
  base-microservice:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: base-microservice/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
        IGZ_PACKAGES_REPOSITORY_URL: https://s3pypi.mettel-automation.net/igzpackages/index.html
        IGZ_PACKAGES_VERSION: 1.0.0
    env_file:
      - base-microservice/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 9100:9100
  # ============================
  sites-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: sites-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - sites-monitor/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5000:5000
      - 9110:9090

  velocloud-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: velocloud-bridge/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - velocloud-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5001:5000

  notifier:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: notifier/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - notifier/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5002:5000

  last-contact-report:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: last-contact-report/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - last-contact-report/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5003:5000

  dispatch-portal-backend:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: dispatch-portal-backend/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - dispatch-portal-backend/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5004:5000

  lit-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: lit-bridge/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - lit-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5005:5000

  cts-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: cts-bridge/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - cts-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5010:5000

  service-dispatch-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-dispatch-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - cts-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
      - "bruin-bridge"
      - "lit-bridge"
      - "cts-bridge"
      - "notifier"
    ports:
      - 5011:5000

  bruin-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: bruin-bridge/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - bruin-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5006:5000

  service-outage-monitor-1:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-outage-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - service-outage-monitor/src/config/env-outage-monitor-1
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5107:5000
      - 9140:9090

  service-outage-monitor-2:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-outage-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - service-outage-monitor/src/config/env-outage-monitor-2
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5207:5000
      - 9150:9090

  service-outage-monitor-3:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-outage-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - service-outage-monitor/src/config/env-outage-monitor-3
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5307:5000
      - 9160:9090

  service-outage-monitor-4:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-outage-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - service-outage-monitor/src/config/env-outage-monitor-4
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5407:5000
      - 9170:9090

  service-outage-monitor-triage:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-outage-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - service-outage-monitor/src/config/env-triage
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5007:5000
      - 9180:9090

  service-affecting-monitor:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: service-affecting-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - service-affecting-monitor/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5008:5000
      - 9130:9090

  tnba-monitor:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: tnba-monitor/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - tnba-monitor/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5012:5000

  t7-bridge:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: t7-bridge/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - t7-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5009:5000

  customer-cache:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: customer-cache/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - customer-cache/src/config/env
    depends_on:
      - "nats-server"
      - redis
      - redis-customer-cache
    ports:
      - 5013:5000

  redis:
    image: redis:5.0.4
    ports:
      - 6379:6379
    expose:
      - 6379

  redis-customer-cache:
    image: redis:5.0.4
    ports:
      - 6380:6379
    expose:
      - 6380

  grafana:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: metrics-dashboard/grafana/Dockerfile
      args:
        GRAFANA_ADMIN_PASSWORD: password
    env_file:
      - metrics-dashboard/grafana/config/env
    depends_on:
      - prometheus
      - "nats-server"
      - redis
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - ./metrics-dashboard/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./metrics-dashboard/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./metrics-dashboard/grafana/dashboards-definitions:/var/lib/grafana/dashboards

  prometheus:
    image: prom/prometheus:v2.7.2
    restart: unless-stopped
    volumes:
      - ./metrics-dashboard/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics-dashboard/thanos/storage/:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.min-block-duration=2m'
      - '--storage.tsdb.max-block-duration=2m'
      - '--storage.tsdb.retention.time=6m'
    ports:
      - 9090:9090

  thanos-sidecar:
    build:
      context: .
      dockerfile: metrics-dashboard/thanos/Dockerfile
      args:
        GRPC_ADDRESS: 10091
        HTTP_ADDRESS: 10902
    depends_on:
      - prometheus
    restart: unless-stopped
    command:
      - 'sidecar'
      - '--tsdb.path=/prometheus'
      - '--prometheus.url=http://prometheus:9090'
      - '--grpc-address=0.0.0.0:10091'
      - '--http-address=0.0.0.0:10902'
    volumes:
      - ./metrics-dashboard/thanos/storage/:/prometheus
    ports:
      - 10091:10091
      - 10902:10902

  thanos-querier:
    build:
      context: .
      dockerfile: metrics-dashboard/thanos/Dockerfile
      args:
        HTTP_ADDRESS: 19091
    depends_on:
      - thanos-sidecar
    restart: unless-stopped
    command:
      - 'query'
      - '--http-address=0.0.0.0:19091'
      - '--store=thanos-sidecar:10091'
    ports:
      - 19091:19091

  dispatch-portal-frontend:
    build:
      context: .
      dockerfile: dispatch-portal-frontend/Dockerfile
      args:
        CURRENT_ENV: PRO
        DNS_ENVIRONMENT: http://localhost:8080
    ports:
      - 3000:3000

  nginx:
    build:
      context: .
      dockerfile: dispatch-portal-frontend/nginx/Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - dispatch-portal-frontend
      - dispatch-portal-backend
    environment:
      RUN_MODE: "local"
      CURRENT_ENVIRONMENT: "dev"
      PAPERTRAIL_HOST: "logs6.papertrailapp.com"
      PAPERTRAIL_PORT: 13957
      ENVIRONMENT: "automation-adfadfaf"
      ENVIRONMENT_NAME: "adfadfaf"
      BUILD_NUMBER: "485485"
    #network_mode: "host"

  lumin-billing-report:
    build:
      # Context must be the root of the monorepo
      context: .
      dockerfile: lumin-billing-report/Dockerfile
      args:
        REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation
        DOCKER_BASE_IMAGE_VERSION: 2.0.0
    env_file:
      - lumin-billing-report/src/config/env
    ports:
      - 5099:5000
