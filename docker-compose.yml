version: '3.6'
services:
  nats-server:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/env
    ports:
      - 4222:4222
      - 8222:8222
    hostname: nats-server
  nats-server-1:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/nats-server-1-env
    hostname: nats-server-1
  nats-server-2:
    restart: on-failure
    build:
      context: .
      dockerfile: nats-server/Dockerfile
    env_file:
      - nats-server/nats-server-2-env
    hostname: nats-server-2

  # EXAMPLE OF BASE-MICROSERVICE
  # ============================
  base-microservice:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: base-microservice/Dockerfile
    env_file:
      - base-microservice/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 9100:9100
  # ============================
  sites-monitor:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: sites-monitor/Dockerfile
    env_file:
      - sites-monitor/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5000:5000
      - 9110:9090

  velocloud-bridge:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: velocloud-bridge/Dockerfile
    env_file:
      - velocloud-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5001:5000
      - 9120:9090

  notifier:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: notifier/Dockerfile
    env_file:
      - notifier/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5002:5000

  last-contact-report:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: last-contact-report/Dockerfile
    env_file:
      - last-contact-report/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5003:5000


  service-outage-triage:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: service-outage-triage/Dockerfile
    env_file:
      - service-outage-triage/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5005:5000

  bruin-bridge:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: bruin-bridge/Dockerfile
    env_file:
      - bruin-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5006:5000

  service-outage-monitor:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: service-outage-monitor/Dockerfile
    env_file:
      - service-outage-monitor/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5007:5000

  service-affecting-monitor:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: service-affecting-monitor/Dockerfile
    env_file:
      - service-affecting-monitor/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5008:5000

  t7-bridge:
    build:
      # Context must be the root of the monorepo since we need to copy custompackages
      context: .
      dockerfile: t7-bridge/Dockerfile
    env_file:
      - t7-bridge/src/config/env
    depends_on:
      - "nats-server"
      - redis
    ports:
      - 5009:5000

  redis:
    image: redis:5.0.4
    ports:
      - 6379:6379
    expose:
      - 6379

  grafana:
    build:
      context: .
      dockerfile: metrics-dashboard/grafana/Dockerfile
      args:
        GRAFANA_ADMIN_PASSWORD: password
    env_file:
      - metrics-dashboard/grafana/config/env
    depends_on:
      - prometheus
      - "nats-server"
      - redis
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - ./metrics-dashboard/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./metrics-dashboard/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./metrics-dashboard/grafana/dashboards-definitions:/var/lib/grafana/dashboards
      
  prometheus:
    build:
      context: .
      dockerfile: metrics-dashboard/prometheus/Dockerfile
    restart: unless-stopped
    volumes:
      - ./metrics-dashboard/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics-dashboard/thanos/storage/:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.min-block-duration=2m'
      - '--storage.tsdb.max-block-duration=2m'
      - '--storage.tsdb.retention.time=6m'
    ports:
      - 9090:9090
    
  thanos-sidecar:
    build:
      context: .
      dockerfile: metrics-dashboard/thanos/Dockerfile
      args:
        GRPC_ADDRESS: 10091
        HTTP_ADDRESS: 10902
    depends_on:
      - prometheus
    restart: unless-stopped
    command:
      - 'sidecar'
      - '--tsdb.path=/prometheus'
      - '--prometheus.url=http://prometheus:9090'
      - '--grpc-address=0.0.0.0:10091'
      - '--http-address=0.0.0.0:10902'
    volumes:
      - ./metrics-dashboard/thanos/storage/:/prometheus
    ports:
      - 10091:10091
      - 10902:10902

  thanos-querier:
    build:
      context: .
      dockerfile: metrics-dashboard/thanos/Dockerfile
      args:
        HTTP_ADDRESS: 19091
    depends_on:
      - thanos-sidecar
    restart: unless-stopped
    command:
      - 'query'
      - '--http-address=0.0.0.0:19091'
      - '--store=thanos-sidecar:10091'
    ports:
      - 19091:19091