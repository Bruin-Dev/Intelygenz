apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ecr-cred-helper
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sa-ecr-cred-helper
          containers:
          - command:
            - /bin/sh
            - -c
            - |-
              apk add --update python3 py-pip curl python3 bash
              pip3 install --upgrade pip && pip3 install awscli=={{ .Values.config.awscli_version }}
              curl -LO https://storage.googleapis.com/kubernetes-release/release/v{{ .Values.config.kubectl_version }}/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mv ./kubectl /usr/local/bin/kubectl
              TOKEN=`aws ecr get-login --no-include-email --region ${REGION} | cut -d' ' -f6`
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found $SECRET_NAME
              kubectl create secret docker-registry $SECRET_NAME \
              --docker-server=https://{{ .Values.config.ecr_registry.url }} \
              --docker-username=AWS \
              --docker-password="${TOKEN}"
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
              echo "All done."
            env:
            - name: AWS_DEFAULT_REGION
              value: '{{ .Values.config.aws_region }}'
            - name: AWS_SECRET_ACCESS_KEY
              value: '{{ .Values.config.aws_secret_access_key }}'
            - name: AWS_ACCESS_KEY_ID
              value: '{{ .Values.config.aws_access_key_id }}'
            - name: SECRET_NAME
              value: '{{ .Values.config.ecr_registry.name }}'
            - name: REGION
              value: '{{ .Values.config.aws_region }}'
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default "latest" }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            name: ecr-cred-helper
            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: '{{ .Values.config.schedule_expr }}'
  successfulJobsHistoryLimit: 3
  suspend: false