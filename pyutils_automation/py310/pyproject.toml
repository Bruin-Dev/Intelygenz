[tool.poetry]
name = "pyutils-automation"
version = "1.0.0"
description = "Common libs used across the Automation system"
authors = ["Intelygenz"]
packages = [
    { include = "framework", from = "src" },
]

[tool.poetry.dependencies]
python = "3.10.4"
nats-py = "2.0.0"
quart = "0.17.0"
quart-openapi = "1.5.2"
tenacity = "8.0.1"
shortuuid = "1.0.0"
redis = "3.3.11"
blinker = "1.5"

[tool.poetry.dev-dependencies]
pytest = "6.2.5"
pytest-asyncio = "0.18.3"
pytest-cov = "3.0.0"
ipython = "8.4.0"
black = "22.3.0"
isort = "5.10.1"
coverage = {extras = ["toml"], version = "6.4.1"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py310"]
line-length = 120

[tool.isort]
py_version=310
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.pytest.ini_options]
addopts = "-vv"
testpaths = [
    "src/tests/",
]
python_files = "*_test.py"
python_functions = "*_test"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
omit = [
    "*/__init__.py",
    "src/tests/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]

ignore_errors = false
fail_under = 80
precision = 2
show_missing = true

