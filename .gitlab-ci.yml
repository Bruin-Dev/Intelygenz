stages:
  - validation
  - unit_test
  - acceptance_tests
  - basic_infra
  - build
  - deploy

variables:
  NATS_SERVER1: "nats://nats-streaming:4222"
  NATS_CLUSTER_NAME: "automation-engine-nats"
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  REPOSITORY_URL: 374050862540.dkr.ecr.us-east-1.amazonaws.com/automation

#
# Using gitlab-ci anchors to reuse scripts between jobs (https://docs.gitlab.com/ee/ci/yaml/#anchors)
#
.job_linter_template: &lint_module
  stage: validation
  image: python:3.6
  before_script:
    - apt-get update -q -y
    - pip install pycodestyle
  script:
    - pycodestyle --max-line-length=120 ${MODULE}

.job_unittest_template: &unittest_module
  stage: unit_test
  image: python:3.6
  before_script:
    - apt-get update -q -y
    - cd ${MODULE}
    - pip install -r requirements.txt
  script:
    - pytest --cov

.job_acceptance_test_template: &acceptance_test_module
  stage: acceptance_tests
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
    - pip install docker-compose
  script:
    - docker-compose -f docker-compose-ci.yml up --build --abort-on-container-exit
  after_script:
    - docker-compose -f docker-compose-ci.yml down && docker-compose -f docker-compose-ci.yml rm -v

.job_app_build_template: &build_app_image
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region us-east-1)
  script:
    - docker build -t ${REPOSITORY_URL}-${MODULE_NAME}:latest -t ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID} -f ${MODULE_NAME}/Dockerfile .
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:latest
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID}
  after_script:
    - docker rmi ${REPOSITORY_URL}-${MODULE_NAME}:latest
    - docker rmi ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID}


.job_terraform_template: &terraform_template
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - terraform init -backend=true -get=true -input=false

# ===============
# Modules linters
# ===============

igzpackages-linter:
  variables:
    MODULE: custompackages/igzpackages/
  <<: *lint_module

velocloud-linter:
  variables:
    MODULE: custompackages/velocloud/velocloud_client
  <<: *lint_module

velocloud-notificator-linter:
  variables:
    MODULE: velocloud-notificator
  <<: *lint_module

velocloud-orchestrator-linter:
  variables:
    MODULE: velocloud-orchestrator
  <<: *lint_module

velocloud-bridge:
  variables:
    MODULE: velocloud-bridge
  <<: *lint_module

acceptance-test-linter:
  variables:
    MODULE: acceptance-tests
  <<: *lint_module

#
# Modules unit tests
#
igzpackages-test:
  variables:
    MODULE: custompackages/igzpackages
  stage: unit_test
  image: python:3.6
  before_script:
    - apt-get update -q -y
    - cd ${MODULE}
    - python setup.py install
  script:
    - pytest --cov

velocloud-test:
  variables:
    MODULE: velocloud_client
  stage: unit_test
  image: python:3.6
  before_script:
    - apt-get update -q -y
    - cd custompackages/velocloud/
    - python setup.py install
    - cd ${MODULE}
  script:
    - pytest --cov

velocloud-notificator-test:
  variables:
    MODULE: velocloud-notificator
  <<: *unittest_module

velocloud-orchestrator-test:
  variables:
    MODULE: velocloud-orchestrator
  <<: *unittest_module

velocloud-bridge-test:
  variables:
    MODULE: velocloud-bridge
  <<: *unittest_module

#
# Acceptance/Integration tests
#
event_sourcing_acceptance_test:
  variables:
    BLUEPRINT: ${HONESTCODE_EVENT_SOURCING_BLUEPRINT}
  <<: *acceptance_test_module

#
# Images builds
#
nats-streaming-build:
  stage: build
  variables:
    MODULE_NAME: nats-streaming-server
  <<: *build_app_image

grafana-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/grafana
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region us-east-1)
  script:
    - cp metrics-dashboard/grafana/configs/prometheus-dev.yml metrics-dashboard/grafana/datasources/prometheus.yml
    - docker build -t ${REPOSITORY_URL}-${MODULE_NAME}:latest -t ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID} -f ${MODULE_NAME}/Dockerfile .
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:latest
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID}
  after_script:
    - docker rmi ${REPOSITORY_URL}-${MODULE_NAME}:latest
    - docker rmi ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID}

prometheus-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/prometheus
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region us-east-1)
  script:
    - cp metrics-dashboard/prometheus/configs/prometheus-dev.yml metrics-dashboard/prometheus/prometheus.yml
    - docker build -t ${REPOSITORY_URL}-${MODULE_NAME}:latest -t ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID} -f ${MODULE_NAME}/Dockerfile .
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:latest
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID}
  after_script:
    - docker rmi ${REPOSITORY_URL}-${MODULE_NAME}:latest
    - docker rmi ${REPOSITORY_URL}-${MODULE_NAME}:${CI_PIPELINE_ID}


velocloud-notificator-build:
  stage: build
  variables:
    MODULE_NAME: velocloud-notificator
  <<: *build_app_image

velocloud-bridge-build:
  stage: build
  variables:
    MODULE_NAME: velocloud-bridge
  <<: *build_app_image

velocloud-orchestrator-build:
  stage: build
  variables:
    MODULE_NAME: velocloud-orchestrator
  <<: *build_app_image

# =========
# TERRAFORM
# =========

terraform-validate-basic-infra:
  stage: validation
  <<: *terraform_template
  script:
    - terraform init infra-as-code/basic-infra
    - terraform validate infra-as-code/basic-infra

terraform-validate-dev:
  stage: validation
  <<: *terraform_template
  script:
    - export TF_VAR_BUILD_NUMBER=${CI_PIPELINE_ID}
    - export TF_VAR_VELOCLOUD_CREDENTIALS=${VELOCLOUD_CREDENTIALS_DEV}
    - export TF_VAR_EMAIL_ACC_PWD=${EMAIL_ACC_PWD}
    - export TF_VAR_MONITORING_SECONDS=${MONITORING_SECONDS}
    - export TF_VAR_LOST_CONTACT_RECIPIENT=${LOST_CONTACT_RECIPIENT}
    - terraform init infra-as-code/dev
    - terraform validate infra-as-code/dev

basic-infra:
  stage: basic_infra
  <<: *terraform_template
  script:
    - terraform init infra-as-code/basic-infra
    - terraform apply -auto-approve infra-as-code/basic-infra

deploy:
  stage: deploy
  <<: *terraform_template
  script:
    - export TF_VAR_ENVIRONMENT=automation-${CI_COMMIT_REF_NAME}
    - export TF_VAR_SUBDOMAIN=${CI_COMMIT_REF_SLUG}
    - export TF_VAR_BUILD_NUMBER=${CI_PIPELINE_ID}
    - export TF_VAR_VELOCLOUD_CREDENTIALS=${VELOCLOUD_CREDENTIALS_PRO}
    - export TF_VAR_EMAIL_ACC_PWD=${EMAIL_ACC_PWD}
    - export TF_VAR_MONITORING_SECONDS=${MONITORING_SECONDS}
    - export TF_VAR_LOST_CONTACT_RECIPIENT=${LOST_CONTACT_RECIPIENT}
    - terraform init infra-as-code/dev
    - terraform apply -auto-approve infra-as-code/dev
  environment:
    name: $CI_COMMIT_REF_NAME
    url: http://dev.mettel-automation.net
    on_stop: destroy

destroy:
  stage: deploy
  <<: *terraform_template
  script:
    - export TF_VAR_ENVIRONMENT=automation-${CI_COMMIT_REF_NAME}
    - terraform init infra-as-code/dev
    - terraform destroy -auto-approve infra-as-code/dev
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
  when: manual
