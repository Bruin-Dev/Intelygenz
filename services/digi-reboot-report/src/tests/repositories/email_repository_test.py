import json
from datetime import datetime, timedelta
from typing import Any
from unittest.mock import AsyncMock, Mock, patch

import pytest
from shortuuid import uuid

from application.repositories import email_repository as email_repository_module
from application.repositories.email_repository import EmailRepository
from config import testconfig

uuid_ = uuid()
uuid_mock = patch.object(email_repository_module, "uuid", return_value=uuid_)


def to_json_bytes(message: dict[str, Any]):
    return json.dumps(message, default=str, separators=(",", ":")).encode()


@pytest.fixture(scope="function")
def email_repository_instance():
    return EmailRepository(nats_client=Mock(), config=testconfig)


class TestEmailRepository:
    def instance_test(self):
        config = testconfig
        nats_client = Mock()

        email_repository = EmailRepository(nats_client, config)

        assert email_repository._config is config
        assert email_repository._nats_client is nats_client

    @pytest.mark.asyncio
    async def send_email_test(self, email_repository_instance):

        datetime_now = datetime.now()

        yesterday_date = datetime_now - timedelta(days=2)

        html = f"""\
        <html>
          <head></head>
          <body>
            <p>Please see more recent report with data through the end of {yesterday_date.strftime("%Y-%m-%d")}.
               <br>
               This report is generated by the MetTel IPA system.
            </p>
          </body>
        </html>
        """

        email_repository_instance._nats_client.request = AsyncMock()
        datetime_mock = Mock()
        datetime_mock.now = Mock(return_value=datetime_now)
        with patch.object(email_repository_module, "datetime", new=datetime_mock):
            with uuid_mock:
                await email_repository_instance.send_email("test.csv")
        request = json.loads(email_repository_instance._nats_client.request.call_args.args[1].decode("utf-8"))
        assert email_repository_instance._nats_client.request.call_args.args[0] == "notification.email.request"
        assert request["body"]["email_data"]["html"] == html

        assert request["body"]["email_data"]["attachments"][0]["name"] == "digi_reboot_report.csv"
