.kre_template_deploy_basic_infra: &kre_template_deploy_basic_infra
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/terraform_1.0_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - cd ${MODULE} || exit 1
    # assign terraform variables
    - export TF_VAR_RUNTIME_NAME=${KRE_RUNTIME_NAME}
    - export TF_VAR_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    # - export TF_VAR_CERT_MANAGER_HELM_CHART_VERSION=${CERT_MANAGER_CHART_V}
    - export TF_VAR_EXTERNAL_DNS_HELM_CHART_VERSION=${EXTERNAL_DNS_CHART_V}
    - export TF_VAR_HOSTPATH_HELM_CHART_VERSION=${HOSTPATH_CHART_V}
    - export TF_VAR_INGRESS_NGINX_HELM_CHART_VERSION=${INGRESS_NGINX_CHART_V}
    - export TF_VAR_METRICS_SERVER_VERSION=${KUBERNETES_METRICS_SERVER_V}
    - export TF_VAR_WHITELISTED_IPS="[${LOAD_BALANCER_WHITELIST}]"
    # - echo "CERT_MANAGER_CHART_V value is ${CERT_MANAGER_CHART_V}"
    # - echo "TF_VAR_CERT_MANAGER_HELM_CHART_VERSION value is ${TF_VAR_CERT_MANAGER_HELM_CHART_VERSION}"
    - >
      for i in $(ls -d */ | cut -d " " -f10); do
        (
          echo "The current Workdir is $i"
          cd "${i}" || exit
          terraform init -backend=true -get=true -input=false
          if [[ "$i" != "1-eks-roles/" && "$i" != "3-smtp/" ]]; then
            terraform workspace new ${TF_VAR_CURRENT_ENVIRONMENT} || terraform workspace select ${TF_VAR_CURRENT_ENVIRONMENT}
          fi
          terraform plan && terraform apply -auto-approve
          cd ..
        )
      done
    - cd ${CI_PROJECT_DIR}
    # INSTALL KUBE CONFIG
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # INSTALL NECESSARY PYTHON LIBRARIES
    - pip3 install -r ci-utils/eks/iam-to-eks-roles/requirements.txt --use-feature=2020-resolver
    # ASSIGN RBAC PERMISSION IN EKS FROM IAM ROLES
    - >
      for i in $(echo $IAM_TO_EKS_ROLES | tr ", " "\n"); do
        (
          python3 ci-utils/eks/iam-to-eks-roles/app.py -p mettel-automation-kre --project-role-tag ${i}
        )
      done
  tags:
    - kubernetes

.kre_template_deploy_runtime: &kre_template_deploy_runtime
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/terraform_1.0_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - cd ${MODULE} || exit 1
    # assign terraform variables
    - export TF_VAR_CURRENT_ENVIRONMENT=${CURRENT_ENVIRONMENT}
    - export TF_VAR_RUNTIME_NAME=${KRE_RUNTIME_NAME}
    - terraform init -backend=true -get=true -input=false
    - terraform workspace new ${TF_VAR_CURRENT_ENVIRONMENT} || terraform workspace select ${TF_VAR_CURRENT_ENVIRONMENT}
    - terraform plan && terraform apply -auto-approve
    - KRE_HOSTED_ZONE_ID=$(terraform output kre_runtime_hosted_zone_id | tr -d '"')
    - cd ${CI_PROJECT_DIR}
    # CONFIGURE CLUSTER CREDENTIALS TO DEPLOY (KUBECONFIG)
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # CREATE NAMESPACE IF NECESSARY
    - kubectl create ns ${KRE_RUNTIME_NAME} --dry-run -o yaml | kubectl apply -f -
    # ADD HELM REPOSITORIES
    - helm repo add konstellation-io https://charts.konstellation.io
    - helm repo update
    # INSTALL KONSTELLATION RUNTIME ENGINE
    - helm upgrade
      --wait
      --install ${KRE_RUNTIME_NAME}
      --namespace ${KRE_RUNTIME_NAME}
      --values ./helm/kre-runtimes/values.yaml
      --values ${KRE_RUNTIME_SMTP_VALUES_CONFIG}
      --version ${KRE_HELM_CHART_V}
      --set runtimeName=${KRE_RUNTIME_NAME}
      --set config.smtp.senderName=${KRE_RUNTIME_NAME}
      --set config.baseDomainName=${BASE_DOMAIN_NAME}
      --set config.admin.apiHost="api.${BASE_DOMAIN_NAME}"
      --set config.admin.frontendBaseURL="https://admin.${BASE_DOMAIN_NAME}"
      --set config.auth.cookieDomain="${BASE_DOMAIN_NAME}"
      --set kapacitor.influxURL="http://${KRE_RUNTIME_NAME}-influxdb:8086"
      --set adminApi.host="api.${BASE_DOMAIN_NAME}"
      --set adminUI.host="admin.${BASE_DOMAIN_NAME}"
      --set entrypoint.host="${BASE_DOMAIN_NAME}"
      --set certManager.dns01.route53.accessKeyID=${AWS_ACCESS_KEY_ID}
      --set certManager.dns01.route53.secretAccessKey=${AWS_SECRET_ACCESS_KEY}
      --set certManager.dns01.route53.hostedZoneID=${KRE_HOSTED_ZONE_ID}
      konstellation-io/kre
    # CREATE / UPDATE PUBLIC DASHBOARDS
    - >
      if [ "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]; then
        export KRE_RUNTIME_DASHBOARD_DNS=${KRE_RUNTIME_NAME}              
      else
        export KRE_RUNTIME_DASHBOARD_DNS=${KRE_RUNTIME_NAME}-dev
      fi
    - envsubst '${KRE_RUNTIME_DASHBOARD_DNS},${KRE_RUNTIME_NAME},${KRE_RUNTIME_INFLUX_SOURCE},${KRE_RUNTIME_DASHBOARD},${KRE_RUNTIME_DASHBOARD_USER},${KRE_RUNTIME_DASHBOARD_PASSWORD}' < helm/kre-runtimes/dashboards.yaml.tpl > helm/kre-runtimes/dashboards.yaml
    - kubectl apply -f helm/kre-runtimes/dashboards.yaml
    - kubectl -n ${KRE_RUNTIME_NAME} rollout restart deployment chronograf-proxy
  tags:
    - kubernetes
