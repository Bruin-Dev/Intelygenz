#
# Using gitlab-ci extends to reuse scripts between jobs (https://docs.gitlab.com/ee/ci/yaml/#extends)
#

.helm_template_deploy_chart: &helm_template_deploy_chart
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/python3.6_alpine_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    # INSTALL KUBE CONFIG
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # CREATE NAMESPACE IF IS NECESSARY
    - kubectl create namespace ${NAMESPACE} --dry-run -o yaml | kubectl apply -f -
    # INITIALIZE HELM
    - python3 ci-utils/helm/add_helm_repositories.py
    - helm repo update
    - helm dep up ${HELM_CHART_DIR}
    # GET DOCKER IMAGE FOR HELM CHART
    - python3 ci-utils/ecr/ecr_images_util.py -e ${ENVIRONMENT_NAME} -g -a -p -f "$DOCKER_IMAGES_FILE"
    - source ci-utils/environments/build_number_assign.sh
    # GET HELM CHART SET ATTRIBUTES
    - source ci-utils/environments/deploy_environment_vars.sh
    - >
      if [ "$CURRENT_ENVIRONMENT" == "dev" ]; then
        export TICKET_COLLECTOR_ENABLED=false
        export TICKET_STATISTICS_ENABLED=false
        export LINKS_METRICS_API_ENABLED=false
        export LINKS_METRICS_COLLECTOR_ENABLED=false
      fi
    # PRINT PIPELINE ENVIRONMENT VARIABLES (FOR DEBUG)
    - echo "the ENVIRONMENT_SLUG is $ENVIRONMENT_SLUG"
    - echo "the CURRENT_ENVIRONMENT is $CURRENT_ENVIRONMENT"
    - echo "the EKS_CLUSTER_NAME is $EKS_CLUSTER_NAME"
    - echo "the ENVIRONMENT_NAME is $ENVIRONMENT_NAME"
    - echo "SOM hosts are $SOM_MONITORED_VELOCLOUD_HOSTS"
    # CREATE CHART RELEASE AND DEPLOY
    - >
      if [ "$CURRENT_ENVIRONMENT" == "production" ]; then
        envsubst "$(env | awk -F= '{print "$"$1" "}' | grep -i BUILD_NUMBER | tr -d '\n')" < ${HELM_CHART_DIR}/values.yaml.tpl > values.yaml
        sed -i -E 's/ \$\{.*\}/ ""/g' ${HELM_CHART_DIR}/values.yaml
        helm plugin install https://github.com/chartmuseum/helm-push.git
        helm repo add mettel https://chartmuseum.mettel-automation.net --username="${CHARTMUSEUM_USER}" --password="${CHARTMUSEUM_PASSWORD}"
        export AUTOMATION_TAG=$(git tag | sort --version-sort | grep "^automation-engine" | tail -n -1| cut -d "@" -f2)
        helm cm-push ${HELM_CHART_DIR}/ --version="${AUTOMATION_TAG}" --app-version="v${AUTOMATION_TAG}" mettel
        envsubst < ${HELM_CHART_DIR}/values.yaml.tpl > values.yaml
        helm repo update
        helm upgrade --wait --install ${HELM_CHART_RELEASE_NAME} mettel/${HELM_CHART_RELEASE_NAME} --version ${AUTOMATION_TAG} -f values.yaml -n ${NAMESPACE}
      else
        envsubst < ${HELM_CHART_DIR}/values.yaml.tpl > values.yaml
        helm upgrade --wait --install ${HELM_CHART_RELEASE_NAME} ./${HELM_CHART_DIR} -f values.yaml -n ${NAMESPACE}
      fi

.helm_template_destroy_chart: &helm_template_destroy_chart
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/python3.6_alpine_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    # INSTALL KUBE CONFIG
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # DESTROY HELM CHART
    - helm -n ${NAMESPACE} uninstall ${HELM_CHART_RELEASE_NAME}
    # DESTROY NAMESPACE
    - kubectl delete namespace ${NAMESPACE}


#
# AFTER NEW RELEASE UPDATE LOGS IN PRODUCTION ENV
#

.helm_template_deploy_logs: &helm_template_deploy_logs
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/python3.6_alpine_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    # INSTALL KUBE CONFIG
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # UPDATE PAPERTRAIL LOGS
    - source ci-utils/environments/deploy_environment_vars.sh
    - python3 ci-utils/ecr/ecr_images_util.py -e ${ENVIRONMENT_NAME} -g -a -p -f "$DOCKER_IMAGES_FILE"
    - python3 ci-utils/papertrail-provisioning/app.py -f "$DOCKER_IMAGES_FILE"
    # UPDATE FLUENT-BIT HELM CHART
    - envsubst < ${HELM_CHART_FLUENT_BIT_DIR}/values.yaml.tpl > ${HELM_CHART_FLUENT_BIT_DIR}/values.yaml
    - helm -n kube-system upgrade --wait --install fluent-bit-custom ${HELM_CHART_FLUENT_BIT_DIR} -f ${HELM_CHART_FLUENT_BIT_DIR}/values.yaml

#
# AFTER NEW RELEASE UPDATE GRAFANA DASHBOARDS
#

.helm_template_update_dashboards: &helm_template_update_dashboards
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/python3.6_alpine_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    # INSTALL KUBE CONFIG
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # CREATE GRAFANA DASHBOARDS DYNAMICALLY
    - kubectl -n prometheus port-forward service/prometheus-kubeprometheuss-prometheus 9090:9090 &
    - sleep 5
    - python3 ci-utils/grafana/generate_dashboard.py
    - envsubst < ci-utils/grafana/importer.yml.tpl > ci-utils/grafana/importer.yml
    - cd ci-utils/grafana && gdg dash export 
