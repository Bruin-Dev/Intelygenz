#
# Using gitlab-ci extends to reuse scripts between jobs (https://docs.gitlab.com/ee/ci/yaml/#extends)
#

.terraform_template_deploy_environment: &terraform_template_deploy_environment
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/terraform_0.12.7_awscli:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  script:
    - export TF_VAR_BUILD_NUMBER=${CI_PIPELINE_ID}
    - export TF_VAR_ENVIRONMENT_NAME=${ENVIRONMENT_SLUG}
    - export TF_VAR_ALARMS_SUBSCRIPTIONS_EMAIL_ADDRESS=${AWS_ALARMS_NOTIFIER_EMAIL}
    - export TF_VAR_bruin_bridge_desired_tasks=${bruin_bridge_desired_tasks}
    - export TF_VAR_cts_bridge_desired_tasks=${cts_bridge_desired_tasks}
    - export TF_VAR_customer_cache_desired_tasks=${customer_cache_desired_tasks}
    - export TF_VAR_digi_bridge_desired_tasks=${digi_bridge_desired_tasks}
    - export TF_VAR_digi_reboot_report_desired_tasks=${digi_reboot_report_desired_tasks}
    - export TF_VAR_dispatch_portal_backend_desired_tasks=${dispatch_portal_backend_desired_tasks}
    - export TF_VAR_dispatch_portal_frontend_desired_tasks=${dispatch_portal_frontend_desired_tasks}
    - export TF_VAR_hawkeye_affecting_monitor_desired_tasks=${hawkeye_affecting_monitor_desired_tasks}
    - export TF_VAR_hawkeye_bridge_desired_tasks=${hawkeye_bridge_desired_tasks}
    - export TF_VAR_hawkeye_customer_cache_desired_tasks=${hawkeye_customer_cache_desired_tasks}
    - export TF_VAR_hawkeye_outage_monitor_desired_tasks=${hawkeye_outage_monitor_desired_tasks}
    - export TF_VAR_intermapper_outage_monitor_desired_tasks=${intermapper_outage_monitor_desired_tasks}
    - export TF_VAR_last_contact_report_desired_tasks=${last_contact_report_desired_tasks}
    - export TF_VAR_lit_bridge_desired_tasks=${lit_bridge_desired_tasks}
    - export TF_VAR_lumin_billing_report_desired_tasks=${lumin_billing_report_desired_tasks}
    - export TF_VAR_metrics_prometheus_desired_tasks=${metrics_prometheus_desired_tasks}
    - export TF_VAR_nats_server_desired_tasks=${nats_server_desired_tasks}
    - export TF_VAR_nats_server_1_desired_tasks=${nats_server_1_desired_tasks}
    - export TF_VAR_nats_server_2_desired_tasks=${nats_server_2_desired_tasks}
    - export TF_VAR_notifier_desired_tasks=${notifier_desired_tasks}
    - export TF_VAR_service_affecting_monitor_desired_tasks=${service_affecting_monitor_desired_tasks}
    - export TF_VAR_service_dispatch_monitor_desired_tasks=${service_dispatch_monitor_desired_tasks}
    - export TF_VAR_service_outage_monitor_1_desired_tasks=${service_outage_monitor_1_desired_tasks}
    - export TF_VAR_service_outage_monitor_2_desired_tasks=${service_outage_monitor_2_desired_tasks}
    - export TF_VAR_service_outage_monitor_3_desired_tasks=${service_outage_monitor_3_desired_tasks}
    - export TF_VAR_service_outage_monitor_4_desired_tasks=${service_outage_monitor_4_desired_tasks}
    - export TF_VAR_service_outage_monitor_triage_desired_tasks=${service_outage_monitor_triage_desired_tasks}
    - export TF_VAR_sites_monitor_desired_tasks=${sites_monitor_desired_tasks}
    - export TF_VAR_ticket_collector_desired_tasks=${ticket_collector_desired_tasks}
    - export TF_VAR_ticket_statistics_desired_tasks=${ticket_statistics_desired_tasks}
    - export TF_VAR_tnba_monitor_desired_tasks=${tnba_monitor_desired_tasks}
    - export TF_VAR_tnba_feedback_desired_tasks=${tnba_feedback_desired_tasks}
    - export TF_VAR_t7_bridge_desired_tasks=${t7_bridge_desired_tasks}
    - export TF_VAR_velocloud_bridge_desired_tasks=${velocloud_bridge_desired_tasks}
    - export ENVIRONMENT_VAR=${TF_VAR_ENVIRONMENT}
    - export TF_VAR_HAWKEYE_CLIENT_USERNAME=${HAWKEYE_CLIENT_USERNAME}
    - export TF_VAR_HAWKEYE_CLIENT_PASSWORD=$(base64 -d <<< $HAWKEYE_CLIENT_PASSWORD)
    - export TF_VAR_HAWKEYE_BASE_URL=${HAWKEYE_BASE_URL}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_1_HOSTS=${VELOCLOUD_HOST_1}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_1_HOSTS_FILTER=${VELOCLOUD_HOST_1_FILTER}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_2_HOSTS=${VELOCLOUD_HOST_2}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_2_HOSTS_FILTER=${VELOCLOUD_HOST_2_FILTER}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_3_HOSTS=${VELOCLOUD_HOST_3}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_3_HOSTS_FILTER=${VELOCLOUD_HOST_3_FILTER}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_4_HOSTS=${VELOCLOUD_HOST_4}
    - export TF_VAR_SERVICE_OUTAGE_MONITOR_4_HOSTS_FILTER=${VELOCLOUD_HOST_4_FILTER}
    - export TF_VAR_DOCDB_CLUSTER_MASTER_USERNAME=${DOCDB_CLUSTER_MASTER_USERNAME}
    - export TF_VAR_DOCDB_CLUSTER_MASTER_PASSWORD=${DOCDB_CLUSTER_MASTER_PASSWORD}
    - apk add zip
    - pip3 install -r ci-utils/ecr/requirements.txt
    - python3 ci-utils/ecr/manage_ecr_docker_images.py -g -a -e ${TF_VAR_ENVIRONMENT} -p
    - envsubst < infra-as-code/dev/init.tf > temp.tf
    - envsubst < infra-as-code/dev/variables.tf > temp_vars.tf
    - mv temp.tf infra-as-code/dev/init.tf
    - mv temp_vars.tf infra-as-code/dev/variables.tf
    - >
      if [ "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]; then
        /bin/bash ci-utils/lambda/lambda-python-package.sh infra-as-code/data-collector/lambdas/rest-api-data-collector/ rest-api-data-collector main.py
        export TF_VAR_REST_API_DATA_COLLECTOR_AUTH_TOKEN=${REST_API_DATA_COLLECTOR_AUTH_TOKEN}
        export TF_VAR_REST_API_DATA_COLLECTOR_MONGODB_COLLECTION=${REST_API_DATA_COLLECTOR_MONGODB_COLLECTION}
        export TF_VAR_REST_API_DATA_COLLECTOR_MONGODB_DATABASE=${REST_API_DATA_COLLECTOR_MONGODB_DATABASE}
        envsubst < infra-as-code/data-collector/init.tf > temp_dc.tf
        envsubst < infra-as-code/data-collector/variables.tf > temp_vars_dc.tf
        mv temp_dc.tf infra-as-code/data-collector/init.tf
        mv temp_vars_dc.tf infra-as-code/data-collector/variables.tf
        cd infra-as-code/data-collector
        terraform init
        terraform apply -auto-approve
        terraform output api_gateway_endpoint_data_collector > api_gateway_endpoint_data_collector.txt
        API_GATEWAY_ENDPOINT_DATA_COLLECTOR=$(cat api_gateway_endpoint_data_collector.txt)
        echo "The API Gateway endpoint to launch lambda data-collector-${TF_VAR_CURRENT_ENVIRONMENT} is ${API_GATEWAY_ENDPOINT_DATA_COLLECTOR}"
        cd ${CI_PROJECT_DIR}
      fi
    - terraform init infra-as-code/dev
    - terraform refresh infra-as-code/dev
    - terraform apply -auto-approve infra-as-code/dev
  tags:
    - kubernetes

.terraform_template_deploy_network-resources: &terraform_template_deploy_network-resources
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/terraform_0.12.7_awscli:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - envsubst < infra-as-code/network-resources/init.tf > temp_network_resources_init.tf
    - mv temp_network_resources_init.tf infra-as-code/network-resources/init.tf
    - terraform init infra-as-code/network-resources
    - terraform validate infra-as-code/network-resources
    - terraform plan infra-as-code/network-resources
    - terraform apply -auto-approve infra-as-code/network-resources
  tags:
    - kubernetes
