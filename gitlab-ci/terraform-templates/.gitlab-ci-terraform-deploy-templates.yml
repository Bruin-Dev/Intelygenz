#
# Using gitlab-ci extends to reuse scripts between jobs (https://docs.gitlab.com/ee/ci/yaml/#extends)
#

.terraform_template_deploy_basic_infra: &terraform_template_deploy_basic_infra
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/terraform_1.0.1_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    # create output folder for cache files between jobs
    - mkdir -p output
    # iterate over terraform directories in module
    - cd "${MODULE}" || exit 1
    # assign terraform variables
    - export TF_VAR_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export TF_VAR_CLUSTER_AUTOSCALER_HELM_CHART_VERSION=${CLUSTER_AUTOSCALER_CHART_V}
    - export TF_VAR_EXTERNAL_DNS_HELM_CHART_VERSION=${EXTERNAL_DNS_CHART_V}
    - export TF_VAR_INGRESS_NGINX_HELM_CHART_VERSION=${INGRESS_NGINX_CHART_V}
    - export TF_VAR_METRICS_SERVER_VERSION=${KUBERNETES_METRICS_SERVER_V}
    - export TF_VAR_RELOADER_CHART_VERSION=${RELOADER_CHART_V}
    - export TF_VAR_WHITELISTED_IPS="[${LOAD_BALANCER_WHITELIST}]"
    - export TF_VAR_GRAFANA_ADMIN_USER=${GRAFANA_ADMIN_USER}
    - export TF_VAR_GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    - export TF_VAR_TICKET_COLLECTOR_MONGO_USERNAME=${TICKET_COLLECTOR_MONGO_USERNAME}
    - export TF_VAR_TICKET_COLLECTOR_MONGO_PASSWORD=${TICKET_COLLECTOR_MONGO_PASSWORD}
    - if [ "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]; then export TF_VAR_ENABLE_FLUENT_BIT=true; fi
    - >
      for i in $(find . -mindepth 1 -maxdepth 1 -type d | sort | sed 's|^./||' || exit 1); do
          (
              cd "${i}" || exit
              echo "The current Workdir is $i"
              if [[ ${i} != "5-elasticaches" ]]; then
                  terraform init -backend=true -get=true -input=false
                  if [[ ${i} != "0-ecr-repositories" && ${i} != "4-eks-roles" ]]; then
                      terraform workspace new ${TF_VAR_CURRENT_ENVIRONMENT} || terraform workspace select ${TF_VAR_CURRENT_ENVIRONMENT}
                  fi
                  terraform refresh
                  terraform plan && terraform apply -auto-approve
                  if [[ ${i} == "3-eks-cluster"  &&  "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]]; then
                      export FLUENT_BIT_LOG_GROUP_NAME=$(terraform output fluent-bit-role-arn)
                      export FLUENT_BIT_IAM_ROLE_ARN=$(terraform output fluent-bit-log-group-name)
                  fi
                  if [[ ${i} == "6-documentdb"  &&  "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]]; then
                      curl --request PUT --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" "https://gitlab.intelygenz.com/api/v4/projects/1040/variables/TICKET_COLLECTOR_MONGO_HOST" --form "value=$(terraform output ticket-collector-mongo-host)"
                  fi
                  cd ..
              else
                  for e in $(find . -mindepth 1 -maxdepth 1 -type d | sort | sed 's|^./||' || exit 1); do
                      (
                          cd "${e}" || exit 1
                          if [[ ${e} != "modules" ]]; then
                              echo "Start to create elasticache ${e}"
                              terraform init
                              terraform workspace new "${TF_VAR_ENVIRONMENT}" || terraform workspace select "${TF_VAR_ENVIRONMENT}"
                              terraform refresh
                              terraform plan && terraform apply -auto-approve
                          fi
                          cd ..
                      )
                  done
                  cd "${CI_PROJECT_DIR}/${MODULE}" || exit 1
              fi
          )
      done
    - cd ${CI_PROJECT_DIR}
    # INSTALL NECESSARY PYTHON LIBRARIES
    - pip3 install -r ci-utils/eks/iam-to-eks-roles/requirements.txt --use-feature=2020-resolver
    # ASSIGN RBAC PERMISSION IN EKS FROM IAM USER ROLES
    - >
      for i in $(echo $IAM_TO_EKS_ROLES | tr ", " "\n"); do
        (
          python3 ci-utils/eks/iam-to-eks-roles/app.py -p mettel-automation --project-role-tag ${i}
        )
      done
    # INSTALL KUBE CONFIG
    - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
    # INSTALL PRIORITY CLASS
    - kubectl apply -f helm/priority-class
    # INITIALIZE HELM
    - python3 ci-utils/helm/add_helm_repositories.py
    - helm repo update
    - helm dep up ${HELM_CHART_PROMETHEUS_DIR}
    # DEPLOY PROMETHEUS HELM CHART
    - envsubst < ${HELM_CHART_PROMETHEUS_DIR}/values.yaml.tpl > ${HELM_CHART_PROMETHEUS_DIR}/values.yaml
    - helm -n prometheus upgrade --wait --install prometheus ${HELM_CHART_PROMETHEUS_DIR} -f ${HELM_CHART_PROMETHEUS_DIR}/values.yaml
    # DEPLOY FLUENT-BIT HELM CHART
    - >
      if [ "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]; then
        envsubst < ${HELM_CHART_FLUENT_BIT_DIR}/values.yaml.tpl > ${HELM_CHART_FLUENT_BIT_DIR}/values.yaml
        helm -n kube-system upgrade --wait --install fluent-bit-custom ${HELM_CHART_FLUENT_BIT_DIR} -f ${HELM_CHART_FLUENT_BIT_DIR}/values.yaml        
      fi

.terraform_template_deploy_data_collector: &terraform_template_deploy_data_collector
  image:
    name: ${CI_REGISTRY}/mettel/docker_images/terraform_1.0.1_common_utils:${DOCKER_IMAGE_UTILS_VERSION}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - >
      if [ "$TF_VAR_CURRENT_ENVIRONMENT" == "production" ]; then
        apk add zip unzip
        export TF_VAR_REST_API_DATA_COLLECTOR_AUTH_TOKEN=${REST_API_DATA_COLLECTOR_AUTH_TOKEN}
        export TF_VAR_REST_API_DATA_COLLECTOR_MONGODB_COLLECTION=${REST_API_DATA_COLLECTOR_MONGODB_COLLECTION}
        export TF_VAR_REST_API_DATA_COLLECTOR_MONGODB_DATABASE=${REST_API_DATA_COLLECTOR_MONGODB_DATABASE}
        envsubst < infra-as-code/data-collector/init.tf > temp_dc.tf
        envsubst < infra-as-code/data-collector/variables.tf > temp_vars_dc.tf
        mv temp_dc.tf infra-as-code/data-collector/init.tf
        mv temp_vars_dc.tf infra-as-code/data-collector/variables.tf
        cd infra-as-code/data-collector
        terraform init
        terraform apply -auto-approve
        cd ${CI_PROJECT_DIR}
      fi