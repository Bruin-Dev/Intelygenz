#
# Using gitlab-ci extends to reuse scripts between jobs (https://docs.gitlab.com/ee/ci/yaml/#extends)
#
.build_app_image: &build_app_image
  image:
    name: ${CI_REGISTRY}/mettel/dockers/images/docker18:1.1.0
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  services:
    - docker:18-dind
  before_script:
    - source ci-utils/environments/environment_assign.sh
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - pip3 install -r ci-utils/ecr/requirements.txt
  script:
    # GET COSIGNS KEYS
    - aws s3 sync s3://mettel-automation-keys/ . --exclude "*" --include "automation-engine-container-cosign*"
    - docker build --build-arg REPOSITORY_URL="${REPOSITORY_URL}"
      -t ${REPOSITORY_URL}/${MODULE_NAME}:${DOCKER_BUILD_LATEST_TAG}
      -t ${REPOSITORY_URL}/${MODULE_NAME}:${TAG}
      -f services/${MODULE_NAME}/Dockerfile .
    - docker push ${REPOSITORY_URL}/${MODULE_NAME}:${DOCKER_BUILD_LATEST_TAG}
    - docker push ${REPOSITORY_URL}/${MODULE_NAME}:${TAG}
    # Sign the container and store the signature in the registry (requires COSIGN_PASSWORD variable)
    - cosign sign --key automation-engine-container-cosign-private.key ${REPOSITORY_URL}/${MODULE_NAME}:${DOCKER_BUILD_LATEST_TAG}
    - cosign sign --key automation-engine-container-cosign-private.key ${REPOSITORY_URL}/${MODULE_NAME}:${TAG}
    # Confirm signature
    - cosign triangulate ${REPOSITORY_URL}/${MODULE_NAME}:${DOCKER_BUILD_LATEST_TAG}
    - cosign triangulate ${REPOSITORY_URL}/${MODULE_NAME}:${TAG}
    - >
      if [ "$CURRENT_ENVIRONMENT" == "dev" ]; then 
        python3 ci-utils/ecr/ecr_images_util.py -e ${ENVIRONMENT_ID} -r ${MODULE_NAME} -d -o
      fi
  after_script:
    - source ci-utils/environments/environment_assign.sh
    - docker rmi ${REPOSITORY_URL}/${MODULE_NAME}:${DOCKER_BUILD_LATEST_TAG}
    - docker rmi ${REPOSITORY_URL}/${MODULE_NAME}:${TAG}
  tags:
    - kubernetes

.build_thanos_with_config_bucket: &build_thanos_with_config_bucket
  services:
    - docker:18-dind
  image:
    name: ${CI_REGISTRY}/mettel/dockers/images/docker18:1.1.0
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - source ci-utils/environments/environment_assign.sh
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - pip3 install -r ci-utils/ecr/requirements.txt
  script:
    - source ci-utils/environments/environment_assign.sh
    - docker build --build-arg GRPC_PORT=${GRPC_PORT} --build-arg HTTP_PORT=${HTTP_PORT} -t ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-latest -t ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION} -f ${MODULE_NAME}/Dockerfile .
    - python3 ci-utils/ecr/manage_ecr_docker_images.py -d -o -e ${ENVIRONMENT_VAR} -r automation-${REPOSITORY_NAME} -p
    - docker push ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-latest
    - docker push ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION}
  after_script:
    - source ci-utils/environments/environment_assign.sh
    - docker rmi ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-latest
    - docker rmi ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION}
  tags:
    - kubernetes
