# ===============================================
# Images builds jobs for metrics-dashboard module
# ===============================================
grafana-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/grafana
    MODULE_VERSION: ${CI_PIPELINE_ID}
  extends: .build_app_image
  script:
    - source ci-utils/environment_assign.sh
    - sed -i "s/ENVIRONMENT/${ENVIRONMENT_VAR}/g" metrics-dashboard/grafana/config/prometheus-dev.yml
    - sed -i "s/igzpackages==0.0.1/igzpackages==${IGZ_PACKAGES_VERSION}/g" ${MODULE_NAME}/requirements.txt
    - cp metrics-dashboard/grafana/config/prometheus-dev.yml metrics-dashboard/grafana/datasources/prometheus.yml
    - docker build --build-arg IGZ_PACKAGES_REPOSITORY_URL=${IGZ_PACKAGES_REPOSITORY_URL} --build-arg IGZ_PACKAGES_VERSION=${IGZ_PACKAGES_VERSION} --build-arg GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD} -t ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-latest -t ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION} -f ${MODULE_NAME}/Dockerfile .
    - python3 ci-utils/manage_ecr_docker_images.py -r automation-${MODULE_NAME}
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-latest
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION}

prometheus-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/prometheus
    MODULE_VERSION: ${CI_PIPELINE_ID}
  extends: .build_app_image
  script:
    - source ci-utils/environment_assign.sh
    - sed -i "s/ENVIRONMENT/${ENVIRONMENT_VAR}/g" metrics-dashboard/prometheus/config/prometheus-dev.yml
    - cp metrics-dashboard/prometheus/config/prometheus-dev.yml metrics-dashboard/prometheus/prometheus.yml
    - docker build -t ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-latest -t ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION} -f ${MODULE_NAME}/Dockerfile .
    - python3 ci-utils/manage_ecr_docker_images.py -r automation-${MODULE_NAME}
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-latest
    - docker push ${REPOSITORY_URL}-${MODULE_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION}

thanos-sidecar-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/thanos
    REPOSITORY_NAME: metrics-dashboard/thanos
    MODULE_VERSION: ${CI_PIPELINE_ID}
    GRPC_PORT: 10091
    HTTP_PORT: 10902
  extends: .build_thanos_with_config_bucket

thanos-store-gateway-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/thanos
    REPOSITORY_NAME: metrics-dashboard/thanos-store-gateway
    MODULE_VERSION: ${CI_PIPELINE_ID}
    GRPC_PORT: 10901
    HTTP_PORT: 19191
  extends: .build_thanos_with_config_bucket

thanos-querier-build:
  stage: build
  variables:
    MODULE_NAME: metrics-dashboard/thanos
    REPOSITORY_NAME: metrics-dashboard/thanos-querier
    MODULE_VERSION: ${CI_PIPELINE_ID}
    GRPC_PORT: 10999
    HTTP_PORT: 19091
  extends: .build_app_image
  script:
    - docker build --build-arg GRPC_PORT=${GRPC_PORT} --build-arg HTTP_PORT=${HTTP_PORT} -t ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-latest -t ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION} -f ${MODULE_NAME}/Dockerfile-thanos_querier .
    - python3 ci-utils/manage_ecr_docker_images.py -r automation-${REPOSITORY_NAME}
    - docker push ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-latest
    - docker push ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION}
  after_script:
    - source ci-utils/environment_assign.sh
    - docker rmi ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-latest
    - docker rmi ${REPOSITORY_URL}-${REPOSITORY_NAME}:${ENVIRONMENT_VAR}-${MODULE_VERSION}
