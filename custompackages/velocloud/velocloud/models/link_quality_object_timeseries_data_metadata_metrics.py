# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LinkQualityObjectTimeseriesDataMetadataMetrics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, trafficType=None, action=None, metric=None, beforeState=None, afterState=None):
        """
        LinkQualityObjectTimeseriesDataMetadataMetrics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'trafficType': 'int',
            'action': 'int',
            'metric': 'int',
            'beforeState': 'int',
            'afterState': 'int'
        }

        self.attribute_map = {
            'trafficType': 'trafficType',
            'action': 'action',
            'metric': 'metric',
            'beforeState': 'beforeState',
            'afterState': 'afterState'
        }

        self._trafficType = trafficType
        self._action = action
        self._metric = metric
        self._beforeState = beforeState
        self._afterState = afterState

    @property
    def trafficType(self):
        """
        Gets the trafficType of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :return: The trafficType of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :rtype: int
        """
        return self._trafficType

    @trafficType.setter
    def trafficType(self, trafficType):
        """
        Sets the trafficType of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :param trafficType: The trafficType of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :type: int
        """

        self._trafficType = trafficType

    @property
    def action(self):
        """
        Gets the action of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :return: The action of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :param action: The action of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :type: int
        """

        self._action = action

    @property
    def metric(self):
        """
        Gets the metric of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :return: The metric of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :rtype: int
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :param metric: The metric of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :type: int
        """

        self._metric = metric

    @property
    def beforeState(self):
        """
        Gets the beforeState of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :return: The beforeState of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :rtype: int
        """
        return self._beforeState

    @beforeState.setter
    def beforeState(self, beforeState):
        """
        Sets the beforeState of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :param beforeState: The beforeState of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :type: int
        """

        self._beforeState = beforeState

    @property
    def afterState(self):
        """
        Gets the afterState of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :return: The afterState of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :rtype: int
        """
        return self._afterState

    @afterState.setter
    def afterState(self, afterState):
        """
        Sets the afterState of this LinkQualityObjectTimeseriesDataMetadataMetrics.

        :param afterState: The afterState of this LinkQualityObjectTimeseriesDataMetadataMetrics.
        :type: int
        """

        self._afterState = afterState

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LinkQualityObjectTimeseriesDataMetadataMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
