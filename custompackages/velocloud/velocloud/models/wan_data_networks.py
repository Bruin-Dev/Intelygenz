# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WANDataNetworks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mode=None, type=None, name=None, logicalId=None, interface=None, internalId=None, ipAddress=None, isp=None, lastActive=None):
        """
        WANDataNetworks - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mode': 'str',
            'type': 'str',
            'name': 'str',
            'logicalId': 'str',
            'interface': 'str',
            'internalId': 'str',
            'ipAddress': 'str',
            'isp': 'str',
            'lastActive': 'int'
        }

        self.attribute_map = {
            'mode': 'mode',
            'type': 'type',
            'name': 'name',
            'logicalId': 'logicalId',
            'interface': 'interface',
            'internalId': 'internalId',
            'ipAddress': 'ipAddress',
            'isp': 'isp',
            'lastActive': 'lastActive'
        }

        self._mode = mode
        self._type = type
        self._name = name
        self._logicalId = logicalId
        self._interface = interface
        self._internalId = internalId
        self._ipAddress = ipAddress
        self._isp = isp
        self._lastActive = lastActive

    @property
    def mode(self):
        """
        Gets the mode of this WANDataNetworks.

        :return: The mode of this WANDataNetworks.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this WANDataNetworks.

        :param mode: The mode of this WANDataNetworks.
        :type: str
        """

        self._mode = mode

    @property
    def type(self):
        """
        Gets the type of this WANDataNetworks.

        :return: The type of this WANDataNetworks.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WANDataNetworks.

        :param type: The type of this WANDataNetworks.
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """
        Gets the name of this WANDataNetworks.

        :return: The name of this WANDataNetworks.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WANDataNetworks.

        :param name: The name of this WANDataNetworks.
        :type: str
        """

        self._name = name

    @property
    def logicalId(self):
        """
        Gets the logicalId of this WANDataNetworks.

        :return: The logicalId of this WANDataNetworks.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this WANDataNetworks.

        :param logicalId: The logicalId of this WANDataNetworks.
        :type: str
        """

        self._logicalId = logicalId

    @property
    def interface(self):
        """
        Gets the interface of this WANDataNetworks.

        :return: The interface of this WANDataNetworks.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this WANDataNetworks.

        :param interface: The interface of this WANDataNetworks.
        :type: str
        """

        self._interface = interface

    @property
    def internalId(self):
        """
        Gets the internalId of this WANDataNetworks.

        :return: The internalId of this WANDataNetworks.
        :rtype: str
        """
        return self._internalId

    @internalId.setter
    def internalId(self, internalId):
        """
        Sets the internalId of this WANDataNetworks.

        :param internalId: The internalId of this WANDataNetworks.
        :type: str
        """

        self._internalId = internalId

    @property
    def ipAddress(self):
        """
        Gets the ipAddress of this WANDataNetworks.

        :return: The ipAddress of this WANDataNetworks.
        :rtype: str
        """
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, ipAddress):
        """
        Sets the ipAddress of this WANDataNetworks.

        :param ipAddress: The ipAddress of this WANDataNetworks.
        :type: str
        """

        self._ipAddress = ipAddress

    @property
    def isp(self):
        """
        Gets the isp of this WANDataNetworks.

        :return: The isp of this WANDataNetworks.
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """
        Sets the isp of this WANDataNetworks.

        :param isp: The isp of this WANDataNetworks.
        :type: str
        """

        self._isp = isp

    @property
    def lastActive(self):
        """
        Gets the lastActive of this WANDataNetworks.

        :return: The lastActive of this WANDataNetworks.
        :rtype: int
        """
        return self._lastActive

    @lastActive.setter
    def lastActive(self, lastActive):
        """
        Sets the lastActive of this WANDataNetworks.

        :param lastActive: The lastActive of this WANDataNetworks.
        :type: int
        """

        self._lastActive = lastActive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WANDataNetworks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
