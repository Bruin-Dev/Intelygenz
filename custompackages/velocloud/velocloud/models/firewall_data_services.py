# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FirewallDataServices(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loggingEnabled=None, ssh=None, localUi=None, snmp=None, icmp=None):
        """
        FirewallDataServices - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loggingEnabled': 'bool',
            'ssh': 'FirewallDataServicesSsh',
            'localUi': 'FirewallDataServicesLocalUi',
            'snmp': 'FirewallDataServicesSnmp',
            'icmp': 'FirewallDataServicesIcmp'
        }

        self.attribute_map = {
            'loggingEnabled': 'loggingEnabled',
            'ssh': 'ssh',
            'localUi': 'localUi',
            'snmp': 'snmp',
            'icmp': 'icmp'
        }

        self._loggingEnabled = loggingEnabled
        self._ssh = ssh
        self._localUi = localUi
        self._snmp = snmp
        self._icmp = icmp

    @property
    def loggingEnabled(self):
        """
        Gets the loggingEnabled of this FirewallDataServices.

        :return: The loggingEnabled of this FirewallDataServices.
        :rtype: bool
        """
        return self._loggingEnabled

    @loggingEnabled.setter
    def loggingEnabled(self, loggingEnabled):
        """
        Sets the loggingEnabled of this FirewallDataServices.

        :param loggingEnabled: The loggingEnabled of this FirewallDataServices.
        :type: bool
        """

        self._loggingEnabled = loggingEnabled

    @property
    def ssh(self):
        """
        Gets the ssh of this FirewallDataServices.

        :return: The ssh of this FirewallDataServices.
        :rtype: FirewallDataServicesSsh
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh):
        """
        Sets the ssh of this FirewallDataServices.

        :param ssh: The ssh of this FirewallDataServices.
        :type: FirewallDataServicesSsh
        """

        self._ssh = ssh

    @property
    def localUi(self):
        """
        Gets the localUi of this FirewallDataServices.

        :return: The localUi of this FirewallDataServices.
        :rtype: FirewallDataServicesLocalUi
        """
        return self._localUi

    @localUi.setter
    def localUi(self, localUi):
        """
        Sets the localUi of this FirewallDataServices.

        :param localUi: The localUi of this FirewallDataServices.
        :type: FirewallDataServicesLocalUi
        """

        self._localUi = localUi

    @property
    def snmp(self):
        """
        Gets the snmp of this FirewallDataServices.

        :return: The snmp of this FirewallDataServices.
        :rtype: FirewallDataServicesSnmp
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """
        Sets the snmp of this FirewallDataServices.

        :param snmp: The snmp of this FirewallDataServices.
        :type: FirewallDataServicesSnmp
        """

        self._snmp = snmp

    @property
    def icmp(self):
        """
        Gets the icmp of this FirewallDataServices.

        :return: The icmp of this FirewallDataServices.
        :rtype: FirewallDataServicesIcmp
        """
        return self._icmp

    @icmp.setter
    def icmp(self, icmp):
        """
        Sets the icmp of this FirewallDataServices.

        :param icmp: The icmp of this FirewallDataServices.
        :type: FirewallDataServicesIcmp
        """

        self._icmp = icmp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FirewallDataServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
