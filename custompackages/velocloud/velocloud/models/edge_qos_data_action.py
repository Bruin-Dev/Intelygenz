# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeQOSDataAction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, routeType=None, edge2EdgeRouteAction=None, edge2DataCenterRouteAction=None, edge2CloudRouteAction=None, qoS=None, sla=None):
        """
        EdgeQOSDataAction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'routeType': 'str',
            'edge2EdgeRouteAction': 'RouteActionObject',
            'edge2DataCenterRouteAction': 'RouteActionObject',
            'edge2CloudRouteAction': 'RouteActionObject',
            'qoS': 'object',
            'sla': 'object'
        }

        self.attribute_map = {
            'routeType': 'routeType',
            'edge2EdgeRouteAction': 'edge2EdgeRouteAction',
            'edge2DataCenterRouteAction': 'edge2DataCenterRouteAction',
            'edge2CloudRouteAction': 'edge2CloudRouteAction',
            'qoS': 'QoS',
            'sla': 'sla'
        }

        self._routeType = routeType
        self._edge2EdgeRouteAction = edge2EdgeRouteAction
        self._edge2DataCenterRouteAction = edge2DataCenterRouteAction
        self._edge2CloudRouteAction = edge2CloudRouteAction
        self._qoS = qoS
        self._sla = sla

    @property
    def routeType(self):
        """
        Gets the routeType of this EdgeQOSDataAction.

        :return: The routeType of this EdgeQOSDataAction.
        :rtype: str
        """
        return self._routeType

    @routeType.setter
    def routeType(self, routeType):
        """
        Sets the routeType of this EdgeQOSDataAction.

        :param routeType: The routeType of this EdgeQOSDataAction.
        :type: str
        """

        self._routeType = routeType

    @property
    def edge2EdgeRouteAction(self):
        """
        Gets the edge2EdgeRouteAction of this EdgeQOSDataAction.

        :return: The edge2EdgeRouteAction of this EdgeQOSDataAction.
        :rtype: RouteActionObject
        """
        return self._edge2EdgeRouteAction

    @edge2EdgeRouteAction.setter
    def edge2EdgeRouteAction(self, edge2EdgeRouteAction):
        """
        Sets the edge2EdgeRouteAction of this EdgeQOSDataAction.

        :param edge2EdgeRouteAction: The edge2EdgeRouteAction of this EdgeQOSDataAction.
        :type: RouteActionObject
        """

        self._edge2EdgeRouteAction = edge2EdgeRouteAction

    @property
    def edge2DataCenterRouteAction(self):
        """
        Gets the edge2DataCenterRouteAction of this EdgeQOSDataAction.

        :return: The edge2DataCenterRouteAction of this EdgeQOSDataAction.
        :rtype: RouteActionObject
        """
        return self._edge2DataCenterRouteAction

    @edge2DataCenterRouteAction.setter
    def edge2DataCenterRouteAction(self, edge2DataCenterRouteAction):
        """
        Sets the edge2DataCenterRouteAction of this EdgeQOSDataAction.

        :param edge2DataCenterRouteAction: The edge2DataCenterRouteAction of this EdgeQOSDataAction.
        :type: RouteActionObject
        """

        self._edge2DataCenterRouteAction = edge2DataCenterRouteAction

    @property
    def edge2CloudRouteAction(self):
        """
        Gets the edge2CloudRouteAction of this EdgeQOSDataAction.

        :return: The edge2CloudRouteAction of this EdgeQOSDataAction.
        :rtype: RouteActionObject
        """
        return self._edge2CloudRouteAction

    @edge2CloudRouteAction.setter
    def edge2CloudRouteAction(self, edge2CloudRouteAction):
        """
        Sets the edge2CloudRouteAction of this EdgeQOSDataAction.

        :param edge2CloudRouteAction: The edge2CloudRouteAction of this EdgeQOSDataAction.
        :type: RouteActionObject
        """

        self._edge2CloudRouteAction = edge2CloudRouteAction

    @property
    def qoS(self):
        """
        Gets the qoS of this EdgeQOSDataAction.

        :return: The qoS of this EdgeQOSDataAction.
        :rtype: object
        """
        return self._qoS

    @qoS.setter
    def qoS(self, qoS):
        """
        Sets the qoS of this EdgeQOSDataAction.

        :param qoS: The qoS of this EdgeQOSDataAction.
        :type: object
        """

        self._qoS = qoS

    @property
    def sla(self):
        """
        Gets the sla of this EdgeQOSDataAction.

        :return: The sla of this EdgeQOSDataAction.
        :rtype: object
        """
        return self._sla

    @sla.setter
    def sla(self, sla):
        """
        Sets the sla of this EdgeQOSDataAction.

        :param sla: The sla of this EdgeQOSDataAction.
        :type: object
        """

        self._sla = sla

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeQOSDataAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
