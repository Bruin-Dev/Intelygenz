# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnterpriseupdateEnterpriseRouteConfigurationDataEdge(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ospf=None, bgp=None, assigned=None):
        """
        EnterpriseupdateEnterpriseRouteConfigurationDataEdge - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ospf': 'EnterpriseupdateEnterpriseRouteConfigurationDataEdgeOspf',
            'bgp': 'EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgp',
            'assigned': 'EnterpriseupdateEnterpriseRouteConfigurationDataEdgeAssigned'
        }

        self.attribute_map = {
            'ospf': 'ospf',
            'bgp': 'bgp',
            'assigned': 'assigned'
        }

        self._ospf = ospf
        self._bgp = bgp
        self._assigned = assigned

    @property
    def ospf(self):
        """
        Gets the ospf of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.

        :return: The ospf of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.
        :rtype: EnterpriseupdateEnterpriseRouteConfigurationDataEdgeOspf
        """
        return self._ospf

    @ospf.setter
    def ospf(self, ospf):
        """
        Sets the ospf of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.

        :param ospf: The ospf of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.
        :type: EnterpriseupdateEnterpriseRouteConfigurationDataEdgeOspf
        """

        self._ospf = ospf

    @property
    def bgp(self):
        """
        Gets the bgp of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.

        :return: The bgp of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.
        :rtype: EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgp
        """
        return self._bgp

    @bgp.setter
    def bgp(self, bgp):
        """
        Sets the bgp of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.

        :param bgp: The bgp of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.
        :type: EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgp
        """

        self._bgp = bgp

    @property
    def assigned(self):
        """
        Gets the assigned of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.

        :return: The assigned of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.
        :rtype: EnterpriseupdateEnterpriseRouteConfigurationDataEdgeAssigned
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """
        Sets the assigned of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.

        :param assigned: The assigned of this EnterpriseupdateEnterpriseRouteConfigurationDataEdge.
        :type: EnterpriseupdateEnterpriseRouteConfigurationDataEdgeAssigned
        """

        self._assigned = assigned

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnterpriseupdateEnterpriseRouteConfigurationDataEdge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
