# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FirewallData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, firewallEnabled=None, firewallLoggingEnabled=None, inbound=None, outbound=None, services=None):
        """
        FirewallData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'firewallEnabled': 'bool',
            'firewallLoggingEnabled': 'bool',
            'inbound': 'list[FirewallInboundRule]',
            'outbound': 'list[FirewallOutboundRule]',
            'services': 'FirewallDataServices'
        }

        self.attribute_map = {
            'firewallEnabled': 'firewall_enabled',
            'firewallLoggingEnabled': 'firewall_logging_enabled',
            'inbound': 'inbound',
            'outbound': 'outbound',
            'services': 'services'
        }

        self._firewallEnabled = firewallEnabled
        self._firewallLoggingEnabled = firewallLoggingEnabled
        self._inbound = inbound
        self._outbound = outbound
        self._services = services

    @property
    def firewallEnabled(self):
        """
        Gets the firewallEnabled of this FirewallData.

        :return: The firewallEnabled of this FirewallData.
        :rtype: bool
        """
        return self._firewallEnabled

    @firewallEnabled.setter
    def firewallEnabled(self, firewallEnabled):
        """
        Sets the firewallEnabled of this FirewallData.

        :param firewallEnabled: The firewallEnabled of this FirewallData.
        :type: bool
        """

        self._firewallEnabled = firewallEnabled

    @property
    def firewallLoggingEnabled(self):
        """
        Gets the firewallLoggingEnabled of this FirewallData.

        :return: The firewallLoggingEnabled of this FirewallData.
        :rtype: bool
        """
        return self._firewallLoggingEnabled

    @firewallLoggingEnabled.setter
    def firewallLoggingEnabled(self, firewallLoggingEnabled):
        """
        Sets the firewallLoggingEnabled of this FirewallData.

        :param firewallLoggingEnabled: The firewallLoggingEnabled of this FirewallData.
        :type: bool
        """

        self._firewallLoggingEnabled = firewallLoggingEnabled

    @property
    def inbound(self):
        """
        Gets the inbound of this FirewallData.

        :return: The inbound of this FirewallData.
        :rtype: list[FirewallInboundRule]
        """
        return self._inbound

    @inbound.setter
    def inbound(self, inbound):
        """
        Sets the inbound of this FirewallData.

        :param inbound: The inbound of this FirewallData.
        :type: list[FirewallInboundRule]
        """

        self._inbound = inbound

    @property
    def outbound(self):
        """
        Gets the outbound of this FirewallData.

        :return: The outbound of this FirewallData.
        :rtype: list[FirewallOutboundRule]
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound):
        """
        Sets the outbound of this FirewallData.

        :param outbound: The outbound of this FirewallData.
        :type: list[FirewallOutboundRule]
        """

        self._outbound = outbound

    @property
    def services(self):
        """
        Gets the services of this FirewallData.

        :return: The services of this FirewallData.
        :rtype: FirewallDataServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this FirewallData.

        :param services: The services of this FirewallData.
        :type: FirewallDataServices
        """

        self._services = services

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FirewallData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
