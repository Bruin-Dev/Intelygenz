# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnterpriseSetEnterpriseAllAlertRecipientsResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, emailEnabled=None, emailList=None, enterpriseUsers=None, mobileEnabled=None, mobileList=None, smsEnabled=None, smsList=None, snmpEnabled=None, snmpList=None):
        """
        EnterpriseSetEnterpriseAllAlertRecipientsResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'emailEnabled': 'bool',
            'emailList': 'list[str]',
            'enterpriseUsers': 'list[EnterpriseAlertNotificationUserData]',
            'mobileEnabled': 'bool',
            'mobileList': 'list[str]',
            'smsEnabled': 'bool',
            'smsList': 'list[str]',
            'snmpEnabled': 'bool',
            'snmpList': 'list[str]'
        }

        self.attribute_map = {
            'emailEnabled': 'emailEnabled',
            'emailList': 'emailList',
            'enterpriseUsers': 'enterpriseUsers',
            'mobileEnabled': 'mobileEnabled',
            'mobileList': 'mobileList',
            'smsEnabled': 'smsEnabled',
            'smsList': 'smsList',
            'snmpEnabled': 'snmpEnabled',
            'snmpList': 'snmpList'
        }

        self._emailEnabled = emailEnabled
        self._emailList = emailList
        self._enterpriseUsers = enterpriseUsers
        self._mobileEnabled = mobileEnabled
        self._mobileList = mobileList
        self._smsEnabled = smsEnabled
        self._smsList = smsList
        self._snmpEnabled = snmpEnabled
        self._snmpList = snmpList

    @property
    def emailEnabled(self):
        """
        Gets the emailEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The emailEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: bool
        """
        return self._emailEnabled

    @emailEnabled.setter
    def emailEnabled(self, emailEnabled):
        """
        Sets the emailEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param emailEnabled: The emailEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: bool
        """

        self._emailEnabled = emailEnabled

    @property
    def emailList(self):
        """
        Gets the emailList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The emailList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: list[str]
        """
        return self._emailList

    @emailList.setter
    def emailList(self, emailList):
        """
        Sets the emailList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param emailList: The emailList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: list[str]
        """

        self._emailList = emailList

    @property
    def enterpriseUsers(self):
        """
        Gets the enterpriseUsers of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The enterpriseUsers of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: list[EnterpriseAlertNotificationUserData]
        """
        return self._enterpriseUsers

    @enterpriseUsers.setter
    def enterpriseUsers(self, enterpriseUsers):
        """
        Sets the enterpriseUsers of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param enterpriseUsers: The enterpriseUsers of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: list[EnterpriseAlertNotificationUserData]
        """

        self._enterpriseUsers = enterpriseUsers

    @property
    def mobileEnabled(self):
        """
        Gets the mobileEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The mobileEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: bool
        """
        return self._mobileEnabled

    @mobileEnabled.setter
    def mobileEnabled(self, mobileEnabled):
        """
        Sets the mobileEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param mobileEnabled: The mobileEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: bool
        """

        self._mobileEnabled = mobileEnabled

    @property
    def mobileList(self):
        """
        Gets the mobileList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The mobileList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: list[str]
        """
        return self._mobileList

    @mobileList.setter
    def mobileList(self, mobileList):
        """
        Sets the mobileList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param mobileList: The mobileList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: list[str]
        """

        self._mobileList = mobileList

    @property
    def smsEnabled(self):
        """
        Gets the smsEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The smsEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: bool
        """
        return self._smsEnabled

    @smsEnabled.setter
    def smsEnabled(self, smsEnabled):
        """
        Sets the smsEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param smsEnabled: The smsEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: bool
        """

        self._smsEnabled = smsEnabled

    @property
    def smsList(self):
        """
        Gets the smsList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The smsList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: list[str]
        """
        return self._smsList

    @smsList.setter
    def smsList(self, smsList):
        """
        Sets the smsList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param smsList: The smsList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: list[str]
        """

        self._smsList = smsList

    @property
    def snmpEnabled(self):
        """
        Gets the snmpEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The snmpEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: bool
        """
        return self._snmpEnabled

    @snmpEnabled.setter
    def snmpEnabled(self, snmpEnabled):
        """
        Sets the snmpEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param snmpEnabled: The snmpEnabled of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: bool
        """

        self._snmpEnabled = snmpEnabled

    @property
    def snmpList(self):
        """
        Gets the snmpList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :return: The snmpList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :rtype: list[str]
        """
        return self._snmpList

    @snmpList.setter
    def snmpList(self, snmpList):
        """
        Sets the snmpList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.

        :param snmpList: The snmpList of this EnterpriseSetEnterpriseAllAlertRecipientsResult.
        :type: list[str]
        """

        self._snmpList = snmpList

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnterpriseSetEnterpriseAllAlertRecipientsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
