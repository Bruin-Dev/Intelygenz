# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnterpriseServiceNetworkDataSpaces(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cidrIp=None, cidrPrefix=None, maxVlans=None, mode=None, name=None, branchCidrPrefix=None, guest=None, vlans=None):
        """
        EnterpriseServiceNetworkDataSpaces - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cidrIp': 'str',
            'cidrPrefix': 'int',
            'maxVlans': 'int',
            'mode': 'str',
            'name': 'str',
            'branchCidrPrefix': 'int',
            'guest': 'bool',
            'vlans': 'list[EnterpriseServiceNetworkDataVlans]'
        }

        self.attribute_map = {
            'cidrIp': 'cidrIp',
            'cidrPrefix': 'cidrPrefix',
            'maxVlans': 'maxVlans',
            'mode': 'mode',
            'name': 'name',
            'branchCidrPrefix': 'branchCidrPrefix',
            'guest': 'guest',
            'vlans': 'vlans'
        }

        self._cidrIp = cidrIp
        self._cidrPrefix = cidrPrefix
        self._maxVlans = maxVlans
        self._mode = mode
        self._name = name
        self._branchCidrPrefix = branchCidrPrefix
        self._guest = guest
        self._vlans = vlans

    @property
    def cidrIp(self):
        """
        Gets the cidrIp of this EnterpriseServiceNetworkDataSpaces.

        :return: The cidrIp of this EnterpriseServiceNetworkDataSpaces.
        :rtype: str
        """
        return self._cidrIp

    @cidrIp.setter
    def cidrIp(self, cidrIp):
        """
        Sets the cidrIp of this EnterpriseServiceNetworkDataSpaces.

        :param cidrIp: The cidrIp of this EnterpriseServiceNetworkDataSpaces.
        :type: str
        """

        self._cidrIp = cidrIp

    @property
    def cidrPrefix(self):
        """
        Gets the cidrPrefix of this EnterpriseServiceNetworkDataSpaces.

        :return: The cidrPrefix of this EnterpriseServiceNetworkDataSpaces.
        :rtype: int
        """
        return self._cidrPrefix

    @cidrPrefix.setter
    def cidrPrefix(self, cidrPrefix):
        """
        Sets the cidrPrefix of this EnterpriseServiceNetworkDataSpaces.

        :param cidrPrefix: The cidrPrefix of this EnterpriseServiceNetworkDataSpaces.
        :type: int
        """

        self._cidrPrefix = cidrPrefix

    @property
    def maxVlans(self):
        """
        Gets the maxVlans of this EnterpriseServiceNetworkDataSpaces.

        :return: The maxVlans of this EnterpriseServiceNetworkDataSpaces.
        :rtype: int
        """
        return self._maxVlans

    @maxVlans.setter
    def maxVlans(self, maxVlans):
        """
        Sets the maxVlans of this EnterpriseServiceNetworkDataSpaces.

        :param maxVlans: The maxVlans of this EnterpriseServiceNetworkDataSpaces.
        :type: int
        """

        self._maxVlans = maxVlans

    @property
    def mode(self):
        """
        Gets the mode of this EnterpriseServiceNetworkDataSpaces.

        :return: The mode of this EnterpriseServiceNetworkDataSpaces.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this EnterpriseServiceNetworkDataSpaces.

        :param mode: The mode of this EnterpriseServiceNetworkDataSpaces.
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """
        Gets the name of this EnterpriseServiceNetworkDataSpaces.

        :return: The name of this EnterpriseServiceNetworkDataSpaces.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnterpriseServiceNetworkDataSpaces.

        :param name: The name of this EnterpriseServiceNetworkDataSpaces.
        :type: str
        """

        self._name = name

    @property
    def branchCidrPrefix(self):
        """
        Gets the branchCidrPrefix of this EnterpriseServiceNetworkDataSpaces.

        :return: The branchCidrPrefix of this EnterpriseServiceNetworkDataSpaces.
        :rtype: int
        """
        return self._branchCidrPrefix

    @branchCidrPrefix.setter
    def branchCidrPrefix(self, branchCidrPrefix):
        """
        Sets the branchCidrPrefix of this EnterpriseServiceNetworkDataSpaces.

        :param branchCidrPrefix: The branchCidrPrefix of this EnterpriseServiceNetworkDataSpaces.
        :type: int
        """

        self._branchCidrPrefix = branchCidrPrefix

    @property
    def guest(self):
        """
        Gets the guest of this EnterpriseServiceNetworkDataSpaces.

        :return: The guest of this EnterpriseServiceNetworkDataSpaces.
        :rtype: bool
        """
        return self._guest

    @guest.setter
    def guest(self, guest):
        """
        Sets the guest of this EnterpriseServiceNetworkDataSpaces.

        :param guest: The guest of this EnterpriseServiceNetworkDataSpaces.
        :type: bool
        """

        self._guest = guest

    @property
    def vlans(self):
        """
        Gets the vlans of this EnterpriseServiceNetworkDataSpaces.

        :return: The vlans of this EnterpriseServiceNetworkDataSpaces.
        :rtype: list[EnterpriseServiceNetworkDataVlans]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """
        Sets the vlans of this EnterpriseServiceNetworkDataSpaces.

        :param vlans: The vlans of this EnterpriseServiceNetworkDataSpaces.
        :type: list[EnterpriseServiceNetworkDataVlans]
        """

        self._vlans = vlans

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnterpriseServiceNetworkDataSpaces):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
