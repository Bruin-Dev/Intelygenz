# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EventBase(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, eventTime=None, event=None, category=None, severity=None, message=None):
        """
        EventBase - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'eventTime': 'datetime',
            'event': 'str',
            'category': 'str',
            'severity': 'str',
            'message': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'eventTime': 'eventTime',
            'event': 'event',
            'category': 'category',
            'severity': 'severity',
            'message': 'message'
        }

        self._id = id
        self._eventTime = eventTime
        self._event = event
        self._category = category
        self._severity = severity
        self._message = message

    @property
    def id(self):
        """
        Gets the id of this EventBase.

        :return: The id of this EventBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EventBase.

        :param id: The id of this EventBase.
        :type: int
        """

        self._id = id

    @property
    def eventTime(self):
        """
        Gets the eventTime of this EventBase.

        :return: The eventTime of this EventBase.
        :rtype: datetime
        """
        return self._eventTime

    @eventTime.setter
    def eventTime(self, eventTime):
        """
        Sets the eventTime of this EventBase.

        :param eventTime: The eventTime of this EventBase.
        :type: datetime
        """

        self._eventTime = eventTime

    @property
    def event(self):
        """
        Gets the event of this EventBase.

        :return: The event of this EventBase.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """
        Sets the event of this EventBase.

        :param event: The event of this EventBase.
        :type: str
        """

        self._event = event

    @property
    def category(self):
        """
        Gets the category of this EventBase.

        :return: The category of this EventBase.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this EventBase.

        :param category: The category of this EventBase.
        :type: str
        """

        self._category = category

    @property
    def severity(self):
        """
        Gets the severity of this EventBase.

        :return: The severity of this EventBase.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this EventBase.

        :param severity: The severity of this EventBase.
        :type: str
        """

        self._severity = severity

    @property
    def message(self):
        """
        Gets the message of this EventBase.

        :return: The message of this EventBase.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this EventBase.

        :param message: The message of this EventBase.
        :type: str
        """

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EventBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
