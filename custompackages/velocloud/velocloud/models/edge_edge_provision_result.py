# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeEdgeProvisionResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, activationKey=None, generatedCertificate=None):
        """
        EdgeEdgeProvisionResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'activationKey': 'str',
            'generatedCertificate': 'EdgeEdgeProvisionResultGeneratedCertificate'
        }

        self.attribute_map = {
            'id': 'id',
            'activationKey': 'activationKey',
            'generatedCertificate': 'generatedCertificate'
        }

        self._id = id
        self._activationKey = activationKey
        self._generatedCertificate = generatedCertificate

    @property
    def id(self):
        """
        Gets the id of this EdgeEdgeProvisionResult.

        :return: The id of this EdgeEdgeProvisionResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EdgeEdgeProvisionResult.

        :param id: The id of this EdgeEdgeProvisionResult.
        :type: int
        """

        self._id = id

    @property
    def activationKey(self):
        """
        Gets the activationKey of this EdgeEdgeProvisionResult.

        :return: The activationKey of this EdgeEdgeProvisionResult.
        :rtype: str
        """
        return self._activationKey

    @activationKey.setter
    def activationKey(self, activationKey):
        """
        Sets the activationKey of this EdgeEdgeProvisionResult.

        :param activationKey: The activationKey of this EdgeEdgeProvisionResult.
        :type: str
        """

        self._activationKey = activationKey

    @property
    def generatedCertificate(self):
        """
        Gets the generatedCertificate of this EdgeEdgeProvisionResult.

        :return: The generatedCertificate of this EdgeEdgeProvisionResult.
        :rtype: EdgeEdgeProvisionResultGeneratedCertificate
        """
        return self._generatedCertificate

    @generatedCertificate.setter
    def generatedCertificate(self, generatedCertificate):
        """
        Sets the generatedCertificate of this EdgeEdgeProvisionResult.

        :param generatedCertificate: The generatedCertificate of this EdgeEdgeProvisionResult.
        :type: EdgeEdgeProvisionResultGeneratedCertificate
        """

        self._generatedCertificate = generatedCertificate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeEdgeProvisionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
