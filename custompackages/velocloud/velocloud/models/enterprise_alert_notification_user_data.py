# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnterpriseAlertNotificationUserData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, emailEnabled=None, enabled=None, enterpriseUserId=None, mobileEnabled=None, mobilePhone=None, smsEnabled=None, username=None):
        """
        EnterpriseAlertNotificationUserData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'emailEnabled': 'int',
            'enabled': 'int',
            'enterpriseUserId': 'int',
            'mobileEnabled': 'int',
            'mobilePhone': 'str',
            'smsEnabled': 'int',
            'username': 'str'
        }

        self.attribute_map = {
            'email': 'email',
            'emailEnabled': 'emailEnabled',
            'enabled': 'enabled',
            'enterpriseUserId': 'enterpriseUserId',
            'mobileEnabled': 'mobileEnabled',
            'mobilePhone': 'mobilePhone',
            'smsEnabled': 'smsEnabled',
            'username': 'username'
        }

        self._email = email
        self._emailEnabled = emailEnabled
        self._enabled = enabled
        self._enterpriseUserId = enterpriseUserId
        self._mobileEnabled = mobileEnabled
        self._mobilePhone = mobilePhone
        self._smsEnabled = smsEnabled
        self._username = username

    @property
    def email(self):
        """
        Gets the email of this EnterpriseAlertNotificationUserData.

        :return: The email of this EnterpriseAlertNotificationUserData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this EnterpriseAlertNotificationUserData.

        :param email: The email of this EnterpriseAlertNotificationUserData.
        :type: str
        """

        self._email = email

    @property
    def emailEnabled(self):
        """
        Gets the emailEnabled of this EnterpriseAlertNotificationUserData.

        :return: The emailEnabled of this EnterpriseAlertNotificationUserData.
        :rtype: int
        """
        return self._emailEnabled

    @emailEnabled.setter
    def emailEnabled(self, emailEnabled):
        """
        Sets the emailEnabled of this EnterpriseAlertNotificationUserData.

        :param emailEnabled: The emailEnabled of this EnterpriseAlertNotificationUserData.
        :type: int
        """

        self._emailEnabled = emailEnabled

    @property
    def enabled(self):
        """
        Gets the enabled of this EnterpriseAlertNotificationUserData.

        :return: The enabled of this EnterpriseAlertNotificationUserData.
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this EnterpriseAlertNotificationUserData.

        :param enabled: The enabled of this EnterpriseAlertNotificationUserData.
        :type: int
        """

        self._enabled = enabled

    @property
    def enterpriseUserId(self):
        """
        Gets the enterpriseUserId of this EnterpriseAlertNotificationUserData.

        :return: The enterpriseUserId of this EnterpriseAlertNotificationUserData.
        :rtype: int
        """
        return self._enterpriseUserId

    @enterpriseUserId.setter
    def enterpriseUserId(self, enterpriseUserId):
        """
        Sets the enterpriseUserId of this EnterpriseAlertNotificationUserData.

        :param enterpriseUserId: The enterpriseUserId of this EnterpriseAlertNotificationUserData.
        :type: int
        """

        self._enterpriseUserId = enterpriseUserId

    @property
    def mobileEnabled(self):
        """
        Gets the mobileEnabled of this EnterpriseAlertNotificationUserData.

        :return: The mobileEnabled of this EnterpriseAlertNotificationUserData.
        :rtype: int
        """
        return self._mobileEnabled

    @mobileEnabled.setter
    def mobileEnabled(self, mobileEnabled):
        """
        Sets the mobileEnabled of this EnterpriseAlertNotificationUserData.

        :param mobileEnabled: The mobileEnabled of this EnterpriseAlertNotificationUserData.
        :type: int
        """

        self._mobileEnabled = mobileEnabled

    @property
    def mobilePhone(self):
        """
        Gets the mobilePhone of this EnterpriseAlertNotificationUserData.

        :return: The mobilePhone of this EnterpriseAlertNotificationUserData.
        :rtype: str
        """
        return self._mobilePhone

    @mobilePhone.setter
    def mobilePhone(self, mobilePhone):
        """
        Sets the mobilePhone of this EnterpriseAlertNotificationUserData.

        :param mobilePhone: The mobilePhone of this EnterpriseAlertNotificationUserData.
        :type: str
        """

        self._mobilePhone = mobilePhone

    @property
    def smsEnabled(self):
        """
        Gets the smsEnabled of this EnterpriseAlertNotificationUserData.

        :return: The smsEnabled of this EnterpriseAlertNotificationUserData.
        :rtype: int
        """
        return self._smsEnabled

    @smsEnabled.setter
    def smsEnabled(self, smsEnabled):
        """
        Sets the smsEnabled of this EnterpriseAlertNotificationUserData.

        :param smsEnabled: The smsEnabled of this EnterpriseAlertNotificationUserData.
        :type: int
        """

        self._smsEnabled = smsEnabled

    @property
    def username(self):
        """
        Gets the username of this EnterpriseAlertNotificationUserData.

        :return: The username of this EnterpriseAlertNotificationUserData.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this EnterpriseAlertNotificationUserData.

        :param username: The username of this EnterpriseAlertNotificationUserData.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnterpriseAlertNotificationUserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
