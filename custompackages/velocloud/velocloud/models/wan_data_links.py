# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WANDataLinks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, logicalId=None, internalId=None, discovery=None, mode=None, type=None, name=None, isp=None, publicIpAddress=None, sourceIpAddress=None, nextHopIpAddress=None, customVlanId=None, vlanId=None, virtualIpAddress=None, dynamicBwAdjustmentEnabled=None, bwMeasurement=None, upstreamMbps=None, downstreamMbps=None, backupOnly=None, overheadBytes=None, udpHolePunching=None, MTU=None, mplsNetwork=None, dscpTag=None, staticSlaEnabled=None, classesofServiceEnabled=None, encryptOverlay=None, staticSLA=None, classesOfService=None, interfaces=None, lastActive=None):
        """
        WANDataLinks - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'logicalId': 'str',
            'internalId': 'str',
            'discovery': 'str',
            'mode': 'str',
            'type': 'str',
            'name': 'str',
            'isp': 'str',
            'publicIpAddress': 'str',
            'sourceIpAddress': 'str',
            'nextHopIpAddress': 'str',
            'customVlanId': 'bool',
            'vlanId': 'int',
            'virtualIpAddress': 'str',
            'dynamicBwAdjustmentEnabled': 'bool',
            'bwMeasurement': 'str',
            'upstreamMbps': 'str',
            'downstreamMbps': 'str',
            'backupOnly': 'bool',
            'overheadBytes': 'int',
            'udpHolePunching': 'bool',
            'MTU': 'int',
            'mplsNetwork': 'str',
            'dscpTag': 'str',
            'staticSlaEnabled': 'bool',
            'classesofServiceEnabled': 'bool',
            'encryptOverlay': 'bool',
            'staticSLA': 'WANDataStaticSLA',
            'classesOfService': 'WANDataClassesOfService',
            'interfaces': 'list[str]',
            'lastActive': 'str'
        }

        self.attribute_map = {
            'logicalId': 'logicalId',
            'internalId': 'internalId',
            'discovery': 'discovery',
            'mode': 'mode',
            'type': 'type',
            'name': 'name',
            'isp': 'isp',
            'publicIpAddress': 'publicIpAddress',
            'sourceIpAddress': 'sourceIpAddress',
            'nextHopIpAddress': 'nextHopIpAddress',
            'customVlanId': 'customVlanId',
            'vlanId': 'vlanId',
            'virtualIpAddress': 'virtualIpAddress',
            'dynamicBwAdjustmentEnabled': 'dynamicBwAdjustmentEnabled',
            'bwMeasurement': 'bwMeasurement',
            'upstreamMbps': 'upstreamMbps',
            'downstreamMbps': 'downstreamMbps',
            'backupOnly': 'backupOnly',
            'overheadBytes': 'overheadBytes',
            'udpHolePunching': 'udpHolePunching',
            'MTU': 'MTU',
            'mplsNetwork': 'mplsNetwork',
            'dscpTag': 'dscpTag',
            'staticSlaEnabled': 'staticSlaEnabled',
            'classesofServiceEnabled': 'classesofServiceEnabled',
            'encryptOverlay': 'encryptOverlay',
            'staticSLA': 'staticSLA',
            'classesOfService': 'classesOfService',
            'interfaces': 'interfaces',
            'lastActive': 'lastActive'
        }

        self._logicalId = logicalId
        self._internalId = internalId
        self._discovery = discovery
        self._mode = mode
        self._type = type
        self._name = name
        self._isp = isp
        self._publicIpAddress = publicIpAddress
        self._sourceIpAddress = sourceIpAddress
        self._nextHopIpAddress = nextHopIpAddress
        self._customVlanId = customVlanId
        self._vlanId = vlanId
        self._virtualIpAddress = virtualIpAddress
        self._dynamicBwAdjustmentEnabled = dynamicBwAdjustmentEnabled
        self._bwMeasurement = bwMeasurement
        self._upstreamMbps = upstreamMbps
        self._downstreamMbps = downstreamMbps
        self._backupOnly = backupOnly
        self._overheadBytes = overheadBytes
        self._udpHolePunching = udpHolePunching
        self._MTU = MTU
        self._mplsNetwork = mplsNetwork
        self._dscpTag = dscpTag
        self._staticSlaEnabled = staticSlaEnabled
        self._classesofServiceEnabled = classesofServiceEnabled
        self._encryptOverlay = encryptOverlay
        self._staticSLA = staticSLA
        self._classesOfService = classesOfService
        self._interfaces = interfaces
        self._lastActive = lastActive

    @property
    def logicalId(self):
        """
        Gets the logicalId of this WANDataLinks.

        :return: The logicalId of this WANDataLinks.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this WANDataLinks.

        :param logicalId: The logicalId of this WANDataLinks.
        :type: str
        """

        self._logicalId = logicalId

    @property
    def internalId(self):
        """
        Gets the internalId of this WANDataLinks.

        :return: The internalId of this WANDataLinks.
        :rtype: str
        """
        return self._internalId

    @internalId.setter
    def internalId(self, internalId):
        """
        Sets the internalId of this WANDataLinks.

        :param internalId: The internalId of this WANDataLinks.
        :type: str
        """

        self._internalId = internalId

    @property
    def discovery(self):
        """
        Gets the discovery of this WANDataLinks.

        :return: The discovery of this WANDataLinks.
        :rtype: str
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """
        Sets the discovery of this WANDataLinks.

        :param discovery: The discovery of this WANDataLinks.
        :type: str
        """

        self._discovery = discovery

    @property
    def mode(self):
        """
        Gets the mode of this WANDataLinks.

        :return: The mode of this WANDataLinks.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this WANDataLinks.

        :param mode: The mode of this WANDataLinks.
        :type: str
        """

        self._mode = mode

    @property
    def type(self):
        """
        Gets the type of this WANDataLinks.

        :return: The type of this WANDataLinks.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WANDataLinks.

        :param type: The type of this WANDataLinks.
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """
        Gets the name of this WANDataLinks.

        :return: The name of this WANDataLinks.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WANDataLinks.

        :param name: The name of this WANDataLinks.
        :type: str
        """

        self._name = name

    @property
    def isp(self):
        """
        Gets the isp of this WANDataLinks.

        :return: The isp of this WANDataLinks.
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """
        Sets the isp of this WANDataLinks.

        :param isp: The isp of this WANDataLinks.
        :type: str
        """

        self._isp = isp

    @property
    def publicIpAddress(self):
        """
        Gets the publicIpAddress of this WANDataLinks.

        :return: The publicIpAddress of this WANDataLinks.
        :rtype: str
        """
        return self._publicIpAddress

    @publicIpAddress.setter
    def publicIpAddress(self, publicIpAddress):
        """
        Sets the publicIpAddress of this WANDataLinks.

        :param publicIpAddress: The publicIpAddress of this WANDataLinks.
        :type: str
        """

        self._publicIpAddress = publicIpAddress

    @property
    def sourceIpAddress(self):
        """
        Gets the sourceIpAddress of this WANDataLinks.

        :return: The sourceIpAddress of this WANDataLinks.
        :rtype: str
        """
        return self._sourceIpAddress

    @sourceIpAddress.setter
    def sourceIpAddress(self, sourceIpAddress):
        """
        Sets the sourceIpAddress of this WANDataLinks.

        :param sourceIpAddress: The sourceIpAddress of this WANDataLinks.
        :type: str
        """

        self._sourceIpAddress = sourceIpAddress

    @property
    def nextHopIpAddress(self):
        """
        Gets the nextHopIpAddress of this WANDataLinks.

        :return: The nextHopIpAddress of this WANDataLinks.
        :rtype: str
        """
        return self._nextHopIpAddress

    @nextHopIpAddress.setter
    def nextHopIpAddress(self, nextHopIpAddress):
        """
        Sets the nextHopIpAddress of this WANDataLinks.

        :param nextHopIpAddress: The nextHopIpAddress of this WANDataLinks.
        :type: str
        """

        self._nextHopIpAddress = nextHopIpAddress

    @property
    def customVlanId(self):
        """
        Gets the customVlanId of this WANDataLinks.

        :return: The customVlanId of this WANDataLinks.
        :rtype: bool
        """
        return self._customVlanId

    @customVlanId.setter
    def customVlanId(self, customVlanId):
        """
        Sets the customVlanId of this WANDataLinks.

        :param customVlanId: The customVlanId of this WANDataLinks.
        :type: bool
        """

        self._customVlanId = customVlanId

    @property
    def vlanId(self):
        """
        Gets the vlanId of this WANDataLinks.

        :return: The vlanId of this WANDataLinks.
        :rtype: int
        """
        return self._vlanId

    @vlanId.setter
    def vlanId(self, vlanId):
        """
        Sets the vlanId of this WANDataLinks.

        :param vlanId: The vlanId of this WANDataLinks.
        :type: int
        """

        self._vlanId = vlanId

    @property
    def virtualIpAddress(self):
        """
        Gets the virtualIpAddress of this WANDataLinks.

        :return: The virtualIpAddress of this WANDataLinks.
        :rtype: str
        """
        return self._virtualIpAddress

    @virtualIpAddress.setter
    def virtualIpAddress(self, virtualIpAddress):
        """
        Sets the virtualIpAddress of this WANDataLinks.

        :param virtualIpAddress: The virtualIpAddress of this WANDataLinks.
        :type: str
        """

        self._virtualIpAddress = virtualIpAddress

    @property
    def dynamicBwAdjustmentEnabled(self):
        """
        Gets the dynamicBwAdjustmentEnabled of this WANDataLinks.

        :return: The dynamicBwAdjustmentEnabled of this WANDataLinks.
        :rtype: bool
        """
        return self._dynamicBwAdjustmentEnabled

    @dynamicBwAdjustmentEnabled.setter
    def dynamicBwAdjustmentEnabled(self, dynamicBwAdjustmentEnabled):
        """
        Sets the dynamicBwAdjustmentEnabled of this WANDataLinks.

        :param dynamicBwAdjustmentEnabled: The dynamicBwAdjustmentEnabled of this WANDataLinks.
        :type: bool
        """

        self._dynamicBwAdjustmentEnabled = dynamicBwAdjustmentEnabled

    @property
    def bwMeasurement(self):
        """
        Gets the bwMeasurement of this WANDataLinks.

        :return: The bwMeasurement of this WANDataLinks.
        :rtype: str
        """
        return self._bwMeasurement

    @bwMeasurement.setter
    def bwMeasurement(self, bwMeasurement):
        """
        Sets the bwMeasurement of this WANDataLinks.

        :param bwMeasurement: The bwMeasurement of this WANDataLinks.
        :type: str
        """

        self._bwMeasurement = bwMeasurement

    @property
    def upstreamMbps(self):
        """
        Gets the upstreamMbps of this WANDataLinks.

        :return: The upstreamMbps of this WANDataLinks.
        :rtype: str
        """
        return self._upstreamMbps

    @upstreamMbps.setter
    def upstreamMbps(self, upstreamMbps):
        """
        Sets the upstreamMbps of this WANDataLinks.

        :param upstreamMbps: The upstreamMbps of this WANDataLinks.
        :type: str
        """

        self._upstreamMbps = upstreamMbps

    @property
    def downstreamMbps(self):
        """
        Gets the downstreamMbps of this WANDataLinks.

        :return: The downstreamMbps of this WANDataLinks.
        :rtype: str
        """
        return self._downstreamMbps

    @downstreamMbps.setter
    def downstreamMbps(self, downstreamMbps):
        """
        Sets the downstreamMbps of this WANDataLinks.

        :param downstreamMbps: The downstreamMbps of this WANDataLinks.
        :type: str
        """

        self._downstreamMbps = downstreamMbps

    @property
    def backupOnly(self):
        """
        Gets the backupOnly of this WANDataLinks.

        :return: The backupOnly of this WANDataLinks.
        :rtype: bool
        """
        return self._backupOnly

    @backupOnly.setter
    def backupOnly(self, backupOnly):
        """
        Sets the backupOnly of this WANDataLinks.

        :param backupOnly: The backupOnly of this WANDataLinks.
        :type: bool
        """

        self._backupOnly = backupOnly

    @property
    def overheadBytes(self):
        """
        Gets the overheadBytes of this WANDataLinks.

        :return: The overheadBytes of this WANDataLinks.
        :rtype: int
        """
        return self._overheadBytes

    @overheadBytes.setter
    def overheadBytes(self, overheadBytes):
        """
        Sets the overheadBytes of this WANDataLinks.

        :param overheadBytes: The overheadBytes of this WANDataLinks.
        :type: int
        """

        self._overheadBytes = overheadBytes

    @property
    def udpHolePunching(self):
        """
        Gets the udpHolePunching of this WANDataLinks.

        :return: The udpHolePunching of this WANDataLinks.
        :rtype: bool
        """
        return self._udpHolePunching

    @udpHolePunching.setter
    def udpHolePunching(self, udpHolePunching):
        """
        Sets the udpHolePunching of this WANDataLinks.

        :param udpHolePunching: The udpHolePunching of this WANDataLinks.
        :type: bool
        """

        self._udpHolePunching = udpHolePunching

    @property
    def MTU(self):
        """
        Gets the MTU of this WANDataLinks.

        :return: The MTU of this WANDataLinks.
        :rtype: int
        """
        return self._MTU

    @MTU.setter
    def MTU(self, MTU):
        """
        Sets the MTU of this WANDataLinks.

        :param MTU: The MTU of this WANDataLinks.
        :type: int
        """

        self._MTU = MTU

    @property
    def mplsNetwork(self):
        """
        Gets the mplsNetwork of this WANDataLinks.

        :return: The mplsNetwork of this WANDataLinks.
        :rtype: str
        """
        return self._mplsNetwork

    @mplsNetwork.setter
    def mplsNetwork(self, mplsNetwork):
        """
        Sets the mplsNetwork of this WANDataLinks.

        :param mplsNetwork: The mplsNetwork of this WANDataLinks.
        :type: str
        """

        self._mplsNetwork = mplsNetwork

    @property
    def dscpTag(self):
        """
        Gets the dscpTag of this WANDataLinks.

        :return: The dscpTag of this WANDataLinks.
        :rtype: str
        """
        return self._dscpTag

    @dscpTag.setter
    def dscpTag(self, dscpTag):
        """
        Sets the dscpTag of this WANDataLinks.

        :param dscpTag: The dscpTag of this WANDataLinks.
        :type: str
        """

        self._dscpTag = dscpTag

    @property
    def staticSlaEnabled(self):
        """
        Gets the staticSlaEnabled of this WANDataLinks.

        :return: The staticSlaEnabled of this WANDataLinks.
        :rtype: bool
        """
        return self._staticSlaEnabled

    @staticSlaEnabled.setter
    def staticSlaEnabled(self, staticSlaEnabled):
        """
        Sets the staticSlaEnabled of this WANDataLinks.

        :param staticSlaEnabled: The staticSlaEnabled of this WANDataLinks.
        :type: bool
        """

        self._staticSlaEnabled = staticSlaEnabled

    @property
    def classesofServiceEnabled(self):
        """
        Gets the classesofServiceEnabled of this WANDataLinks.

        :return: The classesofServiceEnabled of this WANDataLinks.
        :rtype: bool
        """
        return self._classesofServiceEnabled

    @classesofServiceEnabled.setter
    def classesofServiceEnabled(self, classesofServiceEnabled):
        """
        Sets the classesofServiceEnabled of this WANDataLinks.

        :param classesofServiceEnabled: The classesofServiceEnabled of this WANDataLinks.
        :type: bool
        """

        self._classesofServiceEnabled = classesofServiceEnabled

    @property
    def encryptOverlay(self):
        """
        Gets the encryptOverlay of this WANDataLinks.

        :return: The encryptOverlay of this WANDataLinks.
        :rtype: bool
        """
        return self._encryptOverlay

    @encryptOverlay.setter
    def encryptOverlay(self, encryptOverlay):
        """
        Sets the encryptOverlay of this WANDataLinks.

        :param encryptOverlay: The encryptOverlay of this WANDataLinks.
        :type: bool
        """

        self._encryptOverlay = encryptOverlay

    @property
    def staticSLA(self):
        """
        Gets the staticSLA of this WANDataLinks.

        :return: The staticSLA of this WANDataLinks.
        :rtype: WANDataStaticSLA
        """
        return self._staticSLA

    @staticSLA.setter
    def staticSLA(self, staticSLA):
        """
        Sets the staticSLA of this WANDataLinks.

        :param staticSLA: The staticSLA of this WANDataLinks.
        :type: WANDataStaticSLA
        """

        self._staticSLA = staticSLA

    @property
    def classesOfService(self):
        """
        Gets the classesOfService of this WANDataLinks.

        :return: The classesOfService of this WANDataLinks.
        :rtype: WANDataClassesOfService
        """
        return self._classesOfService

    @classesOfService.setter
    def classesOfService(self, classesOfService):
        """
        Sets the classesOfService of this WANDataLinks.

        :param classesOfService: The classesOfService of this WANDataLinks.
        :type: WANDataClassesOfService
        """

        self._classesOfService = classesOfService

    @property
    def interfaces(self):
        """
        Gets the interfaces of this WANDataLinks.

        :return: The interfaces of this WANDataLinks.
        :rtype: list[str]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """
        Sets the interfaces of this WANDataLinks.

        :param interfaces: The interfaces of this WANDataLinks.
        :type: list[str]
        """

        self._interfaces = interfaces

    @property
    def lastActive(self):
        """
        Gets the lastActive of this WANDataLinks.

        :return: The lastActive of this WANDataLinks.
        :rtype: str
        """
        return self._lastActive

    @lastActive.setter
    def lastActive(self, lastActive):
        """
        Sets the lastActive of this WANDataLinks.

        :param lastActive: The lastActive of this WANDataLinks.
        :type: str
        """

        self._lastActive = lastActive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WANDataLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
