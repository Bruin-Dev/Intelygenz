# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeDeviceSettingsDataMultiSourceQos(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enable=None, enabled=None, highRatio=None, normalRatio=None, lowRatio=None, maxCapThreshold=None, minCapThreshold=None):
        """
        EdgeDeviceSettingsDataMultiSourceQos - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enable': 'bool',
            'enabled': 'bool',
            'highRatio': 'int',
            'normalRatio': 'int',
            'lowRatio': 'int',
            'maxCapThreshold': 'int',
            'minCapThreshold': 'int'
        }

        self.attribute_map = {
            'enable': 'enable',
            'enabled': 'enabled',
            'highRatio': 'highRatio',
            'normalRatio': 'normalRatio',
            'lowRatio': 'lowRatio',
            'maxCapThreshold': 'maxCapThreshold',
            'minCapThreshold': 'minCapThreshold'
        }

        self._enable = enable
        self._enabled = enabled
        self._highRatio = highRatio
        self._normalRatio = normalRatio
        self._lowRatio = lowRatio
        self._maxCapThreshold = maxCapThreshold
        self._minCapThreshold = minCapThreshold

    @property
    def enable(self):
        """
        Gets the enable of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The enable of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """
        Sets the enable of this EdgeDeviceSettingsDataMultiSourceQos.

        :param enable: The enable of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: bool
        """

        self._enable = enable

    @property
    def enabled(self):
        """
        Gets the enabled of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The enabled of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this EdgeDeviceSettingsDataMultiSourceQos.

        :param enabled: The enabled of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: bool
        """

        self._enabled = enabled

    @property
    def highRatio(self):
        """
        Gets the highRatio of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The highRatio of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: int
        """
        return self._highRatio

    @highRatio.setter
    def highRatio(self, highRatio):
        """
        Sets the highRatio of this EdgeDeviceSettingsDataMultiSourceQos.

        :param highRatio: The highRatio of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: int
        """

        self._highRatio = highRatio

    @property
    def normalRatio(self):
        """
        Gets the normalRatio of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The normalRatio of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: int
        """
        return self._normalRatio

    @normalRatio.setter
    def normalRatio(self, normalRatio):
        """
        Sets the normalRatio of this EdgeDeviceSettingsDataMultiSourceQos.

        :param normalRatio: The normalRatio of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: int
        """

        self._normalRatio = normalRatio

    @property
    def lowRatio(self):
        """
        Gets the lowRatio of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The lowRatio of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: int
        """
        return self._lowRatio

    @lowRatio.setter
    def lowRatio(self, lowRatio):
        """
        Sets the lowRatio of this EdgeDeviceSettingsDataMultiSourceQos.

        :param lowRatio: The lowRatio of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: int
        """

        self._lowRatio = lowRatio

    @property
    def maxCapThreshold(self):
        """
        Gets the maxCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The maxCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: int
        """
        return self._maxCapThreshold

    @maxCapThreshold.setter
    def maxCapThreshold(self, maxCapThreshold):
        """
        Sets the maxCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.

        :param maxCapThreshold: The maxCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: int
        """

        self._maxCapThreshold = maxCapThreshold

    @property
    def minCapThreshold(self):
        """
        Gets the minCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.

        :return: The minCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.
        :rtype: int
        """
        return self._minCapThreshold

    @minCapThreshold.setter
    def minCapThreshold(self, minCapThreshold):
        """
        Sets the minCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.

        :param minCapThreshold: The minCapThreshold of this EdgeDeviceSettingsDataMultiSourceQos.
        :type: int
        """

        self._minCapThreshold = minCapThreshold

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeDeviceSettingsDataMultiSourceQos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
