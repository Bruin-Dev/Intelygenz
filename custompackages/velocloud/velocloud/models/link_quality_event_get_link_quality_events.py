# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LinkQualityEventGetLinkQualityEvents(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, edgeId=None, interval=None, maxSamples=None, individualScores=None, minutesPerSample=None, debug=None):
        """
        LinkQualityEventGetLinkQualityEvents - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'edgeId': 'int',
            'interval': 'Interval',
            'maxSamples': 'int',
            'individualScores': 'bool',
            'minutesPerSample': 'int',
            'debug': 'bool'
        }

        self.attribute_map = {
            'edgeId': 'edgeId',
            'interval': 'interval',
            'maxSamples': 'maxSamples',
            'individualScores': 'individualScores',
            'minutesPerSample': 'minutesPerSample',
            'debug': 'debug'
        }

        self._edgeId = edgeId
        self._interval = interval
        self._maxSamples = maxSamples
        self._individualScores = individualScores
        self._minutesPerSample = minutesPerSample
        self._debug = debug

    @property
    def edgeId(self):
        """
        Gets the edgeId of this LinkQualityEventGetLinkQualityEvents.

        :return: The edgeId of this LinkQualityEventGetLinkQualityEvents.
        :rtype: int
        """
        return self._edgeId

    @edgeId.setter
    def edgeId(self, edgeId):
        """
        Sets the edgeId of this LinkQualityEventGetLinkQualityEvents.

        :param edgeId: The edgeId of this LinkQualityEventGetLinkQualityEvents.
        :type: int
        """

        self._edgeId = edgeId

    @property
    def interval(self):
        """
        Gets the interval of this LinkQualityEventGetLinkQualityEvents.

        :return: The interval of this LinkQualityEventGetLinkQualityEvents.
        :rtype: Interval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this LinkQualityEventGetLinkQualityEvents.

        :param interval: The interval of this LinkQualityEventGetLinkQualityEvents.
        :type: Interval
        """

        self._interval = interval

    @property
    def maxSamples(self):
        """
        Gets the maxSamples of this LinkQualityEventGetLinkQualityEvents.

        :return: The maxSamples of this LinkQualityEventGetLinkQualityEvents.
        :rtype: int
        """
        return self._maxSamples

    @maxSamples.setter
    def maxSamples(self, maxSamples):
        """
        Sets the maxSamples of this LinkQualityEventGetLinkQualityEvents.

        :param maxSamples: The maxSamples of this LinkQualityEventGetLinkQualityEvents.
        :type: int
        """

        self._maxSamples = maxSamples

    @property
    def individualScores(self):
        """
        Gets the individualScores of this LinkQualityEventGetLinkQualityEvents.

        :return: The individualScores of this LinkQualityEventGetLinkQualityEvents.
        :rtype: bool
        """
        return self._individualScores

    @individualScores.setter
    def individualScores(self, individualScores):
        """
        Sets the individualScores of this LinkQualityEventGetLinkQualityEvents.

        :param individualScores: The individualScores of this LinkQualityEventGetLinkQualityEvents.
        :type: bool
        """

        self._individualScores = individualScores

    @property
    def minutesPerSample(self):
        """
        Gets the minutesPerSample of this LinkQualityEventGetLinkQualityEvents.

        :return: The minutesPerSample of this LinkQualityEventGetLinkQualityEvents.
        :rtype: int
        """
        return self._minutesPerSample

    @minutesPerSample.setter
    def minutesPerSample(self, minutesPerSample):
        """
        Sets the minutesPerSample of this LinkQualityEventGetLinkQualityEvents.

        :param minutesPerSample: The minutesPerSample of this LinkQualityEventGetLinkQualityEvents.
        :type: int
        """

        self._minutesPerSample = minutesPerSample

    @property
    def debug(self):
        """
        Gets the debug of this LinkQualityEventGetLinkQualityEvents.

        :return: The debug of this LinkQualityEventGetLinkQualityEvents.
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """
        Sets the debug of this LinkQualityEventGetLinkQualityEvents.

        :param debug: The debug of this LinkQualityEventGetLinkQualityEvents.
        :type: bool
        """

        self._debug = debug

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LinkQualityEventGetLinkQualityEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
