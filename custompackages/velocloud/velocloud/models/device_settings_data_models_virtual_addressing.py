# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceSettingsDataModelsVirtualAddressing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, cidrPrefix=None, cidrIp=None, netmask=None, gateway=None):
        """
        DeviceSettingsDataModelsVirtualAddressing - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'cidrPrefix': 'int',
            'cidrIp': 'str',
            'netmask': 'str',
            'gateway': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'cidrPrefix': 'cidrPrefix',
            'cidrIp': 'cidrIp',
            'netmask': 'netmask',
            'gateway': 'gateway'
        }

        self._type = type
        self._cidrPrefix = cidrPrefix
        self._cidrIp = cidrIp
        self._netmask = netmask
        self._gateway = gateway

    @property
    def type(self):
        """
        Gets the type of this DeviceSettingsDataModelsVirtualAddressing.

        :return: The type of this DeviceSettingsDataModelsVirtualAddressing.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DeviceSettingsDataModelsVirtualAddressing.

        :param type: The type of this DeviceSettingsDataModelsVirtualAddressing.
        :type: str
        """

        self._type = type

    @property
    def cidrPrefix(self):
        """
        Gets the cidrPrefix of this DeviceSettingsDataModelsVirtualAddressing.

        :return: The cidrPrefix of this DeviceSettingsDataModelsVirtualAddressing.
        :rtype: int
        """
        return self._cidrPrefix

    @cidrPrefix.setter
    def cidrPrefix(self, cidrPrefix):
        """
        Sets the cidrPrefix of this DeviceSettingsDataModelsVirtualAddressing.

        :param cidrPrefix: The cidrPrefix of this DeviceSettingsDataModelsVirtualAddressing.
        :type: int
        """

        self._cidrPrefix = cidrPrefix

    @property
    def cidrIp(self):
        """
        Gets the cidrIp of this DeviceSettingsDataModelsVirtualAddressing.

        :return: The cidrIp of this DeviceSettingsDataModelsVirtualAddressing.
        :rtype: str
        """
        return self._cidrIp

    @cidrIp.setter
    def cidrIp(self, cidrIp):
        """
        Sets the cidrIp of this DeviceSettingsDataModelsVirtualAddressing.

        :param cidrIp: The cidrIp of this DeviceSettingsDataModelsVirtualAddressing.
        :type: str
        """

        self._cidrIp = cidrIp

    @property
    def netmask(self):
        """
        Gets the netmask of this DeviceSettingsDataModelsVirtualAddressing.

        :return: The netmask of this DeviceSettingsDataModelsVirtualAddressing.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """
        Sets the netmask of this DeviceSettingsDataModelsVirtualAddressing.

        :param netmask: The netmask of this DeviceSettingsDataModelsVirtualAddressing.
        :type: str
        """

        self._netmask = netmask

    @property
    def gateway(self):
        """
        Gets the gateway of this DeviceSettingsDataModelsVirtualAddressing.

        :return: The gateway of this DeviceSettingsDataModelsVirtualAddressing.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this DeviceSettingsDataModelsVirtualAddressing.

        :param gateway: The gateway of this DeviceSettingsDataModelsVirtualAddressing.
        :type: str
        """

        self._gateway = gateway

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceSettingsDataModelsVirtualAddressing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
