# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceSettingsDataSoftwareUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, windowed=None, window=None):
        """
        DeviceSettingsDataSoftwareUpdate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'windowed': 'bool',
            'window': 'DeviceSettingsDataSoftwareUpdateWindow'
        }

        self.attribute_map = {
            'windowed': 'windowed',
            'window': 'window'
        }

        self._windowed = windowed
        self._window = window

    @property
    def windowed(self):
        """
        Gets the windowed of this DeviceSettingsDataSoftwareUpdate.

        :return: The windowed of this DeviceSettingsDataSoftwareUpdate.
        :rtype: bool
        """
        return self._windowed

    @windowed.setter
    def windowed(self, windowed):
        """
        Sets the windowed of this DeviceSettingsDataSoftwareUpdate.

        :param windowed: The windowed of this DeviceSettingsDataSoftwareUpdate.
        :type: bool
        """

        self._windowed = windowed

    @property
    def window(self):
        """
        Gets the window of this DeviceSettingsDataSoftwareUpdate.

        :return: The window of this DeviceSettingsDataSoftwareUpdate.
        :rtype: DeviceSettingsDataSoftwareUpdateWindow
        """
        return self._window

    @window.setter
    def window(self, window):
        """
        Sets the window of this DeviceSettingsDataSoftwareUpdate.

        :param window: The window of this DeviceSettingsDataSoftwareUpdate.
        :type: DeviceSettingsDataSoftwareUpdateWindow
        """

        self._window = window

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceSettingsDataSoftwareUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
