# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayHandoffValueOverridesVLAN(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, cTag=None, sTag=None, transportLanVLAN=None):
        """
        GatewayHandoffValueOverridesVLAN - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'cTag': 'int',
            'sTag': 'int',
            'transportLanVLAN': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'cTag': 'cTag',
            'sTag': 'sTag',
            'transportLanVLAN': 'transportLanVLAN'
        }

        self._type = type
        self._cTag = cTag
        self._sTag = sTag
        self._transportLanVLAN = transportLanVLAN

    @property
    def type(self):
        """
        Gets the type of this GatewayHandoffValueOverridesVLAN.

        :return: The type of this GatewayHandoffValueOverridesVLAN.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GatewayHandoffValueOverridesVLAN.

        :param type: The type of this GatewayHandoffValueOverridesVLAN.
        :type: str
        """

        self._type = type

    @property
    def cTag(self):
        """
        Gets the cTag of this GatewayHandoffValueOverridesVLAN.

        :return: The cTag of this GatewayHandoffValueOverridesVLAN.
        :rtype: int
        """
        return self._cTag

    @cTag.setter
    def cTag(self, cTag):
        """
        Sets the cTag of this GatewayHandoffValueOverridesVLAN.

        :param cTag: The cTag of this GatewayHandoffValueOverridesVLAN.
        :type: int
        """

        self._cTag = cTag

    @property
    def sTag(self):
        """
        Gets the sTag of this GatewayHandoffValueOverridesVLAN.

        :return: The sTag of this GatewayHandoffValueOverridesVLAN.
        :rtype: int
        """
        return self._sTag

    @sTag.setter
    def sTag(self, sTag):
        """
        Sets the sTag of this GatewayHandoffValueOverridesVLAN.

        :param sTag: The sTag of this GatewayHandoffValueOverridesVLAN.
        :type: int
        """

        self._sTag = sTag

    @property
    def transportLanVLAN(self):
        """
        Gets the transportLanVLAN of this GatewayHandoffValueOverridesVLAN.

        :return: The transportLanVLAN of this GatewayHandoffValueOverridesVLAN.
        :rtype: str
        """
        return self._transportLanVLAN

    @transportLanVLAN.setter
    def transportLanVLAN(self, transportLanVLAN):
        """
        Sets the transportLanVLAN of this GatewayHandoffValueOverridesVLAN.

        :param transportLanVLAN: The transportLanVLAN of this GatewayHandoffValueOverridesVLAN.
        :type: str
        """

        self._transportLanVLAN = transportLanVLAN

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayHandoffValueOverridesVLAN):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
