# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayUpdateGatewayAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, site=None, ipsecGatewayDetail=None, handOffDetail=None, roles=None):
        """
        GatewayUpdateGatewayAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'site': 'SiteObject',
            'ipsecGatewayDetail': 'GatewayupdateGatewayAttributesIpsecGatewayDetail',
            'handOffDetail': 'GatewayHandoffDetail',
            'roles': 'GatewayRolesObject'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'site': 'site',
            'ipsecGatewayDetail': 'ipsecGatewayDetail',
            'handOffDetail': 'handOffDetail',
            'roles': 'roles'
        }

        self._id = id
        self._name = name
        self._description = description
        self._site = site
        self._ipsecGatewayDetail = ipsecGatewayDetail
        self._handOffDetail = handOffDetail
        self._roles = roles

    @property
    def id(self):
        """
        Gets the id of this GatewayUpdateGatewayAttributes.

        :return: The id of this GatewayUpdateGatewayAttributes.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GatewayUpdateGatewayAttributes.

        :param id: The id of this GatewayUpdateGatewayAttributes.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this GatewayUpdateGatewayAttributes.

        :return: The name of this GatewayUpdateGatewayAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GatewayUpdateGatewayAttributes.

        :param name: The name of this GatewayUpdateGatewayAttributes.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this GatewayUpdateGatewayAttributes.

        :return: The description of this GatewayUpdateGatewayAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GatewayUpdateGatewayAttributes.

        :param description: The description of this GatewayUpdateGatewayAttributes.
        :type: str
        """

        self._description = description

    @property
    def site(self):
        """
        Gets the site of this GatewayUpdateGatewayAttributes.

        :return: The site of this GatewayUpdateGatewayAttributes.
        :rtype: SiteObject
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this GatewayUpdateGatewayAttributes.

        :param site: The site of this GatewayUpdateGatewayAttributes.
        :type: SiteObject
        """

        self._site = site

    @property
    def ipsecGatewayDetail(self):
        """
        Gets the ipsecGatewayDetail of this GatewayUpdateGatewayAttributes.

        :return: The ipsecGatewayDetail of this GatewayUpdateGatewayAttributes.
        :rtype: GatewayupdateGatewayAttributesIpsecGatewayDetail
        """
        return self._ipsecGatewayDetail

    @ipsecGatewayDetail.setter
    def ipsecGatewayDetail(self, ipsecGatewayDetail):
        """
        Sets the ipsecGatewayDetail of this GatewayUpdateGatewayAttributes.

        :param ipsecGatewayDetail: The ipsecGatewayDetail of this GatewayUpdateGatewayAttributes.
        :type: GatewayupdateGatewayAttributesIpsecGatewayDetail
        """

        self._ipsecGatewayDetail = ipsecGatewayDetail

    @property
    def handOffDetail(self):
        """
        Gets the handOffDetail of this GatewayUpdateGatewayAttributes.

        :return: The handOffDetail of this GatewayUpdateGatewayAttributes.
        :rtype: GatewayHandoffDetail
        """
        return self._handOffDetail

    @handOffDetail.setter
    def handOffDetail(self, handOffDetail):
        """
        Sets the handOffDetail of this GatewayUpdateGatewayAttributes.

        :param handOffDetail: The handOffDetail of this GatewayUpdateGatewayAttributes.
        :type: GatewayHandoffDetail
        """

        self._handOffDetail = handOffDetail

    @property
    def roles(self):
        """
        Gets the roles of this GatewayUpdateGatewayAttributes.

        :return: The roles of this GatewayUpdateGatewayAttributes.
        :rtype: GatewayRolesObject
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this GatewayUpdateGatewayAttributes.

        :param roles: The roles of this GatewayUpdateGatewayAttributes.
        :type: GatewayRolesObject
        """

        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayUpdateGatewayAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
