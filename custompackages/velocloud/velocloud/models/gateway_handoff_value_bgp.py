# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayHandoffValueBgp(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enabled=None, ASN=None, neighborIp=None, neighborASN=None, encryption=None):
        """
        GatewayHandoffValueBgp - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'ASN': 'str',
            'neighborIp': 'str',
            'neighborASN': 'str',
            'encryption': 'bool'
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'ASN': 'ASN',
            'neighborIp': 'neighborIp',
            'neighborASN': 'neighborASN',
            'encryption': 'encryption'
        }

        self._enabled = enabled
        self._ASN = ASN
        self._neighborIp = neighborIp
        self._neighborASN = neighborASN
        self._encryption = encryption

    @property
    def enabled(self):
        """
        Gets the enabled of this GatewayHandoffValueBgp.

        :return: The enabled of this GatewayHandoffValueBgp.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this GatewayHandoffValueBgp.

        :param enabled: The enabled of this GatewayHandoffValueBgp.
        :type: bool
        """

        self._enabled = enabled

    @property
    def ASN(self):
        """
        Gets the ASN of this GatewayHandoffValueBgp.

        :return: The ASN of this GatewayHandoffValueBgp.
        :rtype: str
        """
        return self._ASN

    @ASN.setter
    def ASN(self, ASN):
        """
        Sets the ASN of this GatewayHandoffValueBgp.

        :param ASN: The ASN of this GatewayHandoffValueBgp.
        :type: str
        """

        self._ASN = ASN

    @property
    def neighborIp(self):
        """
        Gets the neighborIp of this GatewayHandoffValueBgp.

        :return: The neighborIp of this GatewayHandoffValueBgp.
        :rtype: str
        """
        return self._neighborIp

    @neighborIp.setter
    def neighborIp(self, neighborIp):
        """
        Sets the neighborIp of this GatewayHandoffValueBgp.

        :param neighborIp: The neighborIp of this GatewayHandoffValueBgp.
        :type: str
        """

        self._neighborIp = neighborIp

    @property
    def neighborASN(self):
        """
        Gets the neighborASN of this GatewayHandoffValueBgp.

        :return: The neighborASN of this GatewayHandoffValueBgp.
        :rtype: str
        """
        return self._neighborASN

    @neighborASN.setter
    def neighborASN(self, neighborASN):
        """
        Sets the neighborASN of this GatewayHandoffValueBgp.

        :param neighborASN: The neighborASN of this GatewayHandoffValueBgp.
        :type: str
        """

        self._neighborASN = neighborASN

    @property
    def encryption(self):
        """
        Gets the encryption of this GatewayHandoffValueBgp.

        :return: The encryption of this GatewayHandoffValueBgp.
        :rtype: bool
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """
        Sets the encryption of this GatewayHandoffValueBgp.

        :param encryption: The encryption of this GatewayHandoffValueBgp.
        :type: bool
        """

        self._encryption = encryption

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayHandoffValueBgp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
