# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MonitoringGetAggregateEnterpriseEvents(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, detail=None, interval=None, filter=None):
        """
        MonitoringGetAggregateEnterpriseEvents - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'detail': 'bool',
            'interval': 'MonitoringgetAggregateEnterpriseEventsInterval',
            'filter': 'MonitoringgetAggregateEnterpriseEventsFilter'
        }

        self.attribute_map = {
            'detail': 'detail',
            'interval': 'interval',
            'filter': 'filter'
        }

        self._detail = detail
        self._interval = interval
        self._filter = filter

    @property
    def detail(self):
        """
        Gets the detail of this MonitoringGetAggregateEnterpriseEvents.

        :return: The detail of this MonitoringGetAggregateEnterpriseEvents.
        :rtype: bool
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """
        Sets the detail of this MonitoringGetAggregateEnterpriseEvents.

        :param detail: The detail of this MonitoringGetAggregateEnterpriseEvents.
        :type: bool
        """

        self._detail = detail

    @property
    def interval(self):
        """
        Gets the interval of this MonitoringGetAggregateEnterpriseEvents.

        :return: The interval of this MonitoringGetAggregateEnterpriseEvents.
        :rtype: MonitoringgetAggregateEnterpriseEventsInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this MonitoringGetAggregateEnterpriseEvents.

        :param interval: The interval of this MonitoringGetAggregateEnterpriseEvents.
        :type: MonitoringgetAggregateEnterpriseEventsInterval
        """

        self._interval = interval

    @property
    def filter(self):
        """
        Gets the filter of this MonitoringGetAggregateEnterpriseEvents.

        :return: The filter of this MonitoringGetAggregateEnterpriseEvents.
        :rtype: MonitoringgetAggregateEnterpriseEventsFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this MonitoringGetAggregateEnterpriseEvents.

        :param filter: The filter of this MonitoringGetAggregateEnterpriseEvents.
        :type: MonitoringgetAggregateEnterpriseEventsFilter
        """

        self._filter = filter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MonitoringGetAggregateEnterpriseEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
