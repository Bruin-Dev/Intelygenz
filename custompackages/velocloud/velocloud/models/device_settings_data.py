# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceSettingsData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lan=None, ospf=None, bgp=None, dns=None, authentication=None, softwareUpdate=None, radioSettings=None, netflow=None, vqm=None, snmp=None, multiSourceQos=None, models=None, vpn=None):
        """
        DeviceSettingsData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lan': 'DeviceSettingsDataLan',
            'ospf': 'DeviceSettingsDataOspf',
            'bgp': 'DeviceSettingsDataBgp',
            'dns': 'EdgeDeviceSettingsDataDns',
            'authentication': 'EdgeDeviceSettingsDataDnsPrimaryProvider',
            'softwareUpdate': 'DeviceSettingsDataSoftwareUpdate',
            'radioSettings': 'DeviceSettingsDataRadioSettings',
            'netflow': 'DeviceSettingsDataNetflow',
            'vqm': 'DeviceSettingsDataVqm',
            'snmp': 'DeviceSettingsDataSnmp',
            'multiSourceQos': 'DeviceSettingsDataMultiSourceQos',
            'models': 'DeviceSettingsDataModels',
            'vpn': 'DeviceSettingsDataVpn'
        }

        self.attribute_map = {
            'lan': 'lan',
            'ospf': 'ospf',
            'bgp': 'bgp',
            'dns': 'dns',
            'authentication': 'authentication',
            'softwareUpdate': 'softwareUpdate',
            'radioSettings': 'radioSettings',
            'netflow': 'netflow',
            'vqm': 'vqm',
            'snmp': 'snmp',
            'multiSourceQos': 'multiSourceQos',
            'models': 'models',
            'vpn': 'vpn'
        }

        self._lan = lan
        self._ospf = ospf
        self._bgp = bgp
        self._dns = dns
        self._authentication = authentication
        self._softwareUpdate = softwareUpdate
        self._radioSettings = radioSettings
        self._netflow = netflow
        self._vqm = vqm
        self._snmp = snmp
        self._multiSourceQos = multiSourceQos
        self._models = models
        self._vpn = vpn

    @property
    def lan(self):
        """
        Gets the lan of this DeviceSettingsData.

        :return: The lan of this DeviceSettingsData.
        :rtype: DeviceSettingsDataLan
        """
        return self._lan

    @lan.setter
    def lan(self, lan):
        """
        Sets the lan of this DeviceSettingsData.

        :param lan: The lan of this DeviceSettingsData.
        :type: DeviceSettingsDataLan
        """

        self._lan = lan

    @property
    def ospf(self):
        """
        Gets the ospf of this DeviceSettingsData.

        :return: The ospf of this DeviceSettingsData.
        :rtype: DeviceSettingsDataOspf
        """
        return self._ospf

    @ospf.setter
    def ospf(self, ospf):
        """
        Sets the ospf of this DeviceSettingsData.

        :param ospf: The ospf of this DeviceSettingsData.
        :type: DeviceSettingsDataOspf
        """

        self._ospf = ospf

    @property
    def bgp(self):
        """
        Gets the bgp of this DeviceSettingsData.

        :return: The bgp of this DeviceSettingsData.
        :rtype: DeviceSettingsDataBgp
        """
        return self._bgp

    @bgp.setter
    def bgp(self, bgp):
        """
        Sets the bgp of this DeviceSettingsData.

        :param bgp: The bgp of this DeviceSettingsData.
        :type: DeviceSettingsDataBgp
        """

        self._bgp = bgp

    @property
    def dns(self):
        """
        Gets the dns of this DeviceSettingsData.

        :return: The dns of this DeviceSettingsData.
        :rtype: EdgeDeviceSettingsDataDns
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """
        Sets the dns of this DeviceSettingsData.

        :param dns: The dns of this DeviceSettingsData.
        :type: EdgeDeviceSettingsDataDns
        """

        self._dns = dns

    @property
    def authentication(self):
        """
        Gets the authentication of this DeviceSettingsData.

        :return: The authentication of this DeviceSettingsData.
        :rtype: EdgeDeviceSettingsDataDnsPrimaryProvider
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """
        Sets the authentication of this DeviceSettingsData.

        :param authentication: The authentication of this DeviceSettingsData.
        :type: EdgeDeviceSettingsDataDnsPrimaryProvider
        """

        self._authentication = authentication

    @property
    def softwareUpdate(self):
        """
        Gets the softwareUpdate of this DeviceSettingsData.

        :return: The softwareUpdate of this DeviceSettingsData.
        :rtype: DeviceSettingsDataSoftwareUpdate
        """
        return self._softwareUpdate

    @softwareUpdate.setter
    def softwareUpdate(self, softwareUpdate):
        """
        Sets the softwareUpdate of this DeviceSettingsData.

        :param softwareUpdate: The softwareUpdate of this DeviceSettingsData.
        :type: DeviceSettingsDataSoftwareUpdate
        """

        self._softwareUpdate = softwareUpdate

    @property
    def radioSettings(self):
        """
        Gets the radioSettings of this DeviceSettingsData.

        :return: The radioSettings of this DeviceSettingsData.
        :rtype: DeviceSettingsDataRadioSettings
        """
        return self._radioSettings

    @radioSettings.setter
    def radioSettings(self, radioSettings):
        """
        Sets the radioSettings of this DeviceSettingsData.

        :param radioSettings: The radioSettings of this DeviceSettingsData.
        :type: DeviceSettingsDataRadioSettings
        """

        self._radioSettings = radioSettings

    @property
    def netflow(self):
        """
        Gets the netflow of this DeviceSettingsData.

        :return: The netflow of this DeviceSettingsData.
        :rtype: DeviceSettingsDataNetflow
        """
        return self._netflow

    @netflow.setter
    def netflow(self, netflow):
        """
        Sets the netflow of this DeviceSettingsData.

        :param netflow: The netflow of this DeviceSettingsData.
        :type: DeviceSettingsDataNetflow
        """

        self._netflow = netflow

    @property
    def vqm(self):
        """
        Gets the vqm of this DeviceSettingsData.

        :return: The vqm of this DeviceSettingsData.
        :rtype: DeviceSettingsDataVqm
        """
        return self._vqm

    @vqm.setter
    def vqm(self, vqm):
        """
        Sets the vqm of this DeviceSettingsData.

        :param vqm: The vqm of this DeviceSettingsData.
        :type: DeviceSettingsDataVqm
        """

        self._vqm = vqm

    @property
    def snmp(self):
        """
        Gets the snmp of this DeviceSettingsData.

        :return: The snmp of this DeviceSettingsData.
        :rtype: DeviceSettingsDataSnmp
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """
        Sets the snmp of this DeviceSettingsData.

        :param snmp: The snmp of this DeviceSettingsData.
        :type: DeviceSettingsDataSnmp
        """

        self._snmp = snmp

    @property
    def multiSourceQos(self):
        """
        Gets the multiSourceQos of this DeviceSettingsData.

        :return: The multiSourceQos of this DeviceSettingsData.
        :rtype: DeviceSettingsDataMultiSourceQos
        """
        return self._multiSourceQos

    @multiSourceQos.setter
    def multiSourceQos(self, multiSourceQos):
        """
        Sets the multiSourceQos of this DeviceSettingsData.

        :param multiSourceQos: The multiSourceQos of this DeviceSettingsData.
        :type: DeviceSettingsDataMultiSourceQos
        """

        self._multiSourceQos = multiSourceQos

    @property
    def models(self):
        """
        Gets the models of this DeviceSettingsData.

        :return: The models of this DeviceSettingsData.
        :rtype: DeviceSettingsDataModels
        """
        return self._models

    @models.setter
    def models(self, models):
        """
        Sets the models of this DeviceSettingsData.

        :param models: The models of this DeviceSettingsData.
        :type: DeviceSettingsDataModels
        """

        self._models = models

    @property
    def vpn(self):
        """
        Gets the vpn of this DeviceSettingsData.

        :return: The vpn of this DeviceSettingsData.
        :rtype: DeviceSettingsDataVpn
        """
        return self._vpn

    @vpn.setter
    def vpn(self, vpn):
        """
        Sets the vpn of this DeviceSettingsData.

        :param vpn: The vpn of this DeviceSettingsData.
        :type: DeviceSettingsDataVpn
        """

        self._vpn = vpn

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceSettingsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
