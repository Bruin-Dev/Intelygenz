# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FirewallRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, data=None, deactivated=None, edgeLogicalId=None, enterpriseId=None, id=None, logicalId=None, name=None, type=None):
        """
        FirewallRule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'data': 'str',
            'deactivated': 'str',
            'edgeLogicalId': 'str',
            'enterpriseId': 'int',
            'id': 'int',
            'logicalId': 'str',
            'name': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'data': 'data',
            'deactivated': 'deactivated',
            'edgeLogicalId': 'edgeLogicalId',
            'enterpriseId': 'enterpriseId',
            'id': 'id',
            'logicalId': 'logicalId',
            'name': 'name',
            'type': 'type'
        }

        self._created = created
        self._data = data
        self._deactivated = deactivated
        self._edgeLogicalId = edgeLogicalId
        self._enterpriseId = enterpriseId
        self._id = id
        self._logicalId = logicalId
        self._name = name
        self._type = type

    @property
    def created(self):
        """
        Gets the created of this FirewallRule.

        :return: The created of this FirewallRule.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this FirewallRule.

        :param created: The created of this FirewallRule.
        :type: datetime
        """

        self._created = created

    @property
    def data(self):
        """
        Gets the data of this FirewallRule.

        :return: The data of this FirewallRule.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this FirewallRule.

        :param data: The data of this FirewallRule.
        :type: str
        """

        self._data = data

    @property
    def deactivated(self):
        """
        Gets the deactivated of this FirewallRule.

        :return: The deactivated of this FirewallRule.
        :rtype: str
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """
        Sets the deactivated of this FirewallRule.

        :param deactivated: The deactivated of this FirewallRule.
        :type: str
        """

        self._deactivated = deactivated

    @property
    def edgeLogicalId(self):
        """
        Gets the edgeLogicalId of this FirewallRule.

        :return: The edgeLogicalId of this FirewallRule.
        :rtype: str
        """
        return self._edgeLogicalId

    @edgeLogicalId.setter
    def edgeLogicalId(self, edgeLogicalId):
        """
        Sets the edgeLogicalId of this FirewallRule.

        :param edgeLogicalId: The edgeLogicalId of this FirewallRule.
        :type: str
        """

        self._edgeLogicalId = edgeLogicalId

    @property
    def enterpriseId(self):
        """
        Gets the enterpriseId of this FirewallRule.

        :return: The enterpriseId of this FirewallRule.
        :rtype: int
        """
        return self._enterpriseId

    @enterpriseId.setter
    def enterpriseId(self, enterpriseId):
        """
        Sets the enterpriseId of this FirewallRule.

        :param enterpriseId: The enterpriseId of this FirewallRule.
        :type: int
        """

        self._enterpriseId = enterpriseId

    @property
    def id(self):
        """
        Gets the id of this FirewallRule.

        :return: The id of this FirewallRule.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FirewallRule.

        :param id: The id of this FirewallRule.
        :type: int
        """

        self._id = id

    @property
    def logicalId(self):
        """
        Gets the logicalId of this FirewallRule.

        :return: The logicalId of this FirewallRule.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this FirewallRule.

        :param logicalId: The logicalId of this FirewallRule.
        :type: str
        """

        self._logicalId = logicalId

    @property
    def name(self):
        """
        Gets the name of this FirewallRule.

        :return: The name of this FirewallRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FirewallRule.

        :param name: The name of this FirewallRule.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this FirewallRule.

        :return: The type of this FirewallRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FirewallRule.

        :param type: The type of this FirewallRule.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FirewallRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
