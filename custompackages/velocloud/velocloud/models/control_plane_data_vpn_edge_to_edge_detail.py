# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ControlPlaneDataVpnEdgeToEdgeDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dynamic=None, encryptionProtocol=None, profileIsolation=None, useCloudGateway=None, vpnHubs=None, autoSelectVpnHubs=None):
        """
        ControlPlaneDataVpnEdgeToEdgeDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'dynamic': 'ControlPlaneDataVpnEdgeToEdgeDetailDynamic',
            'encryptionProtocol': 'str',
            'profileIsolation': 'ControlPlaneDataVpnEdgeToEdgeDetailProfileIsolation',
            'useCloudGateway': 'bool',
            'vpnHubs': 'list[object]',
            'autoSelectVpnHubs': 'bool'
        }

        self.attribute_map = {
            'dynamic': 'dynamic',
            'encryptionProtocol': 'encryptionProtocol',
            'profileIsolation': 'profileIsolation',
            'useCloudGateway': 'useCloudGateway',
            'vpnHubs': 'vpnHubs',
            'autoSelectVpnHubs': 'autoSelectVpnHubs'
        }

        self._dynamic = dynamic
        self._encryptionProtocol = encryptionProtocol
        self._profileIsolation = profileIsolation
        self._useCloudGateway = useCloudGateway
        self._vpnHubs = vpnHubs
        self._autoSelectVpnHubs = autoSelectVpnHubs

    @property
    def dynamic(self):
        """
        Gets the dynamic of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :return: The dynamic of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :rtype: ControlPlaneDataVpnEdgeToEdgeDetailDynamic
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """
        Sets the dynamic of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :param dynamic: The dynamic of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :type: ControlPlaneDataVpnEdgeToEdgeDetailDynamic
        """

        self._dynamic = dynamic

    @property
    def encryptionProtocol(self):
        """
        Gets the encryptionProtocol of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :return: The encryptionProtocol of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :rtype: str
        """
        return self._encryptionProtocol

    @encryptionProtocol.setter
    def encryptionProtocol(self, encryptionProtocol):
        """
        Sets the encryptionProtocol of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :param encryptionProtocol: The encryptionProtocol of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :type: str
        """

        self._encryptionProtocol = encryptionProtocol

    @property
    def profileIsolation(self):
        """
        Gets the profileIsolation of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :return: The profileIsolation of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :rtype: ControlPlaneDataVpnEdgeToEdgeDetailProfileIsolation
        """
        return self._profileIsolation

    @profileIsolation.setter
    def profileIsolation(self, profileIsolation):
        """
        Sets the profileIsolation of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :param profileIsolation: The profileIsolation of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :type: ControlPlaneDataVpnEdgeToEdgeDetailProfileIsolation
        """

        self._profileIsolation = profileIsolation

    @property
    def useCloudGateway(self):
        """
        Gets the useCloudGateway of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :return: The useCloudGateway of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :rtype: bool
        """
        return self._useCloudGateway

    @useCloudGateway.setter
    def useCloudGateway(self, useCloudGateway):
        """
        Sets the useCloudGateway of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :param useCloudGateway: The useCloudGateway of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :type: bool
        """

        self._useCloudGateway = useCloudGateway

    @property
    def vpnHubs(self):
        """
        Gets the vpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :return: The vpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :rtype: list[object]
        """
        return self._vpnHubs

    @vpnHubs.setter
    def vpnHubs(self, vpnHubs):
        """
        Sets the vpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :param vpnHubs: The vpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :type: list[object]
        """

        self._vpnHubs = vpnHubs

    @property
    def autoSelectVpnHubs(self):
        """
        Gets the autoSelectVpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :return: The autoSelectVpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :rtype: bool
        """
        return self._autoSelectVpnHubs

    @autoSelectVpnHubs.setter
    def autoSelectVpnHubs(self, autoSelectVpnHubs):
        """
        Sets the autoSelectVpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.

        :param autoSelectVpnHubs: The autoSelectVpnHubs of this ControlPlaneDataVpnEdgeToEdgeDetail.
        :type: bool
        """

        self._autoSelectVpnHubs = autoSelectVpnHubs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ControlPlaneDataVpnEdgeToEdgeDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
