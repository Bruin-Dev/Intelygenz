# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ControlPlaneDataGatewaySelection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mode=None, primary=None, primaryDetail=None, secondary=None, secondaryDetail=None, super=None, superDetail=None):
        """
        ControlPlaneDataGatewaySelection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mode': 'str',
            'primary': 'str',
            'primaryDetail': 'ControlPlaneDataGatewaySelectionPrimaryDetail',
            'secondary': 'str',
            'secondaryDetail': 'ControlPlaneDataGatewaySelectionPrimaryDetail',
            'super': 'str',
            'superDetail': 'ControlPlaneDataGatewaySelectionPrimaryDetail'
        }

        self.attribute_map = {
            'mode': 'mode',
            'primary': 'primary',
            'primaryDetail': 'primaryDetail',
            'secondary': 'secondary',
            'secondaryDetail': 'secondaryDetail',
            'super': 'super',
            'superDetail': 'superDetail'
        }

        self._mode = mode
        self._primary = primary
        self._primaryDetail = primaryDetail
        self._secondary = secondary
        self._secondaryDetail = secondaryDetail
        self._super = super
        self._superDetail = superDetail

    @property
    def mode(self):
        """
        Gets the mode of this ControlPlaneDataGatewaySelection.

        :return: The mode of this ControlPlaneDataGatewaySelection.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this ControlPlaneDataGatewaySelection.

        :param mode: The mode of this ControlPlaneDataGatewaySelection.
        :type: str
        """

        self._mode = mode

    @property
    def primary(self):
        """
        Gets the primary of this ControlPlaneDataGatewaySelection.

        :return: The primary of this ControlPlaneDataGatewaySelection.
        :rtype: str
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """
        Sets the primary of this ControlPlaneDataGatewaySelection.

        :param primary: The primary of this ControlPlaneDataGatewaySelection.
        :type: str
        """

        self._primary = primary

    @property
    def primaryDetail(self):
        """
        Gets the primaryDetail of this ControlPlaneDataGatewaySelection.

        :return: The primaryDetail of this ControlPlaneDataGatewaySelection.
        :rtype: ControlPlaneDataGatewaySelectionPrimaryDetail
        """
        return self._primaryDetail

    @primaryDetail.setter
    def primaryDetail(self, primaryDetail):
        """
        Sets the primaryDetail of this ControlPlaneDataGatewaySelection.

        :param primaryDetail: The primaryDetail of this ControlPlaneDataGatewaySelection.
        :type: ControlPlaneDataGatewaySelectionPrimaryDetail
        """

        self._primaryDetail = primaryDetail

    @property
    def secondary(self):
        """
        Gets the secondary of this ControlPlaneDataGatewaySelection.

        :return: The secondary of this ControlPlaneDataGatewaySelection.
        :rtype: str
        """
        return self._secondary

    @secondary.setter
    def secondary(self, secondary):
        """
        Sets the secondary of this ControlPlaneDataGatewaySelection.

        :param secondary: The secondary of this ControlPlaneDataGatewaySelection.
        :type: str
        """

        self._secondary = secondary

    @property
    def secondaryDetail(self):
        """
        Gets the secondaryDetail of this ControlPlaneDataGatewaySelection.

        :return: The secondaryDetail of this ControlPlaneDataGatewaySelection.
        :rtype: ControlPlaneDataGatewaySelectionPrimaryDetail
        """
        return self._secondaryDetail

    @secondaryDetail.setter
    def secondaryDetail(self, secondaryDetail):
        """
        Sets the secondaryDetail of this ControlPlaneDataGatewaySelection.

        :param secondaryDetail: The secondaryDetail of this ControlPlaneDataGatewaySelection.
        :type: ControlPlaneDataGatewaySelectionPrimaryDetail
        """

        self._secondaryDetail = secondaryDetail

    @property
    def super(self):
        """
        Gets the super of this ControlPlaneDataGatewaySelection.

        :return: The super of this ControlPlaneDataGatewaySelection.
        :rtype: str
        """
        return self._super

    @super.setter
    def super(self, super):
        """
        Sets the super of this ControlPlaneDataGatewaySelection.

        :param super: The super of this ControlPlaneDataGatewaySelection.
        :type: str
        """

        self._super = super

    @property
    def superDetail(self):
        """
        Gets the superDetail of this ControlPlaneDataGatewaySelection.

        :return: The superDetail of this ControlPlaneDataGatewaySelection.
        :rtype: ControlPlaneDataGatewaySelectionPrimaryDetail
        """
        return self._superDetail

    @superDetail.setter
    def superDetail(self, superDetail):
        """
        Sets the superDetail of this ControlPlaneDataGatewaySelection.

        :param superDetail: The superDetail of this ControlPlaneDataGatewaySelection.
        :type: ControlPlaneDataGatewaySelectionPrimaryDetail
        """

        self._superDetail = superDetail

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ControlPlaneDataGatewaySelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
