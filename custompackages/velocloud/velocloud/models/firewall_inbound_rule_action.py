# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FirewallInboundRuleAction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, nat=None, interface=None, subinterfaceId=None):
        """
        FirewallInboundRuleAction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'nat': 'FirewallInboundRuleActionNat',
            'interface': 'str',
            'subinterfaceId': 'int'
        }

        self.attribute_map = {
            'type': 'type',
            'nat': 'nat',
            'interface': 'interface',
            'subinterfaceId': 'subinterfaceId'
        }

        self._type = type
        self._nat = nat
        self._interface = interface
        self._subinterfaceId = subinterfaceId

    @property
    def type(self):
        """
        Gets the type of this FirewallInboundRuleAction.

        :return: The type of this FirewallInboundRuleAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FirewallInboundRuleAction.

        :param type: The type of this FirewallInboundRuleAction.
        :type: str
        """

        self._type = type

    @property
    def nat(self):
        """
        Gets the nat of this FirewallInboundRuleAction.

        :return: The nat of this FirewallInboundRuleAction.
        :rtype: FirewallInboundRuleActionNat
        """
        return self._nat

    @nat.setter
    def nat(self, nat):
        """
        Sets the nat of this FirewallInboundRuleAction.

        :param nat: The nat of this FirewallInboundRuleAction.
        :type: FirewallInboundRuleActionNat
        """

        self._nat = nat

    @property
    def interface(self):
        """
        Gets the interface of this FirewallInboundRuleAction.
        The name of the interface from which traffic should be forwarded

        :return: The interface of this FirewallInboundRuleAction.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this FirewallInboundRuleAction.
        The name of the interface from which traffic should be forwarded

        :param interface: The interface of this FirewallInboundRuleAction.
        :type: str
        """

        self._interface = interface

    @property
    def subinterfaceId(self):
        """
        Gets the subinterfaceId of this FirewallInboundRuleAction.

        :return: The subinterfaceId of this FirewallInboundRuleAction.
        :rtype: int
        """
        return self._subinterfaceId

    @subinterfaceId.setter
    def subinterfaceId(self, subinterfaceId):
        """
        Sets the subinterfaceId of this FirewallInboundRuleAction.

        :param subinterfaceId: The subinterfaceId of this FirewallInboundRuleAction.
        :type: int
        """

        self._subinterfaceId = subinterfaceId

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FirewallInboundRuleAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
