# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigEdgeBgpNeighbor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, neighborAS=None, neighborIp=None, neighborTag=None, inboundFilter=None, outboundFilter=None, allowAS=None, connect=None, defaultRoute=None, holdtime=None, keepalive=None):
        """
        ConfigEdgeBgpNeighbor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'neighborAS': 'str',
            'neighborIp': 'str',
            'neighborTag': 'str',
            'inboundFilter': 'ConfigEdgeBgpFilterSet',
            'outboundFilter': 'ConfigEdgeBgpFilterSet',
            'allowAS': 'bool',
            'connect': 'str',
            'defaultRoute': 'bool',
            'holdtime': 'str',
            'keepalive': 'str'
        }

        self.attribute_map = {
            'neighborAS': 'neighborAS',
            'neighborIp': 'neighborIp',
            'neighborTag': 'neighborTag',
            'inboundFilter': 'inboundFilter',
            'outboundFilter': 'outboundFilter',
            'allowAS': 'allowAS',
            'connect': 'connect',
            'defaultRoute': 'defaultRoute',
            'holdtime': 'holdtime',
            'keepalive': 'keepalive'
        }

        self._neighborAS = neighborAS
        self._neighborIp = neighborIp
        self._neighborTag = neighborTag
        self._inboundFilter = inboundFilter
        self._outboundFilter = outboundFilter
        self._allowAS = allowAS
        self._connect = connect
        self._defaultRoute = defaultRoute
        self._holdtime = holdtime
        self._keepalive = keepalive

    @property
    def neighborAS(self):
        """
        Gets the neighborAS of this ConfigEdgeBgpNeighbor.

        :return: The neighborAS of this ConfigEdgeBgpNeighbor.
        :rtype: str
        """
        return self._neighborAS

    @neighborAS.setter
    def neighborAS(self, neighborAS):
        """
        Sets the neighborAS of this ConfigEdgeBgpNeighbor.

        :param neighborAS: The neighborAS of this ConfigEdgeBgpNeighbor.
        :type: str
        """

        self._neighborAS = neighborAS

    @property
    def neighborIp(self):
        """
        Gets the neighborIp of this ConfigEdgeBgpNeighbor.

        :return: The neighborIp of this ConfigEdgeBgpNeighbor.
        :rtype: str
        """
        return self._neighborIp

    @neighborIp.setter
    def neighborIp(self, neighborIp):
        """
        Sets the neighborIp of this ConfigEdgeBgpNeighbor.

        :param neighborIp: The neighborIp of this ConfigEdgeBgpNeighbor.
        :type: str
        """

        self._neighborIp = neighborIp

    @property
    def neighborTag(self):
        """
        Gets the neighborTag of this ConfigEdgeBgpNeighbor.

        :return: The neighborTag of this ConfigEdgeBgpNeighbor.
        :rtype: str
        """
        return self._neighborTag

    @neighborTag.setter
    def neighborTag(self, neighborTag):
        """
        Sets the neighborTag of this ConfigEdgeBgpNeighbor.

        :param neighborTag: The neighborTag of this ConfigEdgeBgpNeighbor.
        :type: str
        """

        self._neighborTag = neighborTag

    @property
    def inboundFilter(self):
        """
        Gets the inboundFilter of this ConfigEdgeBgpNeighbor.

        :return: The inboundFilter of this ConfigEdgeBgpNeighbor.
        :rtype: ConfigEdgeBgpFilterSet
        """
        return self._inboundFilter

    @inboundFilter.setter
    def inboundFilter(self, inboundFilter):
        """
        Sets the inboundFilter of this ConfigEdgeBgpNeighbor.

        :param inboundFilter: The inboundFilter of this ConfigEdgeBgpNeighbor.
        :type: ConfigEdgeBgpFilterSet
        """

        self._inboundFilter = inboundFilter

    @property
    def outboundFilter(self):
        """
        Gets the outboundFilter of this ConfigEdgeBgpNeighbor.

        :return: The outboundFilter of this ConfigEdgeBgpNeighbor.
        :rtype: ConfigEdgeBgpFilterSet
        """
        return self._outboundFilter

    @outboundFilter.setter
    def outboundFilter(self, outboundFilter):
        """
        Sets the outboundFilter of this ConfigEdgeBgpNeighbor.

        :param outboundFilter: The outboundFilter of this ConfigEdgeBgpNeighbor.
        :type: ConfigEdgeBgpFilterSet
        """

        self._outboundFilter = outboundFilter

    @property
    def allowAS(self):
        """
        Gets the allowAS of this ConfigEdgeBgpNeighbor.

        :return: The allowAS of this ConfigEdgeBgpNeighbor.
        :rtype: bool
        """
        return self._allowAS

    @allowAS.setter
    def allowAS(self, allowAS):
        """
        Sets the allowAS of this ConfigEdgeBgpNeighbor.

        :param allowAS: The allowAS of this ConfigEdgeBgpNeighbor.
        :type: bool
        """

        self._allowAS = allowAS

    @property
    def connect(self):
        """
        Gets the connect of this ConfigEdgeBgpNeighbor.

        :return: The connect of this ConfigEdgeBgpNeighbor.
        :rtype: str
        """
        return self._connect

    @connect.setter
    def connect(self, connect):
        """
        Sets the connect of this ConfigEdgeBgpNeighbor.

        :param connect: The connect of this ConfigEdgeBgpNeighbor.
        :type: str
        """

        self._connect = connect

    @property
    def defaultRoute(self):
        """
        Gets the defaultRoute of this ConfigEdgeBgpNeighbor.

        :return: The defaultRoute of this ConfigEdgeBgpNeighbor.
        :rtype: bool
        """
        return self._defaultRoute

    @defaultRoute.setter
    def defaultRoute(self, defaultRoute):
        """
        Sets the defaultRoute of this ConfigEdgeBgpNeighbor.

        :param defaultRoute: The defaultRoute of this ConfigEdgeBgpNeighbor.
        :type: bool
        """

        self._defaultRoute = defaultRoute

    @property
    def holdtime(self):
        """
        Gets the holdtime of this ConfigEdgeBgpNeighbor.

        :return: The holdtime of this ConfigEdgeBgpNeighbor.
        :rtype: str
        """
        return self._holdtime

    @holdtime.setter
    def holdtime(self, holdtime):
        """
        Sets the holdtime of this ConfigEdgeBgpNeighbor.

        :param holdtime: The holdtime of this ConfigEdgeBgpNeighbor.
        :type: str
        """

        self._holdtime = holdtime

    @property
    def keepalive(self):
        """
        Gets the keepalive of this ConfigEdgeBgpNeighbor.

        :return: The keepalive of this ConfigEdgeBgpNeighbor.
        :rtype: str
        """
        return self._keepalive

    @keepalive.setter
    def keepalive(self, keepalive):
        """
        Sets the keepalive of this ConfigEdgeBgpNeighbor.

        :param keepalive: The keepalive of this ConfigEdgeBgpNeighbor.
        :type: str
        """

        self._keepalive = keepalive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigEdgeBgpNeighbor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
