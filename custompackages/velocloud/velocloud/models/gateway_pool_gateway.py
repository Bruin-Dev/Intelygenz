# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayPoolGateway(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, gatewayPoolAssocId=None, poolName=None, id=None, created=None, networkId=None, enterpriseProxyId=None, siteId=None, activationKey=None, activationState=None, activationTime=None, softwareVersion=None, buildNumber=None, utilization=None, utilizationDetail=None, connectedEdges=None, connectedEdgeList=None, deviceId=None, logicalId=None, name=None, gatewayState=None, alertsEnabled=None, description=None, dnsName=None, isLoadBalanced=None, privateIpAddress=None, ipAddress=None, lastContact=None, systemUpSince=None, serviceUpSince=None, serviceState=None, endpointPkiMode=None, handOffDetail=None, ipsecGatewayDetail=None, modified=None):
        """
        GatewayPoolGateway - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'gatewayPoolAssocId': 'int',
            'poolName': 'str',
            'id': 'int',
            'created': 'datetime',
            'networkId': 'int',
            'enterpriseProxyId': 'int',
            'siteId': 'int',
            'activationKey': 'str',
            'activationState': 'str',
            'activationTime': 'datetime',
            'softwareVersion': 'str',
            'buildNumber': 'str',
            'utilization': 'float',
            'utilizationDetail': 'GatewayPoolGatewayUtilizationDetail',
            'connectedEdges': 'int',
            'connectedEdgeList': 'list[GatewayPoolGatewayConnectedEdgeList]',
            'deviceId': 'str',
            'logicalId': 'str',
            'name': 'str',
            'gatewayState': 'str',
            'alertsEnabled': 'int',
            'description': 'str',
            'dnsName': 'str',
            'isLoadBalanced': 'int',
            'privateIpAddress': 'str',
            'ipAddress': 'str',
            'lastContact': 'datetime',
            'systemUpSince': 'datetime',
            'serviceUpSince': 'datetime',
            'serviceState': 'str',
            'endpointPkiMode': 'str',
            'handOffDetail': 'GatewayHandoffDetail',
            'ipsecGatewayDetail': 'GatewayPoolGatewayIpsecGatewayDetail',
            'modified': 'datetime'
        }

        self.attribute_map = {
            'gatewayPoolAssocId': 'gatewayPoolAssocId',
            'poolName': 'poolName',
            'id': 'id',
            'created': 'created',
            'networkId': 'networkId',
            'enterpriseProxyId': 'enterpriseProxyId',
            'siteId': 'siteId',
            'activationKey': 'activationKey',
            'activationState': 'activationState',
            'activationTime': 'activationTime',
            'softwareVersion': 'softwareVersion',
            'buildNumber': 'buildNumber',
            'utilization': 'utilization',
            'utilizationDetail': 'utilizationDetail',
            'connectedEdges': 'connectedEdges',
            'connectedEdgeList': 'connectedEdgeList',
            'deviceId': 'deviceId',
            'logicalId': 'logicalId',
            'name': 'name',
            'gatewayState': 'gatewayState',
            'alertsEnabled': 'alertsEnabled',
            'description': 'description',
            'dnsName': 'dnsName',
            'isLoadBalanced': 'isLoadBalanced',
            'privateIpAddress': 'privateIpAddress',
            'ipAddress': 'ipAddress',
            'lastContact': 'lastContact',
            'systemUpSince': 'systemUpSince',
            'serviceUpSince': 'serviceUpSince',
            'serviceState': 'serviceState',
            'endpointPkiMode': 'endpointPkiMode',
            'handOffDetail': 'handOffDetail',
            'ipsecGatewayDetail': 'ipsecGatewayDetail',
            'modified': 'modified'
        }

        self._gatewayPoolAssocId = gatewayPoolAssocId
        self._poolName = poolName
        self._id = id
        self._created = created
        self._networkId = networkId
        self._enterpriseProxyId = enterpriseProxyId
        self._siteId = siteId
        self._activationKey = activationKey
        self._activationState = activationState
        self._activationTime = activationTime
        self._softwareVersion = softwareVersion
        self._buildNumber = buildNumber
        self._utilization = utilization
        self._utilizationDetail = utilizationDetail
        self._connectedEdges = connectedEdges
        self._connectedEdgeList = connectedEdgeList
        self._deviceId = deviceId
        self._logicalId = logicalId
        self._name = name
        self._gatewayState = gatewayState
        self._alertsEnabled = alertsEnabled
        self._description = description
        self._dnsName = dnsName
        self._isLoadBalanced = isLoadBalanced
        self._privateIpAddress = privateIpAddress
        self._ipAddress = ipAddress
        self._lastContact = lastContact
        self._systemUpSince = systemUpSince
        self._serviceUpSince = serviceUpSince
        self._serviceState = serviceState
        self._endpointPkiMode = endpointPkiMode
        self._handOffDetail = handOffDetail
        self._ipsecGatewayDetail = ipsecGatewayDetail
        self._modified = modified

    @property
    def gatewayPoolAssocId(self):
        """
        Gets the gatewayPoolAssocId of this GatewayPoolGateway.

        :return: The gatewayPoolAssocId of this GatewayPoolGateway.
        :rtype: int
        """
        return self._gatewayPoolAssocId

    @gatewayPoolAssocId.setter
    def gatewayPoolAssocId(self, gatewayPoolAssocId):
        """
        Sets the gatewayPoolAssocId of this GatewayPoolGateway.

        :param gatewayPoolAssocId: The gatewayPoolAssocId of this GatewayPoolGateway.
        :type: int
        """

        self._gatewayPoolAssocId = gatewayPoolAssocId

    @property
    def poolName(self):
        """
        Gets the poolName of this GatewayPoolGateway.

        :return: The poolName of this GatewayPoolGateway.
        :rtype: str
        """
        return self._poolName

    @poolName.setter
    def poolName(self, poolName):
        """
        Sets the poolName of this GatewayPoolGateway.

        :param poolName: The poolName of this GatewayPoolGateway.
        :type: str
        """

        self._poolName = poolName

    @property
    def id(self):
        """
        Gets the id of this GatewayPoolGateway.

        :return: The id of this GatewayPoolGateway.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GatewayPoolGateway.

        :param id: The id of this GatewayPoolGateway.
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """
        Gets the created of this GatewayPoolGateway.

        :return: The created of this GatewayPoolGateway.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this GatewayPoolGateway.

        :param created: The created of this GatewayPoolGateway.
        :type: datetime
        """

        self._created = created

    @property
    def networkId(self):
        """
        Gets the networkId of this GatewayPoolGateway.

        :return: The networkId of this GatewayPoolGateway.
        :rtype: int
        """
        return self._networkId

    @networkId.setter
    def networkId(self, networkId):
        """
        Sets the networkId of this GatewayPoolGateway.

        :param networkId: The networkId of this GatewayPoolGateway.
        :type: int
        """

        self._networkId = networkId

    @property
    def enterpriseProxyId(self):
        """
        Gets the enterpriseProxyId of this GatewayPoolGateway.

        :return: The enterpriseProxyId of this GatewayPoolGateway.
        :rtype: int
        """
        return self._enterpriseProxyId

    @enterpriseProxyId.setter
    def enterpriseProxyId(self, enterpriseProxyId):
        """
        Sets the enterpriseProxyId of this GatewayPoolGateway.

        :param enterpriseProxyId: The enterpriseProxyId of this GatewayPoolGateway.
        :type: int
        """

        self._enterpriseProxyId = enterpriseProxyId

    @property
    def siteId(self):
        """
        Gets the siteId of this GatewayPoolGateway.

        :return: The siteId of this GatewayPoolGateway.
        :rtype: int
        """
        return self._siteId

    @siteId.setter
    def siteId(self, siteId):
        """
        Sets the siteId of this GatewayPoolGateway.

        :param siteId: The siteId of this GatewayPoolGateway.
        :type: int
        """

        self._siteId = siteId

    @property
    def activationKey(self):
        """
        Gets the activationKey of this GatewayPoolGateway.

        :return: The activationKey of this GatewayPoolGateway.
        :rtype: str
        """
        return self._activationKey

    @activationKey.setter
    def activationKey(self, activationKey):
        """
        Sets the activationKey of this GatewayPoolGateway.

        :param activationKey: The activationKey of this GatewayPoolGateway.
        :type: str
        """

        self._activationKey = activationKey

    @property
    def activationState(self):
        """
        Gets the activationState of this GatewayPoolGateway.

        :return: The activationState of this GatewayPoolGateway.
        :rtype: str
        """
        return self._activationState

    @activationState.setter
    def activationState(self, activationState):
        """
        Sets the activationState of this GatewayPoolGateway.

        :param activationState: The activationState of this GatewayPoolGateway.
        :type: str
        """

        self._activationState = activationState

    @property
    def activationTime(self):
        """
        Gets the activationTime of this GatewayPoolGateway.

        :return: The activationTime of this GatewayPoolGateway.
        :rtype: datetime
        """
        return self._activationTime

    @activationTime.setter
    def activationTime(self, activationTime):
        """
        Sets the activationTime of this GatewayPoolGateway.

        :param activationTime: The activationTime of this GatewayPoolGateway.
        :type: datetime
        """

        self._activationTime = activationTime

    @property
    def softwareVersion(self):
        """
        Gets the softwareVersion of this GatewayPoolGateway.

        :return: The softwareVersion of this GatewayPoolGateway.
        :rtype: str
        """
        return self._softwareVersion

    @softwareVersion.setter
    def softwareVersion(self, softwareVersion):
        """
        Sets the softwareVersion of this GatewayPoolGateway.

        :param softwareVersion: The softwareVersion of this GatewayPoolGateway.
        :type: str
        """

        self._softwareVersion = softwareVersion

    @property
    def buildNumber(self):
        """
        Gets the buildNumber of this GatewayPoolGateway.

        :return: The buildNumber of this GatewayPoolGateway.
        :rtype: str
        """
        return self._buildNumber

    @buildNumber.setter
    def buildNumber(self, buildNumber):
        """
        Sets the buildNumber of this GatewayPoolGateway.

        :param buildNumber: The buildNumber of this GatewayPoolGateway.
        :type: str
        """

        self._buildNumber = buildNumber

    @property
    def utilization(self):
        """
        Gets the utilization of this GatewayPoolGateway.

        :return: The utilization of this GatewayPoolGateway.
        :rtype: float
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """
        Sets the utilization of this GatewayPoolGateway.

        :param utilization: The utilization of this GatewayPoolGateway.
        :type: float
        """

        self._utilization = utilization

    @property
    def utilizationDetail(self):
        """
        Gets the utilizationDetail of this GatewayPoolGateway.

        :return: The utilizationDetail of this GatewayPoolGateway.
        :rtype: GatewayPoolGatewayUtilizationDetail
        """
        return self._utilizationDetail

    @utilizationDetail.setter
    def utilizationDetail(self, utilizationDetail):
        """
        Sets the utilizationDetail of this GatewayPoolGateway.

        :param utilizationDetail: The utilizationDetail of this GatewayPoolGateway.
        :type: GatewayPoolGatewayUtilizationDetail
        """

        self._utilizationDetail = utilizationDetail

    @property
    def connectedEdges(self):
        """
        Gets the connectedEdges of this GatewayPoolGateway.

        :return: The connectedEdges of this GatewayPoolGateway.
        :rtype: int
        """
        return self._connectedEdges

    @connectedEdges.setter
    def connectedEdges(self, connectedEdges):
        """
        Sets the connectedEdges of this GatewayPoolGateway.

        :param connectedEdges: The connectedEdges of this GatewayPoolGateway.
        :type: int
        """

        self._connectedEdges = connectedEdges

    @property
    def connectedEdgeList(self):
        """
        Gets the connectedEdgeList of this GatewayPoolGateway.

        :return: The connectedEdgeList of this GatewayPoolGateway.
        :rtype: list[GatewayPoolGatewayConnectedEdgeList]
        """
        return self._connectedEdgeList

    @connectedEdgeList.setter
    def connectedEdgeList(self, connectedEdgeList):
        """
        Sets the connectedEdgeList of this GatewayPoolGateway.

        :param connectedEdgeList: The connectedEdgeList of this GatewayPoolGateway.
        :type: list[GatewayPoolGatewayConnectedEdgeList]
        """

        self._connectedEdgeList = connectedEdgeList

    @property
    def deviceId(self):
        """
        Gets the deviceId of this GatewayPoolGateway.

        :return: The deviceId of this GatewayPoolGateway.
        :rtype: str
        """
        return self._deviceId

    @deviceId.setter
    def deviceId(self, deviceId):
        """
        Sets the deviceId of this GatewayPoolGateway.

        :param deviceId: The deviceId of this GatewayPoolGateway.
        :type: str
        """

        self._deviceId = deviceId

    @property
    def logicalId(self):
        """
        Gets the logicalId of this GatewayPoolGateway.

        :return: The logicalId of this GatewayPoolGateway.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this GatewayPoolGateway.

        :param logicalId: The logicalId of this GatewayPoolGateway.
        :type: str
        """

        self._logicalId = logicalId

    @property
    def name(self):
        """
        Gets the name of this GatewayPoolGateway.

        :return: The name of this GatewayPoolGateway.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GatewayPoolGateway.

        :param name: The name of this GatewayPoolGateway.
        :type: str
        """

        self._name = name

    @property
    def gatewayState(self):
        """
        Gets the gatewayState of this GatewayPoolGateway.

        :return: The gatewayState of this GatewayPoolGateway.
        :rtype: str
        """
        return self._gatewayState

    @gatewayState.setter
    def gatewayState(self, gatewayState):
        """
        Sets the gatewayState of this GatewayPoolGateway.

        :param gatewayState: The gatewayState of this GatewayPoolGateway.
        :type: str
        """

        self._gatewayState = gatewayState

    @property
    def alertsEnabled(self):
        """
        Gets the alertsEnabled of this GatewayPoolGateway.

        :return: The alertsEnabled of this GatewayPoolGateway.
        :rtype: int
        """
        return self._alertsEnabled

    @alertsEnabled.setter
    def alertsEnabled(self, alertsEnabled):
        """
        Sets the alertsEnabled of this GatewayPoolGateway.

        :param alertsEnabled: The alertsEnabled of this GatewayPoolGateway.
        :type: int
        """

        self._alertsEnabled = alertsEnabled

    @property
    def description(self):
        """
        Gets the description of this GatewayPoolGateway.

        :return: The description of this GatewayPoolGateway.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GatewayPoolGateway.

        :param description: The description of this GatewayPoolGateway.
        :type: str
        """

        self._description = description

    @property
    def dnsName(self):
        """
        Gets the dnsName of this GatewayPoolGateway.

        :return: The dnsName of this GatewayPoolGateway.
        :rtype: str
        """
        return self._dnsName

    @dnsName.setter
    def dnsName(self, dnsName):
        """
        Sets the dnsName of this GatewayPoolGateway.

        :param dnsName: The dnsName of this GatewayPoolGateway.
        :type: str
        """

        self._dnsName = dnsName

    @property
    def isLoadBalanced(self):
        """
        Gets the isLoadBalanced of this GatewayPoolGateway.

        :return: The isLoadBalanced of this GatewayPoolGateway.
        :rtype: int
        """
        return self._isLoadBalanced

    @isLoadBalanced.setter
    def isLoadBalanced(self, isLoadBalanced):
        """
        Sets the isLoadBalanced of this GatewayPoolGateway.

        :param isLoadBalanced: The isLoadBalanced of this GatewayPoolGateway.
        :type: int
        """

        self._isLoadBalanced = isLoadBalanced

    @property
    def privateIpAddress(self):
        """
        Gets the privateIpAddress of this GatewayPoolGateway.

        :return: The privateIpAddress of this GatewayPoolGateway.
        :rtype: str
        """
        return self._privateIpAddress

    @privateIpAddress.setter
    def privateIpAddress(self, privateIpAddress):
        """
        Sets the privateIpAddress of this GatewayPoolGateway.

        :param privateIpAddress: The privateIpAddress of this GatewayPoolGateway.
        :type: str
        """

        self._privateIpAddress = privateIpAddress

    @property
    def ipAddress(self):
        """
        Gets the ipAddress of this GatewayPoolGateway.

        :return: The ipAddress of this GatewayPoolGateway.
        :rtype: str
        """
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, ipAddress):
        """
        Sets the ipAddress of this GatewayPoolGateway.

        :param ipAddress: The ipAddress of this GatewayPoolGateway.
        :type: str
        """

        self._ipAddress = ipAddress

    @property
    def lastContact(self):
        """
        Gets the lastContact of this GatewayPoolGateway.

        :return: The lastContact of this GatewayPoolGateway.
        :rtype: datetime
        """
        return self._lastContact

    @lastContact.setter
    def lastContact(self, lastContact):
        """
        Sets the lastContact of this GatewayPoolGateway.

        :param lastContact: The lastContact of this GatewayPoolGateway.
        :type: datetime
        """

        self._lastContact = lastContact

    @property
    def systemUpSince(self):
        """
        Gets the systemUpSince of this GatewayPoolGateway.

        :return: The systemUpSince of this GatewayPoolGateway.
        :rtype: datetime
        """
        return self._systemUpSince

    @systemUpSince.setter
    def systemUpSince(self, systemUpSince):
        """
        Sets the systemUpSince of this GatewayPoolGateway.

        :param systemUpSince: The systemUpSince of this GatewayPoolGateway.
        :type: datetime
        """

        self._systemUpSince = systemUpSince

    @property
    def serviceUpSince(self):
        """
        Gets the serviceUpSince of this GatewayPoolGateway.

        :return: The serviceUpSince of this GatewayPoolGateway.
        :rtype: datetime
        """
        return self._serviceUpSince

    @serviceUpSince.setter
    def serviceUpSince(self, serviceUpSince):
        """
        Sets the serviceUpSince of this GatewayPoolGateway.

        :param serviceUpSince: The serviceUpSince of this GatewayPoolGateway.
        :type: datetime
        """

        self._serviceUpSince = serviceUpSince

    @property
    def serviceState(self):
        """
        Gets the serviceState of this GatewayPoolGateway.

        :return: The serviceState of this GatewayPoolGateway.
        :rtype: str
        """
        return self._serviceState

    @serviceState.setter
    def serviceState(self, serviceState):
        """
        Sets the serviceState of this GatewayPoolGateway.

        :param serviceState: The serviceState of this GatewayPoolGateway.
        :type: str
        """

        self._serviceState = serviceState

    @property
    def endpointPkiMode(self):
        """
        Gets the endpointPkiMode of this GatewayPoolGateway.

        :return: The endpointPkiMode of this GatewayPoolGateway.
        :rtype: str
        """
        return self._endpointPkiMode

    @endpointPkiMode.setter
    def endpointPkiMode(self, endpointPkiMode):
        """
        Sets the endpointPkiMode of this GatewayPoolGateway.

        :param endpointPkiMode: The endpointPkiMode of this GatewayPoolGateway.
        :type: str
        """

        self._endpointPkiMode = endpointPkiMode

    @property
    def handOffDetail(self):
        """
        Gets the handOffDetail of this GatewayPoolGateway.

        :return: The handOffDetail of this GatewayPoolGateway.
        :rtype: GatewayHandoffDetail
        """
        return self._handOffDetail

    @handOffDetail.setter
    def handOffDetail(self, handOffDetail):
        """
        Sets the handOffDetail of this GatewayPoolGateway.

        :param handOffDetail: The handOffDetail of this GatewayPoolGateway.
        :type: GatewayHandoffDetail
        """

        self._handOffDetail = handOffDetail

    @property
    def ipsecGatewayDetail(self):
        """
        Gets the ipsecGatewayDetail of this GatewayPoolGateway.

        :return: The ipsecGatewayDetail of this GatewayPoolGateway.
        :rtype: GatewayPoolGatewayIpsecGatewayDetail
        """
        return self._ipsecGatewayDetail

    @ipsecGatewayDetail.setter
    def ipsecGatewayDetail(self, ipsecGatewayDetail):
        """
        Sets the ipsecGatewayDetail of this GatewayPoolGateway.

        :param ipsecGatewayDetail: The ipsecGatewayDetail of this GatewayPoolGateway.
        :type: GatewayPoolGatewayIpsecGatewayDetail
        """

        self._ipsecGatewayDetail = ipsecGatewayDetail

    @property
    def modified(self):
        """
        Gets the modified of this GatewayPoolGateway.

        :return: The modified of this GatewayPoolGateway.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this GatewayPoolGateway.

        :param modified: The modified of this GatewayPoolGateway.
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayPoolGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
