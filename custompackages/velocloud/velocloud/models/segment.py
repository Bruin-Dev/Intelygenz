# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Segment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, enterpriseObjectId=None, configurationId=None, moduleId=None, ref=None, data=None, version=None, object=None, name=None, type=None, logicalId=None):
        """
        Segment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'enterpriseObjectId': 'int',
            'configurationId': 'int',
            'moduleId': 'int',
            'ref': 'str',
            'data': 'SegmentData',
            'version': 'str',
            'object': 'str',
            'name': 'str',
            'type': 'str',
            'logicalId': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'enterpriseObjectId': 'enterpriseObjectId',
            'configurationId': 'configurationId',
            'moduleId': 'moduleId',
            'ref': 'ref',
            'data': 'data',
            'version': 'version',
            'object': 'object',
            'name': 'name',
            'type': 'type',
            'logicalId': 'logicalId'
        }

        self._id = id
        self._enterpriseObjectId = enterpriseObjectId
        self._configurationId = configurationId
        self._moduleId = moduleId
        self._ref = ref
        self._data = data
        self._version = version
        self._object = object
        self._name = name
        self._type = type
        self._logicalId = logicalId

    @property
    def id(self):
        """
        Gets the id of this Segment.

        :return: The id of this Segment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Segment.

        :param id: The id of this Segment.
        :type: int
        """

        self._id = id

    @property
    def enterpriseObjectId(self):
        """
        Gets the enterpriseObjectId of this Segment.

        :return: The enterpriseObjectId of this Segment.
        :rtype: int
        """
        return self._enterpriseObjectId

    @enterpriseObjectId.setter
    def enterpriseObjectId(self, enterpriseObjectId):
        """
        Sets the enterpriseObjectId of this Segment.

        :param enterpriseObjectId: The enterpriseObjectId of this Segment.
        :type: int
        """

        self._enterpriseObjectId = enterpriseObjectId

    @property
    def configurationId(self):
        """
        Gets the configurationId of this Segment.

        :return: The configurationId of this Segment.
        :rtype: int
        """
        return self._configurationId

    @configurationId.setter
    def configurationId(self, configurationId):
        """
        Sets the configurationId of this Segment.

        :param configurationId: The configurationId of this Segment.
        :type: int
        """

        self._configurationId = configurationId

    @property
    def moduleId(self):
        """
        Gets the moduleId of this Segment.

        :return: The moduleId of this Segment.
        :rtype: int
        """
        return self._moduleId

    @moduleId.setter
    def moduleId(self, moduleId):
        """
        Sets the moduleId of this Segment.

        :param moduleId: The moduleId of this Segment.
        :type: int
        """

        self._moduleId = moduleId

    @property
    def ref(self):
        """
        Gets the ref of this Segment.

        :return: The ref of this Segment.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """
        Sets the ref of this Segment.

        :param ref: The ref of this Segment.
        :type: str
        """

        self._ref = ref

    @property
    def data(self):
        """
        Gets the data of this Segment.

        :return: The data of this Segment.
        :rtype: SegmentData
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this Segment.

        :param data: The data of this Segment.
        :type: SegmentData
        """

        self._data = data

    @property
    def version(self):
        """
        Gets the version of this Segment.

        :return: The version of this Segment.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Segment.

        :param version: The version of this Segment.
        :type: str
        """

        self._version = version

    @property
    def object(self):
        """
        Gets the object of this Segment.

        :return: The object of this Segment.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this Segment.

        :param object: The object of this Segment.
        :type: str
        """

        self._object = object

    @property
    def name(self):
        """
        Gets the name of this Segment.

        :return: The name of this Segment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Segment.

        :param name: The name of this Segment.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this Segment.

        :return: The type of this Segment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Segment.

        :param type: The type of this Segment.
        :type: str
        """

        self._type = type

    @property
    def logicalId(self):
        """
        Gets the logicalId of this Segment.

        :return: The logicalId of this Segment.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this Segment.

        :param logicalId: The logicalId of this Segment.
        :type: str
        """

        self._logicalId = logicalId

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Segment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
