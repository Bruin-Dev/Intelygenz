# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RoleGetUserTypeRolesResultItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created=None, operatorId=None, networkId=None, enterpriseId=None, enterpriseProxyId=None, name=None, userType=None, fromUserType=None, isSuper=None, description=None, precedence=None, modified=None):
        """
        RoleGetUserTypeRolesResultItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created': 'datetime',
            'operatorId': 'int',
            'networkId': 'int',
            'enterpriseId': 'int',
            'enterpriseProxyId': 'int',
            'name': 'str',
            'userType': 'str',
            'fromUserType': 'str',
            'isSuper': 'int',
            'description': 'str',
            'precedence': 'int',
            'modified': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'created': 'created',
            'operatorId': 'operatorId',
            'networkId': 'networkId',
            'enterpriseId': 'enterpriseId',
            'enterpriseProxyId': 'enterpriseProxyId',
            'name': 'name',
            'userType': 'userType',
            'fromUserType': 'fromUserType',
            'isSuper': 'isSuper',
            'description': 'description',
            'precedence': 'precedence',
            'modified': 'modified'
        }

        self._id = id
        self._created = created
        self._operatorId = operatorId
        self._networkId = networkId
        self._enterpriseId = enterpriseId
        self._enterpriseProxyId = enterpriseProxyId
        self._name = name
        self._userType = userType
        self._fromUserType = fromUserType
        self._isSuper = isSuper
        self._description = description
        self._precedence = precedence
        self._modified = modified

    @property
    def id(self):
        """
        Gets the id of this RoleGetUserTypeRolesResultItem.

        :return: The id of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RoleGetUserTypeRolesResultItem.

        :param id: The id of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """
        Gets the created of this RoleGetUserTypeRolesResultItem.

        :return: The created of this RoleGetUserTypeRolesResultItem.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this RoleGetUserTypeRolesResultItem.

        :param created: The created of this RoleGetUserTypeRolesResultItem.
        :type: datetime
        """

        self._created = created

    @property
    def operatorId(self):
        """
        Gets the operatorId of this RoleGetUserTypeRolesResultItem.

        :return: The operatorId of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._operatorId

    @operatorId.setter
    def operatorId(self, operatorId):
        """
        Sets the operatorId of this RoleGetUserTypeRolesResultItem.

        :param operatorId: The operatorId of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._operatorId = operatorId

    @property
    def networkId(self):
        """
        Gets the networkId of this RoleGetUserTypeRolesResultItem.

        :return: The networkId of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._networkId

    @networkId.setter
    def networkId(self, networkId):
        """
        Sets the networkId of this RoleGetUserTypeRolesResultItem.

        :param networkId: The networkId of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._networkId = networkId

    @property
    def enterpriseId(self):
        """
        Gets the enterpriseId of this RoleGetUserTypeRolesResultItem.

        :return: The enterpriseId of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._enterpriseId

    @enterpriseId.setter
    def enterpriseId(self, enterpriseId):
        """
        Sets the enterpriseId of this RoleGetUserTypeRolesResultItem.

        :param enterpriseId: The enterpriseId of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._enterpriseId = enterpriseId

    @property
    def enterpriseProxyId(self):
        """
        Gets the enterpriseProxyId of this RoleGetUserTypeRolesResultItem.

        :return: The enterpriseProxyId of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._enterpriseProxyId

    @enterpriseProxyId.setter
    def enterpriseProxyId(self, enterpriseProxyId):
        """
        Sets the enterpriseProxyId of this RoleGetUserTypeRolesResultItem.

        :param enterpriseProxyId: The enterpriseProxyId of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._enterpriseProxyId = enterpriseProxyId

    @property
    def name(self):
        """
        Gets the name of this RoleGetUserTypeRolesResultItem.

        :return: The name of this RoleGetUserTypeRolesResultItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RoleGetUserTypeRolesResultItem.

        :param name: The name of this RoleGetUserTypeRolesResultItem.
        :type: str
        """

        self._name = name

    @property
    def userType(self):
        """
        Gets the userType of this RoleGetUserTypeRolesResultItem.

        :return: The userType of this RoleGetUserTypeRolesResultItem.
        :rtype: str
        """
        return self._userType

    @userType.setter
    def userType(self, userType):
        """
        Sets the userType of this RoleGetUserTypeRolesResultItem.

        :param userType: The userType of this RoleGetUserTypeRolesResultItem.
        :type: str
        """

        self._userType = userType

    @property
    def fromUserType(self):
        """
        Gets the fromUserType of this RoleGetUserTypeRolesResultItem.

        :return: The fromUserType of this RoleGetUserTypeRolesResultItem.
        :rtype: str
        """
        return self._fromUserType

    @fromUserType.setter
    def fromUserType(self, fromUserType):
        """
        Sets the fromUserType of this RoleGetUserTypeRolesResultItem.

        :param fromUserType: The fromUserType of this RoleGetUserTypeRolesResultItem.
        :type: str
        """

        self._fromUserType = fromUserType

    @property
    def isSuper(self):
        """
        Gets the isSuper of this RoleGetUserTypeRolesResultItem.

        :return: The isSuper of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._isSuper

    @isSuper.setter
    def isSuper(self, isSuper):
        """
        Sets the isSuper of this RoleGetUserTypeRolesResultItem.

        :param isSuper: The isSuper of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._isSuper = isSuper

    @property
    def description(self):
        """
        Gets the description of this RoleGetUserTypeRolesResultItem.

        :return: The description of this RoleGetUserTypeRolesResultItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RoleGetUserTypeRolesResultItem.

        :param description: The description of this RoleGetUserTypeRolesResultItem.
        :type: str
        """

        self._description = description

    @property
    def precedence(self):
        """
        Gets the precedence of this RoleGetUserTypeRolesResultItem.

        :return: The precedence of this RoleGetUserTypeRolesResultItem.
        :rtype: int
        """
        return self._precedence

    @precedence.setter
    def precedence(self, precedence):
        """
        Sets the precedence of this RoleGetUserTypeRolesResultItem.

        :param precedence: The precedence of this RoleGetUserTypeRolesResultItem.
        :type: int
        """

        self._precedence = precedence

    @property
    def modified(self):
        """
        Gets the modified of this RoleGetUserTypeRolesResultItem.

        :return: The modified of this RoleGetUserTypeRolesResultItem.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this RoleGetUserTypeRolesResultItem.

        :param modified: The modified of this RoleGetUserTypeRolesResultItem.
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RoleGetUserTypeRolesResultItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
