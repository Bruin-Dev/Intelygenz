# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeDeviceSettingsDataRoutesStatic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, destination=None, netmask=None, sourceIp=None, gateway=None, cost=None, preferred=None, description=None, cidrPrefix=None, wanInterface=None, icmpProbeLogicalId=None, vlanId=None, advertise=None, subinterfaceId=None):
        """
        EdgeDeviceSettingsDataRoutesStatic - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'destination': 'str',
            'netmask': 'str',
            'sourceIp': 'str',
            'gateway': 'str',
            'cost': 'int',
            'preferred': 'bool',
            'description': 'str',
            'cidrPrefix': 'str',
            'wanInterface': 'str',
            'icmpProbeLogicalId': 'str',
            'vlanId': 'int',
            'advertise': 'bool',
            'subinterfaceId': 'int'
        }

        self.attribute_map = {
            'destination': 'destination',
            'netmask': 'netmask',
            'sourceIp': 'sourceIp',
            'gateway': 'gateway',
            'cost': 'cost',
            'preferred': 'preferred',
            'description': 'description',
            'cidrPrefix': 'cidrPrefix',
            'wanInterface': 'wanInterface',
            'icmpProbeLogicalId': 'icmpProbeLogicalId',
            'vlanId': 'vlanId',
            'advertise': 'advertise',
            'subinterfaceId': 'subinterfaceId'
        }

        self._destination = destination
        self._netmask = netmask
        self._sourceIp = sourceIp
        self._gateway = gateway
        self._cost = cost
        self._preferred = preferred
        self._description = description
        self._cidrPrefix = cidrPrefix
        self._wanInterface = wanInterface
        self._icmpProbeLogicalId = icmpProbeLogicalId
        self._vlanId = vlanId
        self._advertise = advertise
        self._subinterfaceId = subinterfaceId

    @property
    def destination(self):
        """
        Gets the destination of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The destination of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this EdgeDeviceSettingsDataRoutesStatic.

        :param destination: The destination of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._destination = destination

    @property
    def netmask(self):
        """
        Gets the netmask of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The netmask of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """
        Sets the netmask of this EdgeDeviceSettingsDataRoutesStatic.

        :param netmask: The netmask of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._netmask = netmask

    @property
    def sourceIp(self):
        """
        Gets the sourceIp of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The sourceIp of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._sourceIp

    @sourceIp.setter
    def sourceIp(self, sourceIp):
        """
        Sets the sourceIp of this EdgeDeviceSettingsDataRoutesStatic.

        :param sourceIp: The sourceIp of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._sourceIp = sourceIp

    @property
    def gateway(self):
        """
        Gets the gateway of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The gateway of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this EdgeDeviceSettingsDataRoutesStatic.

        :param gateway: The gateway of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._gateway = gateway

    @property
    def cost(self):
        """
        Gets the cost of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The cost of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this EdgeDeviceSettingsDataRoutesStatic.

        :param cost: The cost of this EdgeDeviceSettingsDataRoutesStatic.
        :type: int
        """

        self._cost = cost

    @property
    def preferred(self):
        """
        Gets the preferred of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The preferred of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """
        Sets the preferred of this EdgeDeviceSettingsDataRoutesStatic.

        :param preferred: The preferred of this EdgeDeviceSettingsDataRoutesStatic.
        :type: bool
        """

        self._preferred = preferred

    @property
    def description(self):
        """
        Gets the description of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The description of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EdgeDeviceSettingsDataRoutesStatic.

        :param description: The description of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._description = description

    @property
    def cidrPrefix(self):
        """
        Gets the cidrPrefix of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The cidrPrefix of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._cidrPrefix

    @cidrPrefix.setter
    def cidrPrefix(self, cidrPrefix):
        """
        Sets the cidrPrefix of this EdgeDeviceSettingsDataRoutesStatic.

        :param cidrPrefix: The cidrPrefix of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._cidrPrefix = cidrPrefix

    @property
    def wanInterface(self):
        """
        Gets the wanInterface of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The wanInterface of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._wanInterface

    @wanInterface.setter
    def wanInterface(self, wanInterface):
        """
        Sets the wanInterface of this EdgeDeviceSettingsDataRoutesStatic.

        :param wanInterface: The wanInterface of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._wanInterface = wanInterface

    @property
    def icmpProbeLogicalId(self):
        """
        Gets the icmpProbeLogicalId of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The icmpProbeLogicalId of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: str
        """
        return self._icmpProbeLogicalId

    @icmpProbeLogicalId.setter
    def icmpProbeLogicalId(self, icmpProbeLogicalId):
        """
        Sets the icmpProbeLogicalId of this EdgeDeviceSettingsDataRoutesStatic.

        :param icmpProbeLogicalId: The icmpProbeLogicalId of this EdgeDeviceSettingsDataRoutesStatic.
        :type: str
        """

        self._icmpProbeLogicalId = icmpProbeLogicalId

    @property
    def vlanId(self):
        """
        Gets the vlanId of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The vlanId of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: int
        """
        return self._vlanId

    @vlanId.setter
    def vlanId(self, vlanId):
        """
        Sets the vlanId of this EdgeDeviceSettingsDataRoutesStatic.

        :param vlanId: The vlanId of this EdgeDeviceSettingsDataRoutesStatic.
        :type: int
        """

        self._vlanId = vlanId

    @property
    def advertise(self):
        """
        Gets the advertise of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The advertise of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: bool
        """
        return self._advertise

    @advertise.setter
    def advertise(self, advertise):
        """
        Sets the advertise of this EdgeDeviceSettingsDataRoutesStatic.

        :param advertise: The advertise of this EdgeDeviceSettingsDataRoutesStatic.
        :type: bool
        """

        self._advertise = advertise

    @property
    def subinterfaceId(self):
        """
        Gets the subinterfaceId of this EdgeDeviceSettingsDataRoutesStatic.

        :return: The subinterfaceId of this EdgeDeviceSettingsDataRoutesStatic.
        :rtype: int
        """
        return self._subinterfaceId

    @subinterfaceId.setter
    def subinterfaceId(self, subinterfaceId):
        """
        Sets the subinterfaceId of this EdgeDeviceSettingsDataRoutesStatic.

        :param subinterfaceId: The subinterfaceId of this EdgeDeviceSettingsDataRoutesStatic.
        :type: int
        """

        self._subinterfaceId = subinterfaceId

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeDeviceSettingsDataRoutesStatic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
