# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnterpriseServiceNetworkDataVlans(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, vlanId=None, advertise=None, cost=None, staticReserved=None, dhcp=None):
        """
        EnterpriseServiceNetworkDataVlans - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'vlanId': 'int',
            'advertise': 'bool',
            'cost': 'int',
            'staticReserved': 'int',
            'dhcp': 'EnterpriseServiceNetworkDataDhcp'
        }

        self.attribute_map = {
            'name': 'name',
            'vlanId': 'vlanId',
            'advertise': 'advertise',
            'cost': 'cost',
            'staticReserved': 'staticReserved',
            'dhcp': 'dhcp'
        }

        self._name = name
        self._vlanId = vlanId
        self._advertise = advertise
        self._cost = cost
        self._staticReserved = staticReserved
        self._dhcp = dhcp

    @property
    def name(self):
        """
        Gets the name of this EnterpriseServiceNetworkDataVlans.

        :return: The name of this EnterpriseServiceNetworkDataVlans.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnterpriseServiceNetworkDataVlans.

        :param name: The name of this EnterpriseServiceNetworkDataVlans.
        :type: str
        """

        self._name = name

    @property
    def vlanId(self):
        """
        Gets the vlanId of this EnterpriseServiceNetworkDataVlans.

        :return: The vlanId of this EnterpriseServiceNetworkDataVlans.
        :rtype: int
        """
        return self._vlanId

    @vlanId.setter
    def vlanId(self, vlanId):
        """
        Sets the vlanId of this EnterpriseServiceNetworkDataVlans.

        :param vlanId: The vlanId of this EnterpriseServiceNetworkDataVlans.
        :type: int
        """

        self._vlanId = vlanId

    @property
    def advertise(self):
        """
        Gets the advertise of this EnterpriseServiceNetworkDataVlans.

        :return: The advertise of this EnterpriseServiceNetworkDataVlans.
        :rtype: bool
        """
        return self._advertise

    @advertise.setter
    def advertise(self, advertise):
        """
        Sets the advertise of this EnterpriseServiceNetworkDataVlans.

        :param advertise: The advertise of this EnterpriseServiceNetworkDataVlans.
        :type: bool
        """

        self._advertise = advertise

    @property
    def cost(self):
        """
        Gets the cost of this EnterpriseServiceNetworkDataVlans.

        :return: The cost of this EnterpriseServiceNetworkDataVlans.
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this EnterpriseServiceNetworkDataVlans.

        :param cost: The cost of this EnterpriseServiceNetworkDataVlans.
        :type: int
        """

        self._cost = cost

    @property
    def staticReserved(self):
        """
        Gets the staticReserved of this EnterpriseServiceNetworkDataVlans.

        :return: The staticReserved of this EnterpriseServiceNetworkDataVlans.
        :rtype: int
        """
        return self._staticReserved

    @staticReserved.setter
    def staticReserved(self, staticReserved):
        """
        Sets the staticReserved of this EnterpriseServiceNetworkDataVlans.

        :param staticReserved: The staticReserved of this EnterpriseServiceNetworkDataVlans.
        :type: int
        """

        self._staticReserved = staticReserved

    @property
    def dhcp(self):
        """
        Gets the dhcp of this EnterpriseServiceNetworkDataVlans.

        :return: The dhcp of this EnterpriseServiceNetworkDataVlans.
        :rtype: EnterpriseServiceNetworkDataDhcp
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """
        Sets the dhcp of this EnterpriseServiceNetworkDataVlans.

        :param dhcp: The dhcp of this EnterpriseServiceNetworkDataVlans.
        :type: EnterpriseServiceNetworkDataDhcp
        """

        self._dhcp = dhcp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnterpriseServiceNetworkDataVlans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
