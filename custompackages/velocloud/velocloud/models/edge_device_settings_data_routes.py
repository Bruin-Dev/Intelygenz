# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeDeviceSettingsDataRoutes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, icmpProbes=None, icmpResponders=None, static=None):
        """
        EdgeDeviceSettingsDataRoutes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'icmpProbes': 'list[object]',
            'icmpResponders': 'list[object]',
            'static': 'list[EdgeDeviceSettingsDataRoutesStatic]'
        }

        self.attribute_map = {
            'icmpProbes': 'icmpProbes',
            'icmpResponders': 'icmpResponders',
            'static': 'static'
        }

        self._icmpProbes = icmpProbes
        self._icmpResponders = icmpResponders
        self._static = static

    @property
    def icmpProbes(self):
        """
        Gets the icmpProbes of this EdgeDeviceSettingsDataRoutes.

        :return: The icmpProbes of this EdgeDeviceSettingsDataRoutes.
        :rtype: list[object]
        """
        return self._icmpProbes

    @icmpProbes.setter
    def icmpProbes(self, icmpProbes):
        """
        Sets the icmpProbes of this EdgeDeviceSettingsDataRoutes.

        :param icmpProbes: The icmpProbes of this EdgeDeviceSettingsDataRoutes.
        :type: list[object]
        """

        self._icmpProbes = icmpProbes

    @property
    def icmpResponders(self):
        """
        Gets the icmpResponders of this EdgeDeviceSettingsDataRoutes.

        :return: The icmpResponders of this EdgeDeviceSettingsDataRoutes.
        :rtype: list[object]
        """
        return self._icmpResponders

    @icmpResponders.setter
    def icmpResponders(self, icmpResponders):
        """
        Sets the icmpResponders of this EdgeDeviceSettingsDataRoutes.

        :param icmpResponders: The icmpResponders of this EdgeDeviceSettingsDataRoutes.
        :type: list[object]
        """

        self._icmpResponders = icmpResponders

    @property
    def static(self):
        """
        Gets the static of this EdgeDeviceSettingsDataRoutes.

        :return: The static of this EdgeDeviceSettingsDataRoutes.
        :rtype: list[EdgeDeviceSettingsDataRoutesStatic]
        """
        return self._static

    @static.setter
    def static(self, static):
        """
        Sets the static of this EdgeDeviceSettingsDataRoutes.

        :param static: The static of this EdgeDeviceSettingsDataRoutes.
        :type: list[EdgeDeviceSettingsDataRoutesStatic]
        """

        self._static = static

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeDeviceSettingsDataRoutes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
