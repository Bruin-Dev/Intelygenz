# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigurationCloneEnterpriseTemplate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enterpriseId=None, configurationType=None, name=None, description=None):
        """
        ConfigurationCloneEnterpriseTemplate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enterpriseId': 'int',
            'configurationType': 'str',
            'name': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'enterpriseId': 'enterpriseId',
            'configurationType': 'configurationType',
            'name': 'name',
            'description': 'description'
        }

        self._enterpriseId = enterpriseId
        self._configurationType = configurationType
        self._name = name
        self._description = description

    @property
    def enterpriseId(self):
        """
        Gets the enterpriseId of this ConfigurationCloneEnterpriseTemplate.
        Required if called from the operator or MSP context, identifies the target enterprise of the API call.

        :return: The enterpriseId of this ConfigurationCloneEnterpriseTemplate.
        :rtype: int
        """
        return self._enterpriseId

    @enterpriseId.setter
    def enterpriseId(self, enterpriseId):
        """
        Sets the enterpriseId of this ConfigurationCloneEnterpriseTemplate.
        Required if called from the operator or MSP context, identifies the target enterprise of the API call.

        :param enterpriseId: The enterpriseId of this ConfigurationCloneEnterpriseTemplate.
        :type: int
        """

        self._enterpriseId = enterpriseId

    @property
    def configurationType(self):
        """
        Gets the configurationType of this ConfigurationCloneEnterpriseTemplate.
        If both network and segment based functionality is granted to the enterprise, chose which template type to clone. If not specified the type of the operator profile assigned to the enterprise will be used.

        :return: The configurationType of this ConfigurationCloneEnterpriseTemplate.
        :rtype: str
        """
        return self._configurationType

    @configurationType.setter
    def configurationType(self, configurationType):
        """
        Sets the configurationType of this ConfigurationCloneEnterpriseTemplate.
        If both network and segment based functionality is granted to the enterprise, chose which template type to clone. If not specified the type of the operator profile assigned to the enterprise will be used.

        :param configurationType: The configurationType of this ConfigurationCloneEnterpriseTemplate.
        :type: str
        """

        self._configurationType = configurationType

    @property
    def name(self):
        """
        Gets the name of this ConfigurationCloneEnterpriseTemplate.

        :return: The name of this ConfigurationCloneEnterpriseTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConfigurationCloneEnterpriseTemplate.

        :param name: The name of this ConfigurationCloneEnterpriseTemplate.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ConfigurationCloneEnterpriseTemplate.

        :return: The description of this ConfigurationCloneEnterpriseTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ConfigurationCloneEnterpriseTemplate.

        :param description: The description of this ConfigurationCloneEnterpriseTemplate.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigurationCloneEnterpriseTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
