# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeDeviceSettingsDataDhcpServerMetaData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dataType=None, description=None, display=None, list=None, name=None, option=None):
        """
        EdgeDeviceSettingsDataDhcpServerMetaData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'dataType': 'str',
            'description': 'str',
            'display': 'bool',
            'list': 'bool',
            'name': 'str',
            'option': 'int'
        }

        self.attribute_map = {
            'dataType': 'dataType',
            'description': 'description',
            'display': 'display',
            'list': 'list',
            'name': 'name',
            'option': 'option'
        }

        self._dataType = dataType
        self._description = description
        self._display = display
        self._list = list
        self._name = name
        self._option = option

    @property
    def dataType(self):
        """
        Gets the dataType of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :return: The dataType of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :rtype: str
        """
        return self._dataType

    @dataType.setter
    def dataType(self, dataType):
        """
        Sets the dataType of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :param dataType: The dataType of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :type: str
        """

        self._dataType = dataType

    @property
    def description(self):
        """
        Gets the description of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :return: The description of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :param description: The description of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :type: str
        """

        self._description = description

    @property
    def display(self):
        """
        Gets the display of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :return: The display of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """
        Sets the display of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :param display: The display of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :type: bool
        """

        self._display = display

    @property
    def list(self):
        """
        Gets the list of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :return: The list of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :rtype: bool
        """
        return self._list

    @list.setter
    def list(self, list):
        """
        Sets the list of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :param list: The list of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :type: bool
        """

        self._list = list

    @property
    def name(self):
        """
        Gets the name of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :return: The name of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :param name: The name of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :type: str
        """

        self._name = name

    @property
    def option(self):
        """
        Gets the option of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :return: The option of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :rtype: int
        """
        return self._option

    @option.setter
    def option(self, option):
        """
        Sets the option of this EdgeDeviceSettingsDataDhcpServerMetaData.

        :param option: The option of this EdgeDeviceSettingsDataDhcpServerMetaData.
        :type: int
        """

        self._option = option

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeDeviceSettingsDataDhcpServerMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
