# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetricsGetEdgeSegmentMetrics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, enterpriseId=None, interval=None, metrics=None, sort=None, limit=None, segments=None):
        """
        MetricsGetEdgeSegmentMetrics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'enterpriseId': 'int',
            'interval': 'Interval',
            'metrics': 'BasicMetrics',
            'sort': 'BasicMetric',
            'limit': 'int',
            'segments': 'list[int]'
        }

        self.attribute_map = {
            'id': 'id',
            'enterpriseId': 'enterpriseId',
            'interval': 'interval',
            'metrics': 'metrics',
            'sort': 'sort',
            'limit': 'limit',
            'segments': 'segments'
        }

        self._id = id
        self._enterpriseId = enterpriseId
        self._interval = interval
        self._metrics = metrics
        self._sort = sort
        self._limit = limit
        self._segments = segments

    @property
    def id(self):
        """
        Gets the id of this MetricsGetEdgeSegmentMetrics.

        :return: The id of this MetricsGetEdgeSegmentMetrics.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MetricsGetEdgeSegmentMetrics.

        :param id: The id of this MetricsGetEdgeSegmentMetrics.
        :type: int
        """

        self._id = id

    @property
    def enterpriseId(self):
        """
        Gets the enterpriseId of this MetricsGetEdgeSegmentMetrics.

        :return: The enterpriseId of this MetricsGetEdgeSegmentMetrics.
        :rtype: int
        """
        return self._enterpriseId

    @enterpriseId.setter
    def enterpriseId(self, enterpriseId):
        """
        Sets the enterpriseId of this MetricsGetEdgeSegmentMetrics.

        :param enterpriseId: The enterpriseId of this MetricsGetEdgeSegmentMetrics.
        :type: int
        """

        self._enterpriseId = enterpriseId

    @property
    def interval(self):
        """
        Gets the interval of this MetricsGetEdgeSegmentMetrics.

        :return: The interval of this MetricsGetEdgeSegmentMetrics.
        :rtype: Interval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this MetricsGetEdgeSegmentMetrics.

        :param interval: The interval of this MetricsGetEdgeSegmentMetrics.
        :type: Interval
        """

        self._interval = interval

    @property
    def metrics(self):
        """
        Gets the metrics of this MetricsGetEdgeSegmentMetrics.

        :return: The metrics of this MetricsGetEdgeSegmentMetrics.
        :rtype: BasicMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """
        Sets the metrics of this MetricsGetEdgeSegmentMetrics.

        :param metrics: The metrics of this MetricsGetEdgeSegmentMetrics.
        :type: BasicMetrics
        """

        self._metrics = metrics

    @property
    def sort(self):
        """
        Gets the sort of this MetricsGetEdgeSegmentMetrics.

        :return: The sort of this MetricsGetEdgeSegmentMetrics.
        :rtype: BasicMetric
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this MetricsGetEdgeSegmentMetrics.

        :param sort: The sort of this MetricsGetEdgeSegmentMetrics.
        :type: BasicMetric
        """

        self._sort = sort

    @property
    def limit(self):
        """
        Gets the limit of this MetricsGetEdgeSegmentMetrics.

        :return: The limit of this MetricsGetEdgeSegmentMetrics.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this MetricsGetEdgeSegmentMetrics.

        :param limit: The limit of this MetricsGetEdgeSegmentMetrics.
        :type: int
        """

        self._limit = limit

    @property
    def segments(self):
        """
        Gets the segments of this MetricsGetEdgeSegmentMetrics.

        :return: The segments of this MetricsGetEdgeSegmentMetrics.
        :rtype: list[int]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """
        Sets the segments of this MetricsGetEdgeSegmentMetrics.

        :param segments: The segments of this MetricsGetEdgeSegmentMetrics.
        :type: list[int]
        """

        self._segments = segments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetricsGetEdgeSegmentMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
