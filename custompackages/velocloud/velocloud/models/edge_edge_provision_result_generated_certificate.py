# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeEdgeProvisionResultGeneratedCertificate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, certificate=None, caCertificate=None, privateKey=None, privateKeyPassword=None, csr=None):
        """
        EdgeEdgeProvisionResultGeneratedCertificate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'certificate': 'str',
            'caCertificate': 'str',
            'privateKey': 'str',
            'privateKeyPassword': 'str',
            'csr': 'str'
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'caCertificate': 'ca-certificate',
            'privateKey': 'privateKey',
            'privateKeyPassword': 'privateKeyPassword',
            'csr': 'csr'
        }

        self._certificate = certificate
        self._caCertificate = caCertificate
        self._privateKey = privateKey
        self._privateKeyPassword = privateKeyPassword
        self._csr = csr

    @property
    def certificate(self):
        """
        Gets the certificate of this EdgeEdgeProvisionResultGeneratedCertificate.

        :return: The certificate of this EdgeEdgeProvisionResultGeneratedCertificate.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """
        Sets the certificate of this EdgeEdgeProvisionResultGeneratedCertificate.

        :param certificate: The certificate of this EdgeEdgeProvisionResultGeneratedCertificate.
        :type: str
        """

        self._certificate = certificate

    @property
    def caCertificate(self):
        """
        Gets the caCertificate of this EdgeEdgeProvisionResultGeneratedCertificate.

        :return: The caCertificate of this EdgeEdgeProvisionResultGeneratedCertificate.
        :rtype: str
        """
        return self._caCertificate

    @caCertificate.setter
    def caCertificate(self, caCertificate):
        """
        Sets the caCertificate of this EdgeEdgeProvisionResultGeneratedCertificate.

        :param caCertificate: The caCertificate of this EdgeEdgeProvisionResultGeneratedCertificate.
        :type: str
        """

        self._caCertificate = caCertificate

    @property
    def privateKey(self):
        """
        Gets the privateKey of this EdgeEdgeProvisionResultGeneratedCertificate.

        :return: The privateKey of this EdgeEdgeProvisionResultGeneratedCertificate.
        :rtype: str
        """
        return self._privateKey

    @privateKey.setter
    def privateKey(self, privateKey):
        """
        Sets the privateKey of this EdgeEdgeProvisionResultGeneratedCertificate.

        :param privateKey: The privateKey of this EdgeEdgeProvisionResultGeneratedCertificate.
        :type: str
        """

        self._privateKey = privateKey

    @property
    def privateKeyPassword(self):
        """
        Gets the privateKeyPassword of this EdgeEdgeProvisionResultGeneratedCertificate.

        :return: The privateKeyPassword of this EdgeEdgeProvisionResultGeneratedCertificate.
        :rtype: str
        """
        return self._privateKeyPassword

    @privateKeyPassword.setter
    def privateKeyPassword(self, privateKeyPassword):
        """
        Sets the privateKeyPassword of this EdgeEdgeProvisionResultGeneratedCertificate.

        :param privateKeyPassword: The privateKeyPassword of this EdgeEdgeProvisionResultGeneratedCertificate.
        :type: str
        """

        self._privateKeyPassword = privateKeyPassword

    @property
    def csr(self):
        """
        Gets the csr of this EdgeEdgeProvisionResultGeneratedCertificate.

        :return: The csr of this EdgeEdgeProvisionResultGeneratedCertificate.
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """
        Sets the csr of this EdgeEdgeProvisionResultGeneratedCertificate.

        :param csr: The csr of this EdgeEdgeProvisionResultGeneratedCertificate.
        :type: str
        """

        self._csr = csr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeEdgeProvisionResultGeneratedCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
