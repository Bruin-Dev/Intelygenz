# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeQOSDataMatch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, appid=None, classid=None, dscp=None, sip=None, sportHigh=None, sportLow=None, ssm=None, svlan=None, osVersion=None, hostname=None, dip=None, dportLow=None, dportHigh=None, dsm=None, dvlan=None, proto=None):
        """
        EdgeQOSDataMatch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'appid': 'int',
            'classid': 'int',
            'dscp': 'int',
            'sip': 'str',
            'sportHigh': 'int',
            'sportLow': 'int',
            'ssm': 'str',
            'svlan': 'int',
            'osVersion': 'int',
            'hostname': 'str',
            'dip': 'str',
            'dportLow': 'int',
            'dportHigh': 'int',
            'dsm': 'str',
            'dvlan': 'int',
            'proto': 'int'
        }

        self.attribute_map = {
            'appid': 'appid',
            'classid': 'classid',
            'dscp': 'dscp',
            'sip': 'sip',
            'sportHigh': 'sport_high',
            'sportLow': 'sport_low',
            'ssm': 'ssm',
            'svlan': 'svlan',
            'osVersion': 'os_version',
            'hostname': 'hostname',
            'dip': 'dip',
            'dportLow': 'dport_low',
            'dportHigh': 'dport_high',
            'dsm': 'dsm',
            'dvlan': 'dvlan',
            'proto': 'proto'
        }

        self._appid = appid
        self._classid = classid
        self._dscp = dscp
        self._sip = sip
        self._sportHigh = sportHigh
        self._sportLow = sportLow
        self._ssm = ssm
        self._svlan = svlan
        self._osVersion = osVersion
        self._hostname = hostname
        self._dip = dip
        self._dportLow = dportLow
        self._dportHigh = dportHigh
        self._dsm = dsm
        self._dvlan = dvlan
        self._proto = proto

    @property
    def appid(self):
        """
        Gets the appid of this EdgeQOSDataMatch.

        :return: The appid of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._appid

    @appid.setter
    def appid(self, appid):
        """
        Sets the appid of this EdgeQOSDataMatch.

        :param appid: The appid of this EdgeQOSDataMatch.
        :type: int
        """

        self._appid = appid

    @property
    def classid(self):
        """
        Gets the classid of this EdgeQOSDataMatch.

        :return: The classid of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._classid

    @classid.setter
    def classid(self, classid):
        """
        Sets the classid of this EdgeQOSDataMatch.

        :param classid: The classid of this EdgeQOSDataMatch.
        :type: int
        """

        self._classid = classid

    @property
    def dscp(self):
        """
        Gets the dscp of this EdgeQOSDataMatch.

        :return: The dscp of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._dscp

    @dscp.setter
    def dscp(self, dscp):
        """
        Sets the dscp of this EdgeQOSDataMatch.

        :param dscp: The dscp of this EdgeQOSDataMatch.
        :type: int
        """

        self._dscp = dscp

    @property
    def sip(self):
        """
        Gets the sip of this EdgeQOSDataMatch.

        :return: The sip of this EdgeQOSDataMatch.
        :rtype: str
        """
        return self._sip

    @sip.setter
    def sip(self, sip):
        """
        Sets the sip of this EdgeQOSDataMatch.

        :param sip: The sip of this EdgeQOSDataMatch.
        :type: str
        """

        self._sip = sip

    @property
    def sportHigh(self):
        """
        Gets the sportHigh of this EdgeQOSDataMatch.

        :return: The sportHigh of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._sportHigh

    @sportHigh.setter
    def sportHigh(self, sportHigh):
        """
        Sets the sportHigh of this EdgeQOSDataMatch.

        :param sportHigh: The sportHigh of this EdgeQOSDataMatch.
        :type: int
        """

        self._sportHigh = sportHigh

    @property
    def sportLow(self):
        """
        Gets the sportLow of this EdgeQOSDataMatch.

        :return: The sportLow of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._sportLow

    @sportLow.setter
    def sportLow(self, sportLow):
        """
        Sets the sportLow of this EdgeQOSDataMatch.

        :param sportLow: The sportLow of this EdgeQOSDataMatch.
        :type: int
        """

        self._sportLow = sportLow

    @property
    def ssm(self):
        """
        Gets the ssm of this EdgeQOSDataMatch.

        :return: The ssm of this EdgeQOSDataMatch.
        :rtype: str
        """
        return self._ssm

    @ssm.setter
    def ssm(self, ssm):
        """
        Sets the ssm of this EdgeQOSDataMatch.

        :param ssm: The ssm of this EdgeQOSDataMatch.
        :type: str
        """

        self._ssm = ssm

    @property
    def svlan(self):
        """
        Gets the svlan of this EdgeQOSDataMatch.

        :return: The svlan of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._svlan

    @svlan.setter
    def svlan(self, svlan):
        """
        Sets the svlan of this EdgeQOSDataMatch.

        :param svlan: The svlan of this EdgeQOSDataMatch.
        :type: int
        """

        self._svlan = svlan

    @property
    def osVersion(self):
        """
        Gets the osVersion of this EdgeQOSDataMatch.

        :return: The osVersion of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._osVersion

    @osVersion.setter
    def osVersion(self, osVersion):
        """
        Sets the osVersion of this EdgeQOSDataMatch.

        :param osVersion: The osVersion of this EdgeQOSDataMatch.
        :type: int
        """

        self._osVersion = osVersion

    @property
    def hostname(self):
        """
        Gets the hostname of this EdgeQOSDataMatch.

        :return: The hostname of this EdgeQOSDataMatch.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this EdgeQOSDataMatch.

        :param hostname: The hostname of this EdgeQOSDataMatch.
        :type: str
        """

        self._hostname = hostname

    @property
    def dip(self):
        """
        Gets the dip of this EdgeQOSDataMatch.

        :return: The dip of this EdgeQOSDataMatch.
        :rtype: str
        """
        return self._dip

    @dip.setter
    def dip(self, dip):
        """
        Sets the dip of this EdgeQOSDataMatch.

        :param dip: The dip of this EdgeQOSDataMatch.
        :type: str
        """

        self._dip = dip

    @property
    def dportLow(self):
        """
        Gets the dportLow of this EdgeQOSDataMatch.

        :return: The dportLow of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._dportLow

    @dportLow.setter
    def dportLow(self, dportLow):
        """
        Sets the dportLow of this EdgeQOSDataMatch.

        :param dportLow: The dportLow of this EdgeQOSDataMatch.
        :type: int
        """

        self._dportLow = dportLow

    @property
    def dportHigh(self):
        """
        Gets the dportHigh of this EdgeQOSDataMatch.

        :return: The dportHigh of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._dportHigh

    @dportHigh.setter
    def dportHigh(self, dportHigh):
        """
        Sets the dportHigh of this EdgeQOSDataMatch.

        :param dportHigh: The dportHigh of this EdgeQOSDataMatch.
        :type: int
        """

        self._dportHigh = dportHigh

    @property
    def dsm(self):
        """
        Gets the dsm of this EdgeQOSDataMatch.

        :return: The dsm of this EdgeQOSDataMatch.
        :rtype: str
        """
        return self._dsm

    @dsm.setter
    def dsm(self, dsm):
        """
        Sets the dsm of this EdgeQOSDataMatch.

        :param dsm: The dsm of this EdgeQOSDataMatch.
        :type: str
        """

        self._dsm = dsm

    @property
    def dvlan(self):
        """
        Gets the dvlan of this EdgeQOSDataMatch.

        :return: The dvlan of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._dvlan

    @dvlan.setter
    def dvlan(self, dvlan):
        """
        Sets the dvlan of this EdgeQOSDataMatch.

        :param dvlan: The dvlan of this EdgeQOSDataMatch.
        :type: int
        """

        self._dvlan = dvlan

    @property
    def proto(self):
        """
        Gets the proto of this EdgeQOSDataMatch.

        :return: The proto of this EdgeQOSDataMatch.
        :rtype: int
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """
        Sets the proto of this EdgeQOSDataMatch.

        :param proto: The proto of this EdgeQOSDataMatch.
        :type: int
        """

        self._proto = proto

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeQOSDataMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
