# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ManagementPlaneData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, heartBeatSeconds=None, managementPlaneProxy=None, statsUploadSeconds=None, timeSliceSeconds=None):
        """
        ManagementPlaneData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'heartBeatSeconds': 'int',
            'managementPlaneProxy': 'ManagementPlaneDataManagementPlaneProxy',
            'statsUploadSeconds': 'int',
            'timeSliceSeconds': 'int'
        }

        self.attribute_map = {
            'heartBeatSeconds': 'heartBeatSeconds',
            'managementPlaneProxy': 'managementPlaneProxy',
            'statsUploadSeconds': 'statsUploadSeconds',
            'timeSliceSeconds': 'timeSliceSeconds'
        }

        self._heartBeatSeconds = heartBeatSeconds
        self._managementPlaneProxy = managementPlaneProxy
        self._statsUploadSeconds = statsUploadSeconds
        self._timeSliceSeconds = timeSliceSeconds

    @property
    def heartBeatSeconds(self):
        """
        Gets the heartBeatSeconds of this ManagementPlaneData.

        :return: The heartBeatSeconds of this ManagementPlaneData.
        :rtype: int
        """
        return self._heartBeatSeconds

    @heartBeatSeconds.setter
    def heartBeatSeconds(self, heartBeatSeconds):
        """
        Sets the heartBeatSeconds of this ManagementPlaneData.

        :param heartBeatSeconds: The heartBeatSeconds of this ManagementPlaneData.
        :type: int
        """

        self._heartBeatSeconds = heartBeatSeconds

    @property
    def managementPlaneProxy(self):
        """
        Gets the managementPlaneProxy of this ManagementPlaneData.

        :return: The managementPlaneProxy of this ManagementPlaneData.
        :rtype: ManagementPlaneDataManagementPlaneProxy
        """
        return self._managementPlaneProxy

    @managementPlaneProxy.setter
    def managementPlaneProxy(self, managementPlaneProxy):
        """
        Sets the managementPlaneProxy of this ManagementPlaneData.

        :param managementPlaneProxy: The managementPlaneProxy of this ManagementPlaneData.
        :type: ManagementPlaneDataManagementPlaneProxy
        """

        self._managementPlaneProxy = managementPlaneProxy

    @property
    def statsUploadSeconds(self):
        """
        Gets the statsUploadSeconds of this ManagementPlaneData.

        :return: The statsUploadSeconds of this ManagementPlaneData.
        :rtype: int
        """
        return self._statsUploadSeconds

    @statsUploadSeconds.setter
    def statsUploadSeconds(self, statsUploadSeconds):
        """
        Sets the statsUploadSeconds of this ManagementPlaneData.

        :param statsUploadSeconds: The statsUploadSeconds of this ManagementPlaneData.
        :type: int
        """

        self._statsUploadSeconds = statsUploadSeconds

    @property
    def timeSliceSeconds(self):
        """
        Gets the timeSliceSeconds of this ManagementPlaneData.

        :return: The timeSliceSeconds of this ManagementPlaneData.
        :rtype: int
        """
        return self._timeSliceSeconds

    @timeSliceSeconds.setter
    def timeSliceSeconds(self, timeSliceSeconds):
        """
        Sets the timeSliceSeconds of this ManagementPlaneData.

        :param timeSliceSeconds: The timeSliceSeconds of this ManagementPlaneData.
        :type: int
        """

        self._timeSliceSeconds = timeSliceSeconds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ManagementPlaneData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
