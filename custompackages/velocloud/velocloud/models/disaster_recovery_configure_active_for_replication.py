# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DisasterRecoveryConfigureActiveForReplication(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, standbyList=None, autoConfigStandby=True, drVCOUser=None, drVCOPassword=None):
        """
        DisasterRecoveryConfigureActiveForReplication - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'standbyList': 'list[StandbyVcoDesignee]',
            'autoConfigStandby': 'bool',
            'drVCOUser': 'str',
            'drVCOPassword': 'str'
        }

        self.attribute_map = {
            'standbyList': 'standbyList',
            'autoConfigStandby': 'autoConfigStandby',
            'drVCOUser': 'drVCOUser',
            'drVCOPassword': 'drVCOPassword'
        }

        self._standbyList = standbyList
        self._autoConfigStandby = autoConfigStandby
        self._drVCOUser = drVCOUser
        self._drVCOPassword = drVCOPassword

    @property
    def standbyList(self):
        """
        Gets the standbyList of this DisasterRecoveryConfigureActiveForReplication.

        :return: The standbyList of this DisasterRecoveryConfigureActiveForReplication.
        :rtype: list[StandbyVcoDesignee]
        """
        return self._standbyList

    @standbyList.setter
    def standbyList(self, standbyList):
        """
        Sets the standbyList of this DisasterRecoveryConfigureActiveForReplication.

        :param standbyList: The standbyList of this DisasterRecoveryConfigureActiveForReplication.
        :type: list[StandbyVcoDesignee]
        """

        self._standbyList = standbyList

    @property
    def autoConfigStandby(self):
        """
        Gets the autoConfigStandby of this DisasterRecoveryConfigureActiveForReplication.

        :return: The autoConfigStandby of this DisasterRecoveryConfigureActiveForReplication.
        :rtype: bool
        """
        return self._autoConfigStandby

    @autoConfigStandby.setter
    def autoConfigStandby(self, autoConfigStandby):
        """
        Sets the autoConfigStandby of this DisasterRecoveryConfigureActiveForReplication.

        :param autoConfigStandby: The autoConfigStandby of this DisasterRecoveryConfigureActiveForReplication.
        :type: bool
        """

        self._autoConfigStandby = autoConfigStandby

    @property
    def drVCOUser(self):
        """
        Gets the drVCOUser of this DisasterRecoveryConfigureActiveForReplication.

        :return: The drVCOUser of this DisasterRecoveryConfigureActiveForReplication.
        :rtype: str
        """
        return self._drVCOUser

    @drVCOUser.setter
    def drVCOUser(self, drVCOUser):
        """
        Sets the drVCOUser of this DisasterRecoveryConfigureActiveForReplication.

        :param drVCOUser: The drVCOUser of this DisasterRecoveryConfigureActiveForReplication.
        :type: str
        """

        self._drVCOUser = drVCOUser

    @property
    def drVCOPassword(self):
        """
        Gets the drVCOPassword of this DisasterRecoveryConfigureActiveForReplication.

        :return: The drVCOPassword of this DisasterRecoveryConfigureActiveForReplication.
        :rtype: str
        """
        return self._drVCOPassword

    @drVCOPassword.setter
    def drVCOPassword(self, drVCOPassword):
        """
        Sets the drVCOPassword of this DisasterRecoveryConfigureActiveForReplication.

        :param drVCOPassword: The drVCOPassword of this DisasterRecoveryConfigureActiveForReplication.
        :type: str
        """

        self._drVCOPassword = drVCOPassword

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DisasterRecoveryConfigureActiveForReplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
