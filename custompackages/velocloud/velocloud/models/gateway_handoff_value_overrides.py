# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayHandoffValueOverrides(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, VLAN=None, bgp=None, bgpInboundMap=None, bgpOutboundMap=None, localAddress=None, subnets=None):
        """
        GatewayHandoffValueOverrides - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'VLAN': 'dict(str, GatewayHandoffValueOverridesVLAN)',
            'bgp': 'dict(str, GatewayHandoffValueBgp)',
            'bgpInboundMap': 'dict(str, GatewayHandoffBgpRulesMap)',
            'bgpOutboundMap': 'dict(str, GatewayHandoffBgpRulesMap)',
            'localAddress': 'dict(str, GatewayHandoffValueOverridesLocalAddress)',
            'subnets': 'dict(str, list[object])'
        }

        self.attribute_map = {
            'VLAN': 'VLAN',
            'bgp': 'bgp',
            'bgpInboundMap': 'bgpInboundMap',
            'bgpOutboundMap': 'bgpOutboundMap',
            'localAddress': 'localAddress',
            'subnets': 'subnets'
        }

        self._VLAN = VLAN
        self._bgp = bgp
        self._bgpInboundMap = bgpInboundMap
        self._bgpOutboundMap = bgpOutboundMap
        self._localAddress = localAddress
        self._subnets = subnets

    @property
    def VLAN(self):
        """
        Gets the VLAN of this GatewayHandoffValueOverrides.

        :return: The VLAN of this GatewayHandoffValueOverrides.
        :rtype: dict(str, GatewayHandoffValueOverridesVLAN)
        """
        return self._VLAN

    @VLAN.setter
    def VLAN(self, VLAN):
        """
        Sets the VLAN of this GatewayHandoffValueOverrides.

        :param VLAN: The VLAN of this GatewayHandoffValueOverrides.
        :type: dict(str, GatewayHandoffValueOverridesVLAN)
        """

        self._VLAN = VLAN

    @property
    def bgp(self):
        """
        Gets the bgp of this GatewayHandoffValueOverrides.

        :return: The bgp of this GatewayHandoffValueOverrides.
        :rtype: dict(str, GatewayHandoffValueBgp)
        """
        return self._bgp

    @bgp.setter
    def bgp(self, bgp):
        """
        Sets the bgp of this GatewayHandoffValueOverrides.

        :param bgp: The bgp of this GatewayHandoffValueOverrides.
        :type: dict(str, GatewayHandoffValueBgp)
        """

        self._bgp = bgp

    @property
    def bgpInboundMap(self):
        """
        Gets the bgpInboundMap of this GatewayHandoffValueOverrides.

        :return: The bgpInboundMap of this GatewayHandoffValueOverrides.
        :rtype: dict(str, GatewayHandoffBgpRulesMap)
        """
        return self._bgpInboundMap

    @bgpInboundMap.setter
    def bgpInboundMap(self, bgpInboundMap):
        """
        Sets the bgpInboundMap of this GatewayHandoffValueOverrides.

        :param bgpInboundMap: The bgpInboundMap of this GatewayHandoffValueOverrides.
        :type: dict(str, GatewayHandoffBgpRulesMap)
        """

        self._bgpInboundMap = bgpInboundMap

    @property
    def bgpOutboundMap(self):
        """
        Gets the bgpOutboundMap of this GatewayHandoffValueOverrides.

        :return: The bgpOutboundMap of this GatewayHandoffValueOverrides.
        :rtype: dict(str, GatewayHandoffBgpRulesMap)
        """
        return self._bgpOutboundMap

    @bgpOutboundMap.setter
    def bgpOutboundMap(self, bgpOutboundMap):
        """
        Sets the bgpOutboundMap of this GatewayHandoffValueOverrides.

        :param bgpOutboundMap: The bgpOutboundMap of this GatewayHandoffValueOverrides.
        :type: dict(str, GatewayHandoffBgpRulesMap)
        """

        self._bgpOutboundMap = bgpOutboundMap

    @property
    def localAddress(self):
        """
        Gets the localAddress of this GatewayHandoffValueOverrides.

        :return: The localAddress of this GatewayHandoffValueOverrides.
        :rtype: dict(str, GatewayHandoffValueOverridesLocalAddress)
        """
        return self._localAddress

    @localAddress.setter
    def localAddress(self, localAddress):
        """
        Sets the localAddress of this GatewayHandoffValueOverrides.

        :param localAddress: The localAddress of this GatewayHandoffValueOverrides.
        :type: dict(str, GatewayHandoffValueOverridesLocalAddress)
        """

        self._localAddress = localAddress

    @property
    def subnets(self):
        """
        Gets the subnets of this GatewayHandoffValueOverrides.

        :return: The subnets of this GatewayHandoffValueOverrides.
        :rtype: dict(str, list[object])
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """
        Sets the subnets of this GatewayHandoffValueOverrides.

        :param subnets: The subnets of this GatewayHandoffValueOverrides.
        :type: dict(str, list[object])
        """

        self._subnets = subnets

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayHandoffValueOverrides):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
