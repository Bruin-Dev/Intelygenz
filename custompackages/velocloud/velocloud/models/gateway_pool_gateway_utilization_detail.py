# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayPoolGatewayUtilizationDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, load=None, overall=None, cpu=None, memory=None):
        """
        GatewayPoolGatewayUtilizationDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'load': 'float',
            'overall': 'float',
            'cpu': 'float',
            'memory': 'float'
        }

        self.attribute_map = {
            'load': 'load',
            'overall': 'overall',
            'cpu': 'cpu',
            'memory': 'memory'
        }

        self._load = load
        self._overall = overall
        self._cpu = cpu
        self._memory = memory

    @property
    def load(self):
        """
        Gets the load of this GatewayPoolGatewayUtilizationDetail.

        :return: The load of this GatewayPoolGatewayUtilizationDetail.
        :rtype: float
        """
        return self._load

    @load.setter
    def load(self, load):
        """
        Sets the load of this GatewayPoolGatewayUtilizationDetail.

        :param load: The load of this GatewayPoolGatewayUtilizationDetail.
        :type: float
        """

        self._load = load

    @property
    def overall(self):
        """
        Gets the overall of this GatewayPoolGatewayUtilizationDetail.

        :return: The overall of this GatewayPoolGatewayUtilizationDetail.
        :rtype: float
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """
        Sets the overall of this GatewayPoolGatewayUtilizationDetail.

        :param overall: The overall of this GatewayPoolGatewayUtilizationDetail.
        :type: float
        """

        self._overall = overall

    @property
    def cpu(self):
        """
        Gets the cpu of this GatewayPoolGatewayUtilizationDetail.

        :return: The cpu of this GatewayPoolGatewayUtilizationDetail.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this GatewayPoolGatewayUtilizationDetail.

        :param cpu: The cpu of this GatewayPoolGatewayUtilizationDetail.
        :type: float
        """

        self._cpu = cpu

    @property
    def memory(self):
        """
        Gets the memory of this GatewayPoolGatewayUtilizationDetail.

        :return: The memory of this GatewayPoolGatewayUtilizationDetail.
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this GatewayPoolGatewayUtilizationDetail.

        :param memory: The memory of this GatewayPoolGatewayUtilizationDetail.
        :type: float
        """

        self._memory = memory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayPoolGatewayUtilizationDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
