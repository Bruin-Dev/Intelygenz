# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceSettingsDataRadioSettingsRadios(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, radioId=None, isEnabled=None, name=None, band=None, channel=None, width=None, mode=None):
        """
        DeviceSettingsDataRadioSettingsRadios - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'radioId': 'int',
            'isEnabled': 'bool',
            'name': 'str',
            'band': 'str',
            'channel': 'str',
            'width': 'str',
            'mode': 'str'
        }

        self.attribute_map = {
            'radioId': 'radioId',
            'isEnabled': 'isEnabled',
            'name': 'name',
            'band': 'band',
            'channel': 'channel',
            'width': 'width',
            'mode': 'mode'
        }

        self._radioId = radioId
        self._isEnabled = isEnabled
        self._name = name
        self._band = band
        self._channel = channel
        self._width = width
        self._mode = mode

    @property
    def radioId(self):
        """
        Gets the radioId of this DeviceSettingsDataRadioSettingsRadios.

        :return: The radioId of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: int
        """
        return self._radioId

    @radioId.setter
    def radioId(self, radioId):
        """
        Sets the radioId of this DeviceSettingsDataRadioSettingsRadios.

        :param radioId: The radioId of this DeviceSettingsDataRadioSettingsRadios.
        :type: int
        """

        self._radioId = radioId

    @property
    def isEnabled(self):
        """
        Gets the isEnabled of this DeviceSettingsDataRadioSettingsRadios.

        :return: The isEnabled of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: bool
        """
        return self._isEnabled

    @isEnabled.setter
    def isEnabled(self, isEnabled):
        """
        Sets the isEnabled of this DeviceSettingsDataRadioSettingsRadios.

        :param isEnabled: The isEnabled of this DeviceSettingsDataRadioSettingsRadios.
        :type: bool
        """

        self._isEnabled = isEnabled

    @property
    def name(self):
        """
        Gets the name of this DeviceSettingsDataRadioSettingsRadios.

        :return: The name of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeviceSettingsDataRadioSettingsRadios.

        :param name: The name of this DeviceSettingsDataRadioSettingsRadios.
        :type: str
        """

        self._name = name

    @property
    def band(self):
        """
        Gets the band of this DeviceSettingsDataRadioSettingsRadios.

        :return: The band of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """
        Sets the band of this DeviceSettingsDataRadioSettingsRadios.

        :param band: The band of this DeviceSettingsDataRadioSettingsRadios.
        :type: str
        """

        self._band = band

    @property
    def channel(self):
        """
        Gets the channel of this DeviceSettingsDataRadioSettingsRadios.

        :return: The channel of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this DeviceSettingsDataRadioSettingsRadios.

        :param channel: The channel of this DeviceSettingsDataRadioSettingsRadios.
        :type: str
        """

        self._channel = channel

    @property
    def width(self):
        """
        Gets the width of this DeviceSettingsDataRadioSettingsRadios.

        :return: The width of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this DeviceSettingsDataRadioSettingsRadios.

        :param width: The width of this DeviceSettingsDataRadioSettingsRadios.
        :type: str
        """

        self._width = width

    @property
    def mode(self):
        """
        Gets the mode of this DeviceSettingsDataRadioSettingsRadios.

        :return: The mode of this DeviceSettingsDataRadioSettingsRadios.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this DeviceSettingsDataRadioSettingsRadios.

        :param mode: The mode of this DeviceSettingsDataRadioSettingsRadios.
        :type: str
        """

        self._mode = mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceSettingsDataRadioSettingsRadios):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
