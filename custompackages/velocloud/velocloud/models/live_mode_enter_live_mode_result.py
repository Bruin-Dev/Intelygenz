# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LiveModeEnterLiveModeResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, actionId=None, alreadyLive=None, lastContact=None, refreshIntervalMs=None, token=None, url=None):
        """
        LiveModeEnterLiveModeResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'actionId': 'int',
            'alreadyLive': 'bool',
            'lastContact': 'int',
            'refreshIntervalMs': 'int',
            'token': 'str',
            'url': 'str'
        }

        self.attribute_map = {
            'actionId': 'actionId',
            'alreadyLive': 'alreadyLive',
            'lastContact': 'lastContact',
            'refreshIntervalMs': 'refreshIntervalMs',
            'token': 'token',
            'url': 'url'
        }

        self._actionId = actionId
        self._alreadyLive = alreadyLive
        self._lastContact = lastContact
        self._refreshIntervalMs = refreshIntervalMs
        self._token = token
        self._url = url

    @property
    def actionId(self):
        """
        Gets the actionId of this LiveModeEnterLiveModeResult.
        The ID of the action queued

        :return: The actionId of this LiveModeEnterLiveModeResult.
        :rtype: int
        """
        return self._actionId

    @actionId.setter
    def actionId(self, actionId):
        """
        Sets the actionId of this LiveModeEnterLiveModeResult.
        The ID of the action queued

        :param actionId: The actionId of this LiveModeEnterLiveModeResult.
        :type: int
        """

        self._actionId = actionId

    @property
    def alreadyLive(self):
        """
        Gets the alreadyLive of this LiveModeEnterLiveModeResult.

        :return: The alreadyLive of this LiveModeEnterLiveModeResult.
        :rtype: bool
        """
        return self._alreadyLive

    @alreadyLive.setter
    def alreadyLive(self, alreadyLive):
        """
        Sets the alreadyLive of this LiveModeEnterLiveModeResult.

        :param alreadyLive: The alreadyLive of this LiveModeEnterLiveModeResult.
        :type: bool
        """

        self._alreadyLive = alreadyLive

    @property
    def lastContact(self):
        """
        Gets the lastContact of this LiveModeEnterLiveModeResult.

        :return: The lastContact of this LiveModeEnterLiveModeResult.
        :rtype: int
        """
        return self._lastContact

    @lastContact.setter
    def lastContact(self, lastContact):
        """
        Sets the lastContact of this LiveModeEnterLiveModeResult.

        :param lastContact: The lastContact of this LiveModeEnterLiveModeResult.
        :type: int
        """

        self._lastContact = lastContact

    @property
    def refreshIntervalMs(self):
        """
        Gets the refreshIntervalMs of this LiveModeEnterLiveModeResult.

        :return: The refreshIntervalMs of this LiveModeEnterLiveModeResult.
        :rtype: int
        """
        return self._refreshIntervalMs

    @refreshIntervalMs.setter
    def refreshIntervalMs(self, refreshIntervalMs):
        """
        Sets the refreshIntervalMs of this LiveModeEnterLiveModeResult.

        :param refreshIntervalMs: The refreshIntervalMs of this LiveModeEnterLiveModeResult.
        :type: int
        """

        self._refreshIntervalMs = refreshIntervalMs

    @property
    def token(self):
        """
        Gets the token of this LiveModeEnterLiveModeResult.

        :return: The token of this LiveModeEnterLiveModeResult.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this LiveModeEnterLiveModeResult.

        :param token: The token of this LiveModeEnterLiveModeResult.
        :type: str
        """

        self._token = token

    @property
    def url(self):
        """
        Gets the url of this LiveModeEnterLiveModeResult.

        :return: The url of this LiveModeEnterLiveModeResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this LiveModeEnterLiveModeResult.

        :param url: The url of this LiveModeEnterLiveModeResult.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LiveModeEnterLiveModeResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
