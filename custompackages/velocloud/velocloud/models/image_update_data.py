# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageUpdateData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, buildNumber=None, profileDeviceFamily=None, profileVersion=None, softwarePackageId=None, softwarePackageName=None, version=None, windowDurationMins=None, windowed=None):
        """
        ImageUpdateData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'buildNumber': 'str',
            'profileDeviceFamily': 'str',
            'profileVersion': 'str',
            'softwarePackageId': 'int',
            'softwarePackageName': 'str',
            'version': 'str',
            'windowDurationMins': 'int',
            'windowed': 'bool'
        }

        self.attribute_map = {
            'buildNumber': 'buildNumber',
            'profileDeviceFamily': 'profileDeviceFamily',
            'profileVersion': 'profileVersion',
            'softwarePackageId': 'softwarePackageId',
            'softwarePackageName': 'softwarePackageName',
            'version': 'version',
            'windowDurationMins': 'windowDurationMins',
            'windowed': 'windowed'
        }

        self._buildNumber = buildNumber
        self._profileDeviceFamily = profileDeviceFamily
        self._profileVersion = profileVersion
        self._softwarePackageId = softwarePackageId
        self._softwarePackageName = softwarePackageName
        self._version = version
        self._windowDurationMins = windowDurationMins
        self._windowed = windowed

    @property
    def buildNumber(self):
        """
        Gets the buildNumber of this ImageUpdateData.

        :return: The buildNumber of this ImageUpdateData.
        :rtype: str
        """
        return self._buildNumber

    @buildNumber.setter
    def buildNumber(self, buildNumber):
        """
        Sets the buildNumber of this ImageUpdateData.

        :param buildNumber: The buildNumber of this ImageUpdateData.
        :type: str
        """

        self._buildNumber = buildNumber

    @property
    def profileDeviceFamily(self):
        """
        Gets the profileDeviceFamily of this ImageUpdateData.

        :return: The profileDeviceFamily of this ImageUpdateData.
        :rtype: str
        """
        return self._profileDeviceFamily

    @profileDeviceFamily.setter
    def profileDeviceFamily(self, profileDeviceFamily):
        """
        Sets the profileDeviceFamily of this ImageUpdateData.

        :param profileDeviceFamily: The profileDeviceFamily of this ImageUpdateData.
        :type: str
        """

        self._profileDeviceFamily = profileDeviceFamily

    @property
    def profileVersion(self):
        """
        Gets the profileVersion of this ImageUpdateData.

        :return: The profileVersion of this ImageUpdateData.
        :rtype: str
        """
        return self._profileVersion

    @profileVersion.setter
    def profileVersion(self, profileVersion):
        """
        Sets the profileVersion of this ImageUpdateData.

        :param profileVersion: The profileVersion of this ImageUpdateData.
        :type: str
        """

        self._profileVersion = profileVersion

    @property
    def softwarePackageId(self):
        """
        Gets the softwarePackageId of this ImageUpdateData.

        :return: The softwarePackageId of this ImageUpdateData.
        :rtype: int
        """
        return self._softwarePackageId

    @softwarePackageId.setter
    def softwarePackageId(self, softwarePackageId):
        """
        Sets the softwarePackageId of this ImageUpdateData.

        :param softwarePackageId: The softwarePackageId of this ImageUpdateData.
        :type: int
        """

        self._softwarePackageId = softwarePackageId

    @property
    def softwarePackageName(self):
        """
        Gets the softwarePackageName of this ImageUpdateData.

        :return: The softwarePackageName of this ImageUpdateData.
        :rtype: str
        """
        return self._softwarePackageName

    @softwarePackageName.setter
    def softwarePackageName(self, softwarePackageName):
        """
        Sets the softwarePackageName of this ImageUpdateData.

        :param softwarePackageName: The softwarePackageName of this ImageUpdateData.
        :type: str
        """

        self._softwarePackageName = softwarePackageName

    @property
    def version(self):
        """
        Gets the version of this ImageUpdateData.

        :return: The version of this ImageUpdateData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ImageUpdateData.

        :param version: The version of this ImageUpdateData.
        :type: str
        """

        self._version = version

    @property
    def windowDurationMins(self):
        """
        Gets the windowDurationMins of this ImageUpdateData.

        :return: The windowDurationMins of this ImageUpdateData.
        :rtype: int
        """
        return self._windowDurationMins

    @windowDurationMins.setter
    def windowDurationMins(self, windowDurationMins):
        """
        Sets the windowDurationMins of this ImageUpdateData.

        :param windowDurationMins: The windowDurationMins of this ImageUpdateData.
        :type: int
        """

        self._windowDurationMins = windowDurationMins

    @property
    def windowed(self):
        """
        Gets the windowed of this ImageUpdateData.

        :return: The windowed of this ImageUpdateData.
        :rtype: bool
        """
        return self._windowed

    @windowed.setter
    def windowed(self, windowed):
        """
        Sets the windowed of this ImageUpdateData.

        :param windowed: The windowed of this ImageUpdateData.
        :type: bool
        """

        self._windowed = windowed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageUpdateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
