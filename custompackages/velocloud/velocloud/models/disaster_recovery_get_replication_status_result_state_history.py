# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DisasterRecoveryGetReplicationStatusResultStateHistory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, _from=None, to=None, timestamp=None):
        """
        DisasterRecoveryGetReplicationStatusResultStateHistory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            '_from': 'str',
            'to': 'str',
            'timestamp': 'datetime'
        }

        self.attribute_map = {
            '_from': 'from',
            'to': 'to',
            'timestamp': 'timestamp'
        }

        self.__from = _from
        self._to = to
        self._timestamp = timestamp

    @property
    def _from(self):
        """
        Gets the _from of this DisasterRecoveryGetReplicationStatusResultStateHistory.

        :return: The _from of this DisasterRecoveryGetReplicationStatusResultStateHistory.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this DisasterRecoveryGetReplicationStatusResultStateHistory.

        :param _from: The _from of this DisasterRecoveryGetReplicationStatusResultStateHistory.
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this DisasterRecoveryGetReplicationStatusResultStateHistory.

        :return: The to of this DisasterRecoveryGetReplicationStatusResultStateHistory.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this DisasterRecoveryGetReplicationStatusResultStateHistory.

        :param to: The to of this DisasterRecoveryGetReplicationStatusResultStateHistory.
        :type: str
        """

        self._to = to

    @property
    def timestamp(self):
        """
        Gets the timestamp of this DisasterRecoveryGetReplicationStatusResultStateHistory.

        :return: The timestamp of this DisasterRecoveryGetReplicationStatusResultStateHistory.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this DisasterRecoveryGetReplicationStatusResultStateHistory.

        :param timestamp: The timestamp of this DisasterRecoveryGetReplicationStatusResultStateHistory.
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DisasterRecoveryGetReplicationStatusResultStateHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
