# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeEdgeProvision(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enterpriseId=None, configurationId=None, name=None, serialNumber=None, modelNumber=None, description=None, site=None, haEnabled=None, generateCertificate=None, subjectCN=None, subjectO=None, subjectOU=None, challengePassword=None, privateKeyPassword=None):
        """
        EdgeEdgeProvision - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enterpriseId': 'int',
            'configurationId': 'int',
            'name': 'str',
            'serialNumber': 'str',
            'modelNumber': 'str',
            'description': 'str',
            'site': 'SiteObject',
            'haEnabled': 'bool',
            'generateCertificate': 'bool',
            'subjectCN': 'str',
            'subjectO': 'str',
            'subjectOU': 'str',
            'challengePassword': 'str',
            'privateKeyPassword': 'str'
        }

        self.attribute_map = {
            'enterpriseId': 'enterpriseId',
            'configurationId': 'configurationId',
            'name': 'name',
            'serialNumber': 'serialNumber',
            'modelNumber': 'modelNumber',
            'description': 'description',
            'site': 'site',
            'haEnabled': 'haEnabled',
            'generateCertificate': 'generateCertificate',
            'subjectCN': 'subjectCN',
            'subjectO': 'subjectO',
            'subjectOU': 'subjectOU',
            'challengePassword': 'challengePassword',
            'privateKeyPassword': 'privateKeyPassword'
        }

        self._enterpriseId = enterpriseId
        self._configurationId = configurationId
        self._name = name
        self._serialNumber = serialNumber
        self._modelNumber = modelNumber
        self._description = description
        self._site = site
        self._haEnabled = haEnabled
        self._generateCertificate = generateCertificate
        self._subjectCN = subjectCN
        self._subjectO = subjectO
        self._subjectOU = subjectOU
        self._challengePassword = challengePassword
        self._privateKeyPassword = privateKeyPassword

    @property
    def enterpriseId(self):
        """
        Gets the enterpriseId of this EdgeEdgeProvision.

        :return: The enterpriseId of this EdgeEdgeProvision.
        :rtype: int
        """
        return self._enterpriseId

    @enterpriseId.setter
    def enterpriseId(self, enterpriseId):
        """
        Sets the enterpriseId of this EdgeEdgeProvision.

        :param enterpriseId: The enterpriseId of this EdgeEdgeProvision.
        :type: int
        """

        self._enterpriseId = enterpriseId

    @property
    def configurationId(self):
        """
        Gets the configurationId of this EdgeEdgeProvision.

        :return: The configurationId of this EdgeEdgeProvision.
        :rtype: int
        """
        return self._configurationId

    @configurationId.setter
    def configurationId(self, configurationId):
        """
        Sets the configurationId of this EdgeEdgeProvision.

        :param configurationId: The configurationId of this EdgeEdgeProvision.
        :type: int
        """

        self._configurationId = configurationId

    @property
    def name(self):
        """
        Gets the name of this EdgeEdgeProvision.

        :return: The name of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EdgeEdgeProvision.

        :param name: The name of this EdgeEdgeProvision.
        :type: str
        """

        self._name = name

    @property
    def serialNumber(self):
        """
        Gets the serialNumber of this EdgeEdgeProvision.

        :return: The serialNumber of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._serialNumber

    @serialNumber.setter
    def serialNumber(self, serialNumber):
        """
        Sets the serialNumber of this EdgeEdgeProvision.

        :param serialNumber: The serialNumber of this EdgeEdgeProvision.
        :type: str
        """

        self._serialNumber = serialNumber

    @property
    def modelNumber(self):
        """
        Gets the modelNumber of this EdgeEdgeProvision.

        :return: The modelNumber of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._modelNumber

    @modelNumber.setter
    def modelNumber(self, modelNumber):
        """
        Sets the modelNumber of this EdgeEdgeProvision.

        :param modelNumber: The modelNumber of this EdgeEdgeProvision.
        :type: str
        """

        self._modelNumber = modelNumber

    @property
    def description(self):
        """
        Gets the description of this EdgeEdgeProvision.

        :return: The description of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EdgeEdgeProvision.

        :param description: The description of this EdgeEdgeProvision.
        :type: str
        """

        self._description = description

    @property
    def site(self):
        """
        Gets the site of this EdgeEdgeProvision.

        :return: The site of this EdgeEdgeProvision.
        :rtype: SiteObject
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this EdgeEdgeProvision.

        :param site: The site of this EdgeEdgeProvision.
        :type: SiteObject
        """

        self._site = site

    @property
    def haEnabled(self):
        """
        Gets the haEnabled of this EdgeEdgeProvision.

        :return: The haEnabled of this EdgeEdgeProvision.
        :rtype: bool
        """
        return self._haEnabled

    @haEnabled.setter
    def haEnabled(self, haEnabled):
        """
        Sets the haEnabled of this EdgeEdgeProvision.

        :param haEnabled: The haEnabled of this EdgeEdgeProvision.
        :type: bool
        """

        self._haEnabled = haEnabled

    @property
    def generateCertificate(self):
        """
        Gets the generateCertificate of this EdgeEdgeProvision.

        :return: The generateCertificate of this EdgeEdgeProvision.
        :rtype: bool
        """
        return self._generateCertificate

    @generateCertificate.setter
    def generateCertificate(self, generateCertificate):
        """
        Sets the generateCertificate of this EdgeEdgeProvision.

        :param generateCertificate: The generateCertificate of this EdgeEdgeProvision.
        :type: bool
        """

        self._generateCertificate = generateCertificate

    @property
    def subjectCN(self):
        """
        Gets the subjectCN of this EdgeEdgeProvision.

        :return: The subjectCN of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._subjectCN

    @subjectCN.setter
    def subjectCN(self, subjectCN):
        """
        Sets the subjectCN of this EdgeEdgeProvision.

        :param subjectCN: The subjectCN of this EdgeEdgeProvision.
        :type: str
        """

        self._subjectCN = subjectCN

    @property
    def subjectO(self):
        """
        Gets the subjectO of this EdgeEdgeProvision.

        :return: The subjectO of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._subjectO

    @subjectO.setter
    def subjectO(self, subjectO):
        """
        Sets the subjectO of this EdgeEdgeProvision.

        :param subjectO: The subjectO of this EdgeEdgeProvision.
        :type: str
        """

        self._subjectO = subjectO

    @property
    def subjectOU(self):
        """
        Gets the subjectOU of this EdgeEdgeProvision.

        :return: The subjectOU of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._subjectOU

    @subjectOU.setter
    def subjectOU(self, subjectOU):
        """
        Sets the subjectOU of this EdgeEdgeProvision.

        :param subjectOU: The subjectOU of this EdgeEdgeProvision.
        :type: str
        """

        self._subjectOU = subjectOU

    @property
    def challengePassword(self):
        """
        Gets the challengePassword of this EdgeEdgeProvision.

        :return: The challengePassword of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._challengePassword

    @challengePassword.setter
    def challengePassword(self, challengePassword):
        """
        Sets the challengePassword of this EdgeEdgeProvision.

        :param challengePassword: The challengePassword of this EdgeEdgeProvision.
        :type: str
        """

        self._challengePassword = challengePassword

    @property
    def privateKeyPassword(self):
        """
        Gets the privateKeyPassword of this EdgeEdgeProvision.

        :return: The privateKeyPassword of this EdgeEdgeProvision.
        :rtype: str
        """
        return self._privateKeyPassword

    @privateKeyPassword.setter
    def privateKeyPassword(self, privateKeyPassword):
        """
        Sets the privateKeyPassword of this EdgeEdgeProvision.

        :param privateKeyPassword: The privateKeyPassword of this EdgeEdgeProvision.
        :type: str
        """

        self._privateKeyPassword = privateKeyPassword

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeEdgeProvision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
