# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeDeviceSettingsDataDhcpServer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, baseDhcpAddr=None, enabled=None, leaseTimeSeconds=None, dhcpRelay=None, numDhcpAddr=None, staticReserved=None, options=None):
        """
        EdgeDeviceSettingsDataDhcpServer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'baseDhcpAddr': 'int',
            'enabled': 'bool',
            'leaseTimeSeconds': 'int',
            'dhcpRelay': 'EdgeDeviceSettingsDataLanDhcpDhcpRelay',
            'numDhcpAddr': 'int',
            'staticReserved': 'int',
            'options': 'list[EdgeDeviceSettingsDataDhcpServerOptions]'
        }

        self.attribute_map = {
            'baseDhcpAddr': 'baseDhcpAddr',
            'enabled': 'enabled',
            'leaseTimeSeconds': 'leaseTimeSeconds',
            'dhcpRelay': 'dhcpRelay',
            'numDhcpAddr': 'numDhcpAddr',
            'staticReserved': 'staticReserved',
            'options': 'options'
        }

        self._baseDhcpAddr = baseDhcpAddr
        self._enabled = enabled
        self._leaseTimeSeconds = leaseTimeSeconds
        self._dhcpRelay = dhcpRelay
        self._numDhcpAddr = numDhcpAddr
        self._staticReserved = staticReserved
        self._options = options

    @property
    def baseDhcpAddr(self):
        """
        Gets the baseDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.

        :return: The baseDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: int
        """
        return self._baseDhcpAddr

    @baseDhcpAddr.setter
    def baseDhcpAddr(self, baseDhcpAddr):
        """
        Sets the baseDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.

        :param baseDhcpAddr: The baseDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.
        :type: int
        """

        self._baseDhcpAddr = baseDhcpAddr

    @property
    def enabled(self):
        """
        Gets the enabled of this EdgeDeviceSettingsDataDhcpServer.

        :return: The enabled of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this EdgeDeviceSettingsDataDhcpServer.

        :param enabled: The enabled of this EdgeDeviceSettingsDataDhcpServer.
        :type: bool
        """

        self._enabled = enabled

    @property
    def leaseTimeSeconds(self):
        """
        Gets the leaseTimeSeconds of this EdgeDeviceSettingsDataDhcpServer.

        :return: The leaseTimeSeconds of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: int
        """
        return self._leaseTimeSeconds

    @leaseTimeSeconds.setter
    def leaseTimeSeconds(self, leaseTimeSeconds):
        """
        Sets the leaseTimeSeconds of this EdgeDeviceSettingsDataDhcpServer.

        :param leaseTimeSeconds: The leaseTimeSeconds of this EdgeDeviceSettingsDataDhcpServer.
        :type: int
        """

        self._leaseTimeSeconds = leaseTimeSeconds

    @property
    def dhcpRelay(self):
        """
        Gets the dhcpRelay of this EdgeDeviceSettingsDataDhcpServer.

        :return: The dhcpRelay of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: EdgeDeviceSettingsDataLanDhcpDhcpRelay
        """
        return self._dhcpRelay

    @dhcpRelay.setter
    def dhcpRelay(self, dhcpRelay):
        """
        Sets the dhcpRelay of this EdgeDeviceSettingsDataDhcpServer.

        :param dhcpRelay: The dhcpRelay of this EdgeDeviceSettingsDataDhcpServer.
        :type: EdgeDeviceSettingsDataLanDhcpDhcpRelay
        """

        self._dhcpRelay = dhcpRelay

    @property
    def numDhcpAddr(self):
        """
        Gets the numDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.

        :return: The numDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: int
        """
        return self._numDhcpAddr

    @numDhcpAddr.setter
    def numDhcpAddr(self, numDhcpAddr):
        """
        Sets the numDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.

        :param numDhcpAddr: The numDhcpAddr of this EdgeDeviceSettingsDataDhcpServer.
        :type: int
        """

        self._numDhcpAddr = numDhcpAddr

    @property
    def staticReserved(self):
        """
        Gets the staticReserved of this EdgeDeviceSettingsDataDhcpServer.

        :return: The staticReserved of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: int
        """
        return self._staticReserved

    @staticReserved.setter
    def staticReserved(self, staticReserved):
        """
        Sets the staticReserved of this EdgeDeviceSettingsDataDhcpServer.

        :param staticReserved: The staticReserved of this EdgeDeviceSettingsDataDhcpServer.
        :type: int
        """

        self._staticReserved = staticReserved

    @property
    def options(self):
        """
        Gets the options of this EdgeDeviceSettingsDataDhcpServer.

        :return: The options of this EdgeDeviceSettingsDataDhcpServer.
        :rtype: list[EdgeDeviceSettingsDataDhcpServerOptions]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this EdgeDeviceSettingsDataDhcpServer.

        :param options: The options of this EdgeDeviceSettingsDataDhcpServer.
        :type: list[EdgeDeviceSettingsDataDhcpServerOptions]
        """

        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeDeviceSettingsDataDhcpServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
