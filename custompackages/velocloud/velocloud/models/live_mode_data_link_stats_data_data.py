# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LiveModeDataLinkStatsDataData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, backupOnly=None, bestJitterMsRx=None, bestJitterMsTx=None, bestLatencyMsRx=None, bestLatencyMsTx=None, bestLossPctRx=None, bestLossPctTx=None, bpsOfBestPathRx=None, bpsOfBestPathTx=None, bytesRx=None, bytesTx=None, controlBytesRx=None, controlBytesTx=None, controlPacketsRx=None, controlPacketsTx=None, destinations=None, icmpBytesRx=None, icmpBytesTx=None, icmpPacketsRx=None, icmpPacketsTx=None, interface=None, internalId=None, localIpAddress=None, logicalId=None, mode=None, mtu=None, name=None, otherBytesRx=None, otherBytesTx=None, otherPacketsRx=None, otherPacketsTx=None, p1BytesRx=None, p1BytesTx=None, p1PacketsRx=None, p1PacketsTx=None, p2BytesRx=None, p2BytesTx=None, p2PacketsRx=None, p2PacketsTx=None, p3BytesRx=None, p3BytesTx=None, p3PacketsRx=None, p3PacketsTx=None, publicIpAddress=None, scoreRx=None, scoreTx=None, signalStrength=None, state=None, tcpBytesRx=None, tcpBytesTx=None, tcpPacketsRx=None, tcpPacketsTx=None, type=None, udpBytesRx=None, udpBytesTx=None, udpHolePunching=None, udpPacketsRx=None, udpPacketsTx=None, vlanId=None, vpnState=None):
        """
        LiveModeDataLinkStatsDataData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'backupOnly': 'int',
            'bestJitterMsRx': 'int',
            'bestJitterMsTx': 'int',
            'bestLatencyMsRx': 'int',
            'bestLatencyMsTx': 'int',
            'bestLossPctRx': 'int',
            'bestLossPctTx': 'int',
            'bpsOfBestPathRx': 'int',
            'bpsOfBestPathTx': 'int',
            'bytesRx': 'int',
            'bytesTx': 'int',
            'controlBytesRx': 'int',
            'controlBytesTx': 'int',
            'controlPacketsRx': 'int',
            'controlPacketsTx': 'int',
            'destinations': 'list[Destinations]',
            'icmpBytesRx': 'int',
            'icmpBytesTx': 'int',
            'icmpPacketsRx': 'int',
            'icmpPacketsTx': 'int',
            'interface': 'str',
            'internalId': 'str',
            'localIpAddress': 'str',
            'logicalId': 'str',
            'mode': 'str',
            'mtu': 'int',
            'name': 'str',
            'otherBytesRx': 'int',
            'otherBytesTx': 'int',
            'otherPacketsRx': 'int',
            'otherPacketsTx': 'int',
            'p1BytesRx': 'int',
            'p1BytesTx': 'int',
            'p1PacketsRx': 'int',
            'p1PacketsTx': 'int',
            'p2BytesRx': 'int',
            'p2BytesTx': 'int',
            'p2PacketsRx': 'int',
            'p2PacketsTx': 'int',
            'p3BytesRx': 'int',
            'p3BytesTx': 'int',
            'p3PacketsRx': 'int',
            'p3PacketsTx': 'int',
            'publicIpAddress': 'str',
            'scoreRx': 'int',
            'scoreTx': 'int',
            'signalStrength': 'int',
            'state': 'str',
            'tcpBytesRx': 'int',
            'tcpBytesTx': 'int',
            'tcpPacketsRx': 'int',
            'tcpPacketsTx': 'int',
            'type': 'str',
            'udpBytesRx': 'int',
            'udpBytesTx': 'int',
            'udpHolePunching': 'int',
            'udpPacketsRx': 'int',
            'udpPacketsTx': 'int',
            'vlanId': 'int',
            'vpnState': 'str'
        }

        self.attribute_map = {
            'backupOnly': 'backupOnly',
            'bestJitterMsRx': 'bestJitterMsRx',
            'bestJitterMsTx': 'bestJitterMsTx',
            'bestLatencyMsRx': 'bestLatencyMsRx',
            'bestLatencyMsTx': 'bestLatencyMsTx',
            'bestLossPctRx': 'bestLossPctRx',
            'bestLossPctTx': 'bestLossPctTx',
            'bpsOfBestPathRx': 'bpsOfBestPathRx',
            'bpsOfBestPathTx': 'bpsOfBestPathTx',
            'bytesRx': 'bytesRx',
            'bytesTx': 'bytesTx',
            'controlBytesRx': 'controlBytesRx',
            'controlBytesTx': 'controlBytesTx',
            'controlPacketsRx': 'controlPacketsRx',
            'controlPacketsTx': 'controlPacketsTx',
            'destinations': 'destinations',
            'icmpBytesRx': 'icmpBytesRx',
            'icmpBytesTx': 'icmpBytesTx',
            'icmpPacketsRx': 'icmpPacketsRx',
            'icmpPacketsTx': 'icmpPacketsTx',
            'interface': 'interface',
            'internalId': 'internalId',
            'localIpAddress': 'localIpAddress',
            'logicalId': 'logicalId',
            'mode': 'mode',
            'mtu': 'mtu',
            'name': 'name',
            'otherBytesRx': 'otherBytesRx',
            'otherBytesTx': 'otherBytesTx',
            'otherPacketsRx': 'otherPacketsRx',
            'otherPacketsTx': 'otherPacketsTx',
            'p1BytesRx': 'p1BytesRx',
            'p1BytesTx': 'p1BytesTx',
            'p1PacketsRx': 'p1PacketsRx',
            'p1PacketsTx': 'p1PacketsTx',
            'p2BytesRx': 'p2BytesRx',
            'p2BytesTx': 'p2BytesTx',
            'p2PacketsRx': 'p2PacketsRx',
            'p2PacketsTx': 'p2PacketsTx',
            'p3BytesRx': 'p3BytesRx',
            'p3BytesTx': 'p3BytesTx',
            'p3PacketsRx': 'p3PacketsRx',
            'p3PacketsTx': 'p3PacketsTx',
            'publicIpAddress': 'publicIpAddress',
            'scoreRx': 'scoreRx',
            'scoreTx': 'scoreTx',
            'signalStrength': 'signalStrength',
            'state': 'state',
            'tcpBytesRx': 'tcpBytesRx',
            'tcpBytesTx': 'tcpBytesTx',
            'tcpPacketsRx': 'tcpPacketsRx',
            'tcpPacketsTx': 'tcpPacketsTx',
            'type': 'type',
            'udpBytesRx': 'udpBytesRx',
            'udpBytesTx': 'udpBytesTx',
            'udpHolePunching': 'udpHolePunching',
            'udpPacketsRx': 'udpPacketsRx',
            'udpPacketsTx': 'udpPacketsTx',
            'vlanId': 'vlanId',
            'vpnState': 'vpnState'
        }

        self._backupOnly = backupOnly
        self._bestJitterMsRx = bestJitterMsRx
        self._bestJitterMsTx = bestJitterMsTx
        self._bestLatencyMsRx = bestLatencyMsRx
        self._bestLatencyMsTx = bestLatencyMsTx
        self._bestLossPctRx = bestLossPctRx
        self._bestLossPctTx = bestLossPctTx
        self._bpsOfBestPathRx = bpsOfBestPathRx
        self._bpsOfBestPathTx = bpsOfBestPathTx
        self._bytesRx = bytesRx
        self._bytesTx = bytesTx
        self._controlBytesRx = controlBytesRx
        self._controlBytesTx = controlBytesTx
        self._controlPacketsRx = controlPacketsRx
        self._controlPacketsTx = controlPacketsTx
        self._destinations = destinations
        self._icmpBytesRx = icmpBytesRx
        self._icmpBytesTx = icmpBytesTx
        self._icmpPacketsRx = icmpPacketsRx
        self._icmpPacketsTx = icmpPacketsTx
        self._interface = interface
        self._internalId = internalId
        self._localIpAddress = localIpAddress
        self._logicalId = logicalId
        self._mode = mode
        self._mtu = mtu
        self._name = name
        self._otherBytesRx = otherBytesRx
        self._otherBytesTx = otherBytesTx
        self._otherPacketsRx = otherPacketsRx
        self._otherPacketsTx = otherPacketsTx
        self._p1BytesRx = p1BytesRx
        self._p1BytesTx = p1BytesTx
        self._p1PacketsRx = p1PacketsRx
        self._p1PacketsTx = p1PacketsTx
        self._p2BytesRx = p2BytesRx
        self._p2BytesTx = p2BytesTx
        self._p2PacketsRx = p2PacketsRx
        self._p2PacketsTx = p2PacketsTx
        self._p3BytesRx = p3BytesRx
        self._p3BytesTx = p3BytesTx
        self._p3PacketsRx = p3PacketsRx
        self._p3PacketsTx = p3PacketsTx
        self._publicIpAddress = publicIpAddress
        self._scoreRx = scoreRx
        self._scoreTx = scoreTx
        self._signalStrength = signalStrength
        self._state = state
        self._tcpBytesRx = tcpBytesRx
        self._tcpBytesTx = tcpBytesTx
        self._tcpPacketsRx = tcpPacketsRx
        self._tcpPacketsTx = tcpPacketsTx
        self._type = type
        self._udpBytesRx = udpBytesRx
        self._udpBytesTx = udpBytesTx
        self._udpHolePunching = udpHolePunching
        self._udpPacketsRx = udpPacketsRx
        self._udpPacketsTx = udpPacketsTx
        self._vlanId = vlanId
        self._vpnState = vpnState

    @property
    def backupOnly(self):
        """
        Gets the backupOnly of this LiveModeDataLinkStatsDataData.

        :return: The backupOnly of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._backupOnly

    @backupOnly.setter
    def backupOnly(self, backupOnly):
        """
        Sets the backupOnly of this LiveModeDataLinkStatsDataData.

        :param backupOnly: The backupOnly of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._backupOnly = backupOnly

    @property
    def bestJitterMsRx(self):
        """
        Gets the bestJitterMsRx of this LiveModeDataLinkStatsDataData.

        :return: The bestJitterMsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bestJitterMsRx

    @bestJitterMsRx.setter
    def bestJitterMsRx(self, bestJitterMsRx):
        """
        Sets the bestJitterMsRx of this LiveModeDataLinkStatsDataData.

        :param bestJitterMsRx: The bestJitterMsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bestJitterMsRx = bestJitterMsRx

    @property
    def bestJitterMsTx(self):
        """
        Gets the bestJitterMsTx of this LiveModeDataLinkStatsDataData.

        :return: The bestJitterMsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bestJitterMsTx

    @bestJitterMsTx.setter
    def bestJitterMsTx(self, bestJitterMsTx):
        """
        Sets the bestJitterMsTx of this LiveModeDataLinkStatsDataData.

        :param bestJitterMsTx: The bestJitterMsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bestJitterMsTx = bestJitterMsTx

    @property
    def bestLatencyMsRx(self):
        """
        Gets the bestLatencyMsRx of this LiveModeDataLinkStatsDataData.

        :return: The bestLatencyMsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bestLatencyMsRx

    @bestLatencyMsRx.setter
    def bestLatencyMsRx(self, bestLatencyMsRx):
        """
        Sets the bestLatencyMsRx of this LiveModeDataLinkStatsDataData.

        :param bestLatencyMsRx: The bestLatencyMsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bestLatencyMsRx = bestLatencyMsRx

    @property
    def bestLatencyMsTx(self):
        """
        Gets the bestLatencyMsTx of this LiveModeDataLinkStatsDataData.

        :return: The bestLatencyMsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bestLatencyMsTx

    @bestLatencyMsTx.setter
    def bestLatencyMsTx(self, bestLatencyMsTx):
        """
        Sets the bestLatencyMsTx of this LiveModeDataLinkStatsDataData.

        :param bestLatencyMsTx: The bestLatencyMsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bestLatencyMsTx = bestLatencyMsTx

    @property
    def bestLossPctRx(self):
        """
        Gets the bestLossPctRx of this LiveModeDataLinkStatsDataData.

        :return: The bestLossPctRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bestLossPctRx

    @bestLossPctRx.setter
    def bestLossPctRx(self, bestLossPctRx):
        """
        Sets the bestLossPctRx of this LiveModeDataLinkStatsDataData.

        :param bestLossPctRx: The bestLossPctRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bestLossPctRx = bestLossPctRx

    @property
    def bestLossPctTx(self):
        """
        Gets the bestLossPctTx of this LiveModeDataLinkStatsDataData.

        :return: The bestLossPctTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bestLossPctTx

    @bestLossPctTx.setter
    def bestLossPctTx(self, bestLossPctTx):
        """
        Sets the bestLossPctTx of this LiveModeDataLinkStatsDataData.

        :param bestLossPctTx: The bestLossPctTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bestLossPctTx = bestLossPctTx

    @property
    def bpsOfBestPathRx(self):
        """
        Gets the bpsOfBestPathRx of this LiveModeDataLinkStatsDataData.

        :return: The bpsOfBestPathRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bpsOfBestPathRx

    @bpsOfBestPathRx.setter
    def bpsOfBestPathRx(self, bpsOfBestPathRx):
        """
        Sets the bpsOfBestPathRx of this LiveModeDataLinkStatsDataData.

        :param bpsOfBestPathRx: The bpsOfBestPathRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bpsOfBestPathRx = bpsOfBestPathRx

    @property
    def bpsOfBestPathTx(self):
        """
        Gets the bpsOfBestPathTx of this LiveModeDataLinkStatsDataData.

        :return: The bpsOfBestPathTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bpsOfBestPathTx

    @bpsOfBestPathTx.setter
    def bpsOfBestPathTx(self, bpsOfBestPathTx):
        """
        Sets the bpsOfBestPathTx of this LiveModeDataLinkStatsDataData.

        :param bpsOfBestPathTx: The bpsOfBestPathTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bpsOfBestPathTx = bpsOfBestPathTx

    @property
    def bytesRx(self):
        """
        Gets the bytesRx of this LiveModeDataLinkStatsDataData.

        :return: The bytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bytesRx

    @bytesRx.setter
    def bytesRx(self, bytesRx):
        """
        Sets the bytesRx of this LiveModeDataLinkStatsDataData.

        :param bytesRx: The bytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bytesRx = bytesRx

    @property
    def bytesTx(self):
        """
        Gets the bytesTx of this LiveModeDataLinkStatsDataData.

        :return: The bytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._bytesTx

    @bytesTx.setter
    def bytesTx(self, bytesTx):
        """
        Sets the bytesTx of this LiveModeDataLinkStatsDataData.

        :param bytesTx: The bytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._bytesTx = bytesTx

    @property
    def controlBytesRx(self):
        """
        Gets the controlBytesRx of this LiveModeDataLinkStatsDataData.

        :return: The controlBytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._controlBytesRx

    @controlBytesRx.setter
    def controlBytesRx(self, controlBytesRx):
        """
        Sets the controlBytesRx of this LiveModeDataLinkStatsDataData.

        :param controlBytesRx: The controlBytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._controlBytesRx = controlBytesRx

    @property
    def controlBytesTx(self):
        """
        Gets the controlBytesTx of this LiveModeDataLinkStatsDataData.

        :return: The controlBytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._controlBytesTx

    @controlBytesTx.setter
    def controlBytesTx(self, controlBytesTx):
        """
        Sets the controlBytesTx of this LiveModeDataLinkStatsDataData.

        :param controlBytesTx: The controlBytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._controlBytesTx = controlBytesTx

    @property
    def controlPacketsRx(self):
        """
        Gets the controlPacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The controlPacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._controlPacketsRx

    @controlPacketsRx.setter
    def controlPacketsRx(self, controlPacketsRx):
        """
        Sets the controlPacketsRx of this LiveModeDataLinkStatsDataData.

        :param controlPacketsRx: The controlPacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._controlPacketsRx = controlPacketsRx

    @property
    def controlPacketsTx(self):
        """
        Gets the controlPacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The controlPacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._controlPacketsTx

    @controlPacketsTx.setter
    def controlPacketsTx(self, controlPacketsTx):
        """
        Sets the controlPacketsTx of this LiveModeDataLinkStatsDataData.

        :param controlPacketsTx: The controlPacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._controlPacketsTx = controlPacketsTx

    @property
    def destinations(self):
        """
        Gets the destinations of this LiveModeDataLinkStatsDataData.

        :return: The destinations of this LiveModeDataLinkStatsDataData.
        :rtype: list[Destinations]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """
        Sets the destinations of this LiveModeDataLinkStatsDataData.

        :param destinations: The destinations of this LiveModeDataLinkStatsDataData.
        :type: list[Destinations]
        """

        self._destinations = destinations

    @property
    def icmpBytesRx(self):
        """
        Gets the icmpBytesRx of this LiveModeDataLinkStatsDataData.

        :return: The icmpBytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._icmpBytesRx

    @icmpBytesRx.setter
    def icmpBytesRx(self, icmpBytesRx):
        """
        Sets the icmpBytesRx of this LiveModeDataLinkStatsDataData.

        :param icmpBytesRx: The icmpBytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._icmpBytesRx = icmpBytesRx

    @property
    def icmpBytesTx(self):
        """
        Gets the icmpBytesTx of this LiveModeDataLinkStatsDataData.

        :return: The icmpBytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._icmpBytesTx

    @icmpBytesTx.setter
    def icmpBytesTx(self, icmpBytesTx):
        """
        Sets the icmpBytesTx of this LiveModeDataLinkStatsDataData.

        :param icmpBytesTx: The icmpBytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._icmpBytesTx = icmpBytesTx

    @property
    def icmpPacketsRx(self):
        """
        Gets the icmpPacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The icmpPacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._icmpPacketsRx

    @icmpPacketsRx.setter
    def icmpPacketsRx(self, icmpPacketsRx):
        """
        Sets the icmpPacketsRx of this LiveModeDataLinkStatsDataData.

        :param icmpPacketsRx: The icmpPacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._icmpPacketsRx = icmpPacketsRx

    @property
    def icmpPacketsTx(self):
        """
        Gets the icmpPacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The icmpPacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._icmpPacketsTx

    @icmpPacketsTx.setter
    def icmpPacketsTx(self, icmpPacketsTx):
        """
        Sets the icmpPacketsTx of this LiveModeDataLinkStatsDataData.

        :param icmpPacketsTx: The icmpPacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._icmpPacketsTx = icmpPacketsTx

    @property
    def interface(self):
        """
        Gets the interface of this LiveModeDataLinkStatsDataData.

        :return: The interface of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this LiveModeDataLinkStatsDataData.

        :param interface: The interface of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._interface = interface

    @property
    def internalId(self):
        """
        Gets the internalId of this LiveModeDataLinkStatsDataData.

        :return: The internalId of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._internalId

    @internalId.setter
    def internalId(self, internalId):
        """
        Sets the internalId of this LiveModeDataLinkStatsDataData.

        :param internalId: The internalId of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._internalId = internalId

    @property
    def localIpAddress(self):
        """
        Gets the localIpAddress of this LiveModeDataLinkStatsDataData.

        :return: The localIpAddress of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._localIpAddress

    @localIpAddress.setter
    def localIpAddress(self, localIpAddress):
        """
        Sets the localIpAddress of this LiveModeDataLinkStatsDataData.

        :param localIpAddress: The localIpAddress of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._localIpAddress = localIpAddress

    @property
    def logicalId(self):
        """
        Gets the logicalId of this LiveModeDataLinkStatsDataData.

        :return: The logicalId of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this LiveModeDataLinkStatsDataData.

        :param logicalId: The logicalId of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._logicalId = logicalId

    @property
    def mode(self):
        """
        Gets the mode of this LiveModeDataLinkStatsDataData.

        :return: The mode of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this LiveModeDataLinkStatsDataData.

        :param mode: The mode of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._mode = mode

    @property
    def mtu(self):
        """
        Gets the mtu of this LiveModeDataLinkStatsDataData.

        :return: The mtu of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """
        Sets the mtu of this LiveModeDataLinkStatsDataData.

        :param mtu: The mtu of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._mtu = mtu

    @property
    def name(self):
        """
        Gets the name of this LiveModeDataLinkStatsDataData.

        :return: The name of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LiveModeDataLinkStatsDataData.

        :param name: The name of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._name = name

    @property
    def otherBytesRx(self):
        """
        Gets the otherBytesRx of this LiveModeDataLinkStatsDataData.

        :return: The otherBytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._otherBytesRx

    @otherBytesRx.setter
    def otherBytesRx(self, otherBytesRx):
        """
        Sets the otherBytesRx of this LiveModeDataLinkStatsDataData.

        :param otherBytesRx: The otherBytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._otherBytesRx = otherBytesRx

    @property
    def otherBytesTx(self):
        """
        Gets the otherBytesTx of this LiveModeDataLinkStatsDataData.

        :return: The otherBytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._otherBytesTx

    @otherBytesTx.setter
    def otherBytesTx(self, otherBytesTx):
        """
        Sets the otherBytesTx of this LiveModeDataLinkStatsDataData.

        :param otherBytesTx: The otherBytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._otherBytesTx = otherBytesTx

    @property
    def otherPacketsRx(self):
        """
        Gets the otherPacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The otherPacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._otherPacketsRx

    @otherPacketsRx.setter
    def otherPacketsRx(self, otherPacketsRx):
        """
        Sets the otherPacketsRx of this LiveModeDataLinkStatsDataData.

        :param otherPacketsRx: The otherPacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._otherPacketsRx = otherPacketsRx

    @property
    def otherPacketsTx(self):
        """
        Gets the otherPacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The otherPacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._otherPacketsTx

    @otherPacketsTx.setter
    def otherPacketsTx(self, otherPacketsTx):
        """
        Sets the otherPacketsTx of this LiveModeDataLinkStatsDataData.

        :param otherPacketsTx: The otherPacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._otherPacketsTx = otherPacketsTx

    @property
    def p1BytesRx(self):
        """
        Gets the p1BytesRx of this LiveModeDataLinkStatsDataData.

        :return: The p1BytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p1BytesRx

    @p1BytesRx.setter
    def p1BytesRx(self, p1BytesRx):
        """
        Sets the p1BytesRx of this LiveModeDataLinkStatsDataData.

        :param p1BytesRx: The p1BytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p1BytesRx = p1BytesRx

    @property
    def p1BytesTx(self):
        """
        Gets the p1BytesTx of this LiveModeDataLinkStatsDataData.

        :return: The p1BytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p1BytesTx

    @p1BytesTx.setter
    def p1BytesTx(self, p1BytesTx):
        """
        Sets the p1BytesTx of this LiveModeDataLinkStatsDataData.

        :param p1BytesTx: The p1BytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p1BytesTx = p1BytesTx

    @property
    def p1PacketsRx(self):
        """
        Gets the p1PacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The p1PacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p1PacketsRx

    @p1PacketsRx.setter
    def p1PacketsRx(self, p1PacketsRx):
        """
        Sets the p1PacketsRx of this LiveModeDataLinkStatsDataData.

        :param p1PacketsRx: The p1PacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p1PacketsRx = p1PacketsRx

    @property
    def p1PacketsTx(self):
        """
        Gets the p1PacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The p1PacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p1PacketsTx

    @p1PacketsTx.setter
    def p1PacketsTx(self, p1PacketsTx):
        """
        Sets the p1PacketsTx of this LiveModeDataLinkStatsDataData.

        :param p1PacketsTx: The p1PacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p1PacketsTx = p1PacketsTx

    @property
    def p2BytesRx(self):
        """
        Gets the p2BytesRx of this LiveModeDataLinkStatsDataData.

        :return: The p2BytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p2BytesRx

    @p2BytesRx.setter
    def p2BytesRx(self, p2BytesRx):
        """
        Sets the p2BytesRx of this LiveModeDataLinkStatsDataData.

        :param p2BytesRx: The p2BytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p2BytesRx = p2BytesRx

    @property
    def p2BytesTx(self):
        """
        Gets the p2BytesTx of this LiveModeDataLinkStatsDataData.

        :return: The p2BytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p2BytesTx

    @p2BytesTx.setter
    def p2BytesTx(self, p2BytesTx):
        """
        Sets the p2BytesTx of this LiveModeDataLinkStatsDataData.

        :param p2BytesTx: The p2BytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p2BytesTx = p2BytesTx

    @property
    def p2PacketsRx(self):
        """
        Gets the p2PacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The p2PacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p2PacketsRx

    @p2PacketsRx.setter
    def p2PacketsRx(self, p2PacketsRx):
        """
        Sets the p2PacketsRx of this LiveModeDataLinkStatsDataData.

        :param p2PacketsRx: The p2PacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p2PacketsRx = p2PacketsRx

    @property
    def p2PacketsTx(self):
        """
        Gets the p2PacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The p2PacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p2PacketsTx

    @p2PacketsTx.setter
    def p2PacketsTx(self, p2PacketsTx):
        """
        Sets the p2PacketsTx of this LiveModeDataLinkStatsDataData.

        :param p2PacketsTx: The p2PacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p2PacketsTx = p2PacketsTx

    @property
    def p3BytesRx(self):
        """
        Gets the p3BytesRx of this LiveModeDataLinkStatsDataData.

        :return: The p3BytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p3BytesRx

    @p3BytesRx.setter
    def p3BytesRx(self, p3BytesRx):
        """
        Sets the p3BytesRx of this LiveModeDataLinkStatsDataData.

        :param p3BytesRx: The p3BytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p3BytesRx = p3BytesRx

    @property
    def p3BytesTx(self):
        """
        Gets the p3BytesTx of this LiveModeDataLinkStatsDataData.

        :return: The p3BytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p3BytesTx

    @p3BytesTx.setter
    def p3BytesTx(self, p3BytesTx):
        """
        Sets the p3BytesTx of this LiveModeDataLinkStatsDataData.

        :param p3BytesTx: The p3BytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p3BytesTx = p3BytesTx

    @property
    def p3PacketsRx(self):
        """
        Gets the p3PacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The p3PacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p3PacketsRx

    @p3PacketsRx.setter
    def p3PacketsRx(self, p3PacketsRx):
        """
        Sets the p3PacketsRx of this LiveModeDataLinkStatsDataData.

        :param p3PacketsRx: The p3PacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p3PacketsRx = p3PacketsRx

    @property
    def p3PacketsTx(self):
        """
        Gets the p3PacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The p3PacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._p3PacketsTx

    @p3PacketsTx.setter
    def p3PacketsTx(self, p3PacketsTx):
        """
        Sets the p3PacketsTx of this LiveModeDataLinkStatsDataData.

        :param p3PacketsTx: The p3PacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._p3PacketsTx = p3PacketsTx

    @property
    def publicIpAddress(self):
        """
        Gets the publicIpAddress of this LiveModeDataLinkStatsDataData.

        :return: The publicIpAddress of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._publicIpAddress

    @publicIpAddress.setter
    def publicIpAddress(self, publicIpAddress):
        """
        Sets the publicIpAddress of this LiveModeDataLinkStatsDataData.

        :param publicIpAddress: The publicIpAddress of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._publicIpAddress = publicIpAddress

    @property
    def scoreRx(self):
        """
        Gets the scoreRx of this LiveModeDataLinkStatsDataData.

        :return: The scoreRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._scoreRx

    @scoreRx.setter
    def scoreRx(self, scoreRx):
        """
        Sets the scoreRx of this LiveModeDataLinkStatsDataData.

        :param scoreRx: The scoreRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._scoreRx = scoreRx

    @property
    def scoreTx(self):
        """
        Gets the scoreTx of this LiveModeDataLinkStatsDataData.

        :return: The scoreTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._scoreTx

    @scoreTx.setter
    def scoreTx(self, scoreTx):
        """
        Sets the scoreTx of this LiveModeDataLinkStatsDataData.

        :param scoreTx: The scoreTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._scoreTx = scoreTx

    @property
    def signalStrength(self):
        """
        Gets the signalStrength of this LiveModeDataLinkStatsDataData.

        :return: The signalStrength of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._signalStrength

    @signalStrength.setter
    def signalStrength(self, signalStrength):
        """
        Sets the signalStrength of this LiveModeDataLinkStatsDataData.

        :param signalStrength: The signalStrength of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._signalStrength = signalStrength

    @property
    def state(self):
        """
        Gets the state of this LiveModeDataLinkStatsDataData.

        :return: The state of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this LiveModeDataLinkStatsDataData.

        :param state: The state of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._state = state

    @property
    def tcpBytesRx(self):
        """
        Gets the tcpBytesRx of this LiveModeDataLinkStatsDataData.

        :return: The tcpBytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._tcpBytesRx

    @tcpBytesRx.setter
    def tcpBytesRx(self, tcpBytesRx):
        """
        Sets the tcpBytesRx of this LiveModeDataLinkStatsDataData.

        :param tcpBytesRx: The tcpBytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._tcpBytesRx = tcpBytesRx

    @property
    def tcpBytesTx(self):
        """
        Gets the tcpBytesTx of this LiveModeDataLinkStatsDataData.

        :return: The tcpBytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._tcpBytesTx

    @tcpBytesTx.setter
    def tcpBytesTx(self, tcpBytesTx):
        """
        Sets the tcpBytesTx of this LiveModeDataLinkStatsDataData.

        :param tcpBytesTx: The tcpBytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._tcpBytesTx = tcpBytesTx

    @property
    def tcpPacketsRx(self):
        """
        Gets the tcpPacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The tcpPacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._tcpPacketsRx

    @tcpPacketsRx.setter
    def tcpPacketsRx(self, tcpPacketsRx):
        """
        Sets the tcpPacketsRx of this LiveModeDataLinkStatsDataData.

        :param tcpPacketsRx: The tcpPacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._tcpPacketsRx = tcpPacketsRx

    @property
    def tcpPacketsTx(self):
        """
        Gets the tcpPacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The tcpPacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._tcpPacketsTx

    @tcpPacketsTx.setter
    def tcpPacketsTx(self, tcpPacketsTx):
        """
        Sets the tcpPacketsTx of this LiveModeDataLinkStatsDataData.

        :param tcpPacketsTx: The tcpPacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._tcpPacketsTx = tcpPacketsTx

    @property
    def type(self):
        """
        Gets the type of this LiveModeDataLinkStatsDataData.

        :return: The type of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this LiveModeDataLinkStatsDataData.

        :param type: The type of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._type = type

    @property
    def udpBytesRx(self):
        """
        Gets the udpBytesRx of this LiveModeDataLinkStatsDataData.

        :return: The udpBytesRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._udpBytesRx

    @udpBytesRx.setter
    def udpBytesRx(self, udpBytesRx):
        """
        Sets the udpBytesRx of this LiveModeDataLinkStatsDataData.

        :param udpBytesRx: The udpBytesRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._udpBytesRx = udpBytesRx

    @property
    def udpBytesTx(self):
        """
        Gets the udpBytesTx of this LiveModeDataLinkStatsDataData.

        :return: The udpBytesTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._udpBytesTx

    @udpBytesTx.setter
    def udpBytesTx(self, udpBytesTx):
        """
        Sets the udpBytesTx of this LiveModeDataLinkStatsDataData.

        :param udpBytesTx: The udpBytesTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._udpBytesTx = udpBytesTx

    @property
    def udpHolePunching(self):
        """
        Gets the udpHolePunching of this LiveModeDataLinkStatsDataData.

        :return: The udpHolePunching of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._udpHolePunching

    @udpHolePunching.setter
    def udpHolePunching(self, udpHolePunching):
        """
        Sets the udpHolePunching of this LiveModeDataLinkStatsDataData.

        :param udpHolePunching: The udpHolePunching of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._udpHolePunching = udpHolePunching

    @property
    def udpPacketsRx(self):
        """
        Gets the udpPacketsRx of this LiveModeDataLinkStatsDataData.

        :return: The udpPacketsRx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._udpPacketsRx

    @udpPacketsRx.setter
    def udpPacketsRx(self, udpPacketsRx):
        """
        Sets the udpPacketsRx of this LiveModeDataLinkStatsDataData.

        :param udpPacketsRx: The udpPacketsRx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._udpPacketsRx = udpPacketsRx

    @property
    def udpPacketsTx(self):
        """
        Gets the udpPacketsTx of this LiveModeDataLinkStatsDataData.

        :return: The udpPacketsTx of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._udpPacketsTx

    @udpPacketsTx.setter
    def udpPacketsTx(self, udpPacketsTx):
        """
        Sets the udpPacketsTx of this LiveModeDataLinkStatsDataData.

        :param udpPacketsTx: The udpPacketsTx of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._udpPacketsTx = udpPacketsTx

    @property
    def vlanId(self):
        """
        Gets the vlanId of this LiveModeDataLinkStatsDataData.

        :return: The vlanId of this LiveModeDataLinkStatsDataData.
        :rtype: int
        """
        return self._vlanId

    @vlanId.setter
    def vlanId(self, vlanId):
        """
        Sets the vlanId of this LiveModeDataLinkStatsDataData.

        :param vlanId: The vlanId of this LiveModeDataLinkStatsDataData.
        :type: int
        """

        self._vlanId = vlanId

    @property
    def vpnState(self):
        """
        Gets the vpnState of this LiveModeDataLinkStatsDataData.

        :return: The vpnState of this LiveModeDataLinkStatsDataData.
        :rtype: str
        """
        return self._vpnState

    @vpnState.setter
    def vpnState(self, vpnState):
        """
        Sets the vpnState of this LiveModeDataLinkStatsDataData.

        :param vpnState: The vpnState of this LiveModeDataLinkStatsDataData.
        :type: str
        """

        self._vpnState = vpnState

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LiveModeDataLinkStatsDataData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
