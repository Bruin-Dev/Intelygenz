# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EdgeDeviceSettingsDataVrrpData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cidrIp=None, interface=None, interval=None, preempt=None, preemptDelay=None, priority=None, subinterfaceId=None, vlanId=None, vrid=None):
        """
        EdgeDeviceSettingsDataVrrpData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cidrIp': 'str',
            'interface': 'str',
            'interval': 'int',
            'preempt': 'bool',
            'preemptDelay': 'int',
            'priority': 'int',
            'subinterfaceId': 'int',
            'vlanId': 'int',
            'vrid': 'int'
        }

        self.attribute_map = {
            'cidrIp': 'cidrIp',
            'interface': 'interface',
            'interval': 'interval',
            'preempt': 'preempt',
            'preemptDelay': 'preemptDelay',
            'priority': 'priority',
            'subinterfaceId': 'subinterfaceId',
            'vlanId': 'vlanId',
            'vrid': 'vrid'
        }

        self._cidrIp = cidrIp
        self._interface = interface
        self._interval = interval
        self._preempt = preempt
        self._preemptDelay = preemptDelay
        self._priority = priority
        self._subinterfaceId = subinterfaceId
        self._vlanId = vlanId
        self._vrid = vrid

    @property
    def cidrIp(self):
        """
        Gets the cidrIp of this EdgeDeviceSettingsDataVrrpData.

        :return: The cidrIp of this EdgeDeviceSettingsDataVrrpData.
        :rtype: str
        """
        return self._cidrIp

    @cidrIp.setter
    def cidrIp(self, cidrIp):
        """
        Sets the cidrIp of this EdgeDeviceSettingsDataVrrpData.

        :param cidrIp: The cidrIp of this EdgeDeviceSettingsDataVrrpData.
        :type: str
        """

        self._cidrIp = cidrIp

    @property
    def interface(self):
        """
        Gets the interface of this EdgeDeviceSettingsDataVrrpData.

        :return: The interface of this EdgeDeviceSettingsDataVrrpData.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this EdgeDeviceSettingsDataVrrpData.

        :param interface: The interface of this EdgeDeviceSettingsDataVrrpData.
        :type: str
        """

        self._interface = interface

    @property
    def interval(self):
        """
        Gets the interval of this EdgeDeviceSettingsDataVrrpData.

        :return: The interval of this EdgeDeviceSettingsDataVrrpData.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this EdgeDeviceSettingsDataVrrpData.

        :param interval: The interval of this EdgeDeviceSettingsDataVrrpData.
        :type: int
        """

        self._interval = interval

    @property
    def preempt(self):
        """
        Gets the preempt of this EdgeDeviceSettingsDataVrrpData.

        :return: The preempt of this EdgeDeviceSettingsDataVrrpData.
        :rtype: bool
        """
        return self._preempt

    @preempt.setter
    def preempt(self, preempt):
        """
        Sets the preempt of this EdgeDeviceSettingsDataVrrpData.

        :param preempt: The preempt of this EdgeDeviceSettingsDataVrrpData.
        :type: bool
        """

        self._preempt = preempt

    @property
    def preemptDelay(self):
        """
        Gets the preemptDelay of this EdgeDeviceSettingsDataVrrpData.

        :return: The preemptDelay of this EdgeDeviceSettingsDataVrrpData.
        :rtype: int
        """
        return self._preemptDelay

    @preemptDelay.setter
    def preemptDelay(self, preemptDelay):
        """
        Sets the preemptDelay of this EdgeDeviceSettingsDataVrrpData.

        :param preemptDelay: The preemptDelay of this EdgeDeviceSettingsDataVrrpData.
        :type: int
        """

        self._preemptDelay = preemptDelay

    @property
    def priority(self):
        """
        Gets the priority of this EdgeDeviceSettingsDataVrrpData.

        :return: The priority of this EdgeDeviceSettingsDataVrrpData.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this EdgeDeviceSettingsDataVrrpData.

        :param priority: The priority of this EdgeDeviceSettingsDataVrrpData.
        :type: int
        """

        self._priority = priority

    @property
    def subinterfaceId(self):
        """
        Gets the subinterfaceId of this EdgeDeviceSettingsDataVrrpData.

        :return: The subinterfaceId of this EdgeDeviceSettingsDataVrrpData.
        :rtype: int
        """
        return self._subinterfaceId

    @subinterfaceId.setter
    def subinterfaceId(self, subinterfaceId):
        """
        Sets the subinterfaceId of this EdgeDeviceSettingsDataVrrpData.

        :param subinterfaceId: The subinterfaceId of this EdgeDeviceSettingsDataVrrpData.
        :type: int
        """

        self._subinterfaceId = subinterfaceId

    @property
    def vlanId(self):
        """
        Gets the vlanId of this EdgeDeviceSettingsDataVrrpData.

        :return: The vlanId of this EdgeDeviceSettingsDataVrrpData.
        :rtype: int
        """
        return self._vlanId

    @vlanId.setter
    def vlanId(self, vlanId):
        """
        Sets the vlanId of this EdgeDeviceSettingsDataVrrpData.

        :param vlanId: The vlanId of this EdgeDeviceSettingsDataVrrpData.
        :type: int
        """

        self._vlanId = vlanId

    @property
    def vrid(self):
        """
        Gets the vrid of this EdgeDeviceSettingsDataVrrpData.

        :return: The vrid of this EdgeDeviceSettingsDataVrrpData.
        :rtype: int
        """
        return self._vrid

    @vrid.setter
    def vrid(self, vrid):
        """
        Sets the vrid of this EdgeDeviceSettingsDataVrrpData.

        :param vrid: The vrid of this EdgeDeviceSettingsDataVrrpData.
        :type: int
        """

        self._vrid = vrid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EdgeDeviceSettingsDataVrrpData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
