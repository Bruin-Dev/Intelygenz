# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Link(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created=None, edgeId=None, logicalId=None, internalId=None, interface=None, macAddress=None, ipAddress=None, netmask=None, networkSide=None, networkType=None, displayName=None, isp=None, org=None, lat=None, lon=None, lastActive=None, state=None, backupState=None, vpnState=None, lastEvent=None, lastEventState=None, alertsEnabled=None, operatorAlertsEnabled=None, serviceState=None, modified=None, serviceGroups=None):
        """
        Link - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created': 'datetime',
            'edgeId': 'int',
            'logicalId': 'str',
            'internalId': 'str',
            'interface': 'str',
            'macAddress': 'str',
            'ipAddress': 'str',
            'netmask': 'str',
            'networkSide': 'str',
            'networkType': 'str',
            'displayName': 'str',
            'isp': 'str',
            'org': 'str',
            'lat': 'float',
            'lon': 'float',
            'lastActive': 'datetime',
            'state': 'str',
            'backupState': 'str',
            'vpnState': 'str',
            'lastEvent': 'datetime',
            'lastEventState': 'str',
            'alertsEnabled': 'int',
            'operatorAlertsEnabled': 'int',
            'serviceState': 'str',
            'modified': 'datetime',
            'serviceGroups': 'LinkServiceGroups'
        }

        self.attribute_map = {
            'id': 'id',
            'created': 'created',
            'edgeId': 'edgeId',
            'logicalId': 'logicalId',
            'internalId': 'internalId',
            'interface': 'interface',
            'macAddress': 'macAddress',
            'ipAddress': 'ipAddress',
            'netmask': 'netmask',
            'networkSide': 'networkSide',
            'networkType': 'networkType',
            'displayName': 'displayName',
            'isp': 'isp',
            'org': 'org',
            'lat': 'lat',
            'lon': 'lon',
            'lastActive': 'lastActive',
            'state': 'state',
            'backupState': 'backupState',
            'vpnState': 'vpnState',
            'lastEvent': 'lastEvent',
            'lastEventState': 'lastEventState',
            'alertsEnabled': 'alertsEnabled',
            'operatorAlertsEnabled': 'operatorAlertsEnabled',
            'serviceState': 'serviceState',
            'modified': 'modified',
            'serviceGroups': 'serviceGroups'
        }

        self._id = id
        self._created = created
        self._edgeId = edgeId
        self._logicalId = logicalId
        self._internalId = internalId
        self._interface = interface
        self._macAddress = macAddress
        self._ipAddress = ipAddress
        self._netmask = netmask
        self._networkSide = networkSide
        self._networkType = networkType
        self._displayName = displayName
        self._isp = isp
        self._org = org
        self._lat = lat
        self._lon = lon
        self._lastActive = lastActive
        self._state = state
        self._backupState = backupState
        self._vpnState = vpnState
        self._lastEvent = lastEvent
        self._lastEventState = lastEventState
        self._alertsEnabled = alertsEnabled
        self._operatorAlertsEnabled = operatorAlertsEnabled
        self._serviceState = serviceState
        self._modified = modified
        self._serviceGroups = serviceGroups

    @property
    def id(self):
        """
        Gets the id of this Link.

        :return: The id of this Link.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Link.

        :param id: The id of this Link.
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """
        Gets the created of this Link.

        :return: The created of this Link.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Link.

        :param created: The created of this Link.
        :type: datetime
        """

        self._created = created

    @property
    def edgeId(self):
        """
        Gets the edgeId of this Link.

        :return: The edgeId of this Link.
        :rtype: int
        """
        return self._edgeId

    @edgeId.setter
    def edgeId(self, edgeId):
        """
        Sets the edgeId of this Link.

        :param edgeId: The edgeId of this Link.
        :type: int
        """

        self._edgeId = edgeId

    @property
    def logicalId(self):
        """
        Gets the logicalId of this Link.

        :return: The logicalId of this Link.
        :rtype: str
        """
        return self._logicalId

    @logicalId.setter
    def logicalId(self, logicalId):
        """
        Sets the logicalId of this Link.

        :param logicalId: The logicalId of this Link.
        :type: str
        """

        self._logicalId = logicalId

    @property
    def internalId(self):
        """
        Gets the internalId of this Link.

        :return: The internalId of this Link.
        :rtype: str
        """
        return self._internalId

    @internalId.setter
    def internalId(self, internalId):
        """
        Sets the internalId of this Link.

        :param internalId: The internalId of this Link.
        :type: str
        """

        self._internalId = internalId

    @property
    def interface(self):
        """
        Gets the interface of this Link.

        :return: The interface of this Link.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this Link.

        :param interface: The interface of this Link.
        :type: str
        """

        self._interface = interface

    @property
    def macAddress(self):
        """
        Gets the macAddress of this Link.

        :return: The macAddress of this Link.
        :rtype: str
        """
        return self._macAddress

    @macAddress.setter
    def macAddress(self, macAddress):
        """
        Sets the macAddress of this Link.

        :param macAddress: The macAddress of this Link.
        :type: str
        """

        self._macAddress = macAddress

    @property
    def ipAddress(self):
        """
        Gets the ipAddress of this Link.

        :return: The ipAddress of this Link.
        :rtype: str
        """
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, ipAddress):
        """
        Sets the ipAddress of this Link.

        :param ipAddress: The ipAddress of this Link.
        :type: str
        """

        self._ipAddress = ipAddress

    @property
    def netmask(self):
        """
        Gets the netmask of this Link.

        :return: The netmask of this Link.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """
        Sets the netmask of this Link.

        :param netmask: The netmask of this Link.
        :type: str
        """

        self._netmask = netmask

    @property
    def networkSide(self):
        """
        Gets the networkSide of this Link.

        :return: The networkSide of this Link.
        :rtype: str
        """
        return self._networkSide

    @networkSide.setter
    def networkSide(self, networkSide):
        """
        Sets the networkSide of this Link.

        :param networkSide: The networkSide of this Link.
        :type: str
        """

        self._networkSide = networkSide

    @property
    def networkType(self):
        """
        Gets the networkType of this Link.

        :return: The networkType of this Link.
        :rtype: str
        """
        return self._networkType

    @networkType.setter
    def networkType(self, networkType):
        """
        Sets the networkType of this Link.

        :param networkType: The networkType of this Link.
        :type: str
        """

        self._networkType = networkType

    @property
    def displayName(self):
        """
        Gets the displayName of this Link.

        :return: The displayName of this Link.
        :rtype: str
        """
        return self._displayName

    @displayName.setter
    def displayName(self, displayName):
        """
        Sets the displayName of this Link.

        :param displayName: The displayName of this Link.
        :type: str
        """

        self._displayName = displayName

    @property
    def isp(self):
        """
        Gets the isp of this Link.

        :return: The isp of this Link.
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """
        Sets the isp of this Link.

        :param isp: The isp of this Link.
        :type: str
        """

        self._isp = isp

    @property
    def org(self):
        """
        Gets the org of this Link.

        :return: The org of this Link.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """
        Sets the org of this Link.

        :param org: The org of this Link.
        :type: str
        """

        self._org = org

    @property
    def lat(self):
        """
        Gets the lat of this Link.

        :return: The lat of this Link.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """
        Sets the lat of this Link.

        :param lat: The lat of this Link.
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """
        Gets the lon of this Link.

        :return: The lon of this Link.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """
        Sets the lon of this Link.

        :param lon: The lon of this Link.
        :type: float
        """

        self._lon = lon

    @property
    def lastActive(self):
        """
        Gets the lastActive of this Link.

        :return: The lastActive of this Link.
        :rtype: datetime
        """
        return self._lastActive

    @lastActive.setter
    def lastActive(self, lastActive):
        """
        Sets the lastActive of this Link.

        :param lastActive: The lastActive of this Link.
        :type: datetime
        """

        self._lastActive = lastActive

    @property
    def state(self):
        """
        Gets the state of this Link.

        :return: The state of this Link.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Link.

        :param state: The state of this Link.
        :type: str
        """

        self._state = state

    @property
    def backupState(self):
        """
        Gets the backupState of this Link.

        :return: The backupState of this Link.
        :rtype: str
        """
        return self._backupState

    @backupState.setter
    def backupState(self, backupState):
        """
        Sets the backupState of this Link.

        :param backupState: The backupState of this Link.
        :type: str
        """

        self._backupState = backupState

    @property
    def vpnState(self):
        """
        Gets the vpnState of this Link.

        :return: The vpnState of this Link.
        :rtype: str
        """
        return self._vpnState

    @vpnState.setter
    def vpnState(self, vpnState):
        """
        Sets the vpnState of this Link.

        :param vpnState: The vpnState of this Link.
        :type: str
        """

        self._vpnState = vpnState

    @property
    def lastEvent(self):
        """
        Gets the lastEvent of this Link.

        :return: The lastEvent of this Link.
        :rtype: datetime
        """
        return self._lastEvent

    @lastEvent.setter
    def lastEvent(self, lastEvent):
        """
        Sets the lastEvent of this Link.

        :param lastEvent: The lastEvent of this Link.
        :type: datetime
        """

        self._lastEvent = lastEvent

    @property
    def lastEventState(self):
        """
        Gets the lastEventState of this Link.

        :return: The lastEventState of this Link.
        :rtype: str
        """
        return self._lastEventState

    @lastEventState.setter
    def lastEventState(self, lastEventState):
        """
        Sets the lastEventState of this Link.

        :param lastEventState: The lastEventState of this Link.
        :type: str
        """

        self._lastEventState = lastEventState

    @property
    def alertsEnabled(self):
        """
        Gets the alertsEnabled of this Link.

        :return: The alertsEnabled of this Link.
        :rtype: int
        """
        return self._alertsEnabled

    @alertsEnabled.setter
    def alertsEnabled(self, alertsEnabled):
        """
        Sets the alertsEnabled of this Link.

        :param alertsEnabled: The alertsEnabled of this Link.
        :type: int
        """

        self._alertsEnabled = alertsEnabled

    @property
    def operatorAlertsEnabled(self):
        """
        Gets the operatorAlertsEnabled of this Link.

        :return: The operatorAlertsEnabled of this Link.
        :rtype: int
        """
        return self._operatorAlertsEnabled

    @operatorAlertsEnabled.setter
    def operatorAlertsEnabled(self, operatorAlertsEnabled):
        """
        Sets the operatorAlertsEnabled of this Link.

        :param operatorAlertsEnabled: The operatorAlertsEnabled of this Link.
        :type: int
        """

        self._operatorAlertsEnabled = operatorAlertsEnabled

    @property
    def serviceState(self):
        """
        Gets the serviceState of this Link.

        :return: The serviceState of this Link.
        :rtype: str
        """
        return self._serviceState

    @serviceState.setter
    def serviceState(self, serviceState):
        """
        Sets the serviceState of this Link.

        :param serviceState: The serviceState of this Link.
        :type: str
        """

        self._serviceState = serviceState

    @property
    def modified(self):
        """
        Gets the modified of this Link.

        :return: The modified of this Link.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this Link.

        :param modified: The modified of this Link.
        :type: datetime
        """

        self._modified = modified

    @property
    def serviceGroups(self):
        """
        Gets the serviceGroups of this Link.

        :return: The serviceGroups of this Link.
        :rtype: LinkServiceGroups
        """
        return self._serviceGroups

    @serviceGroups.setter
    def serviceGroups(self, serviceGroups):
        """
        Sets the serviceGroups of this Link.

        :param serviceGroups: The serviceGroups of this Link.
        :type: LinkServiceGroups
        """

        self._serviceGroups = serviceGroups

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
