# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DisasterRecoveryClientContact(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activeAddress=None, activeLastResponseTime=None, clientLogicalId=None, clientType=None, id=None, modified=None, standbyAddress=None, standbyLastResponseTime=None):
        """
        DisasterRecoveryClientContact - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activeAddress': 'str',
            'activeLastResponseTime': 'datetime',
            'clientLogicalId': 'str',
            'clientType': 'str',
            'id': 'int',
            'modified': 'datetime',
            'standbyAddress': 'str',
            'standbyLastResponseTime': 'datetime'
        }

        self.attribute_map = {
            'activeAddress': 'activeAddress',
            'activeLastResponseTime': 'activeLastResponseTime',
            'clientLogicalId': 'clientLogicalId',
            'clientType': 'clientType',
            'id': 'id',
            'modified': 'modified',
            'standbyAddress': 'standbyAddress',
            'standbyLastResponseTime': 'standbyLastResponseTime'
        }

        self._activeAddress = activeAddress
        self._activeLastResponseTime = activeLastResponseTime
        self._clientLogicalId = clientLogicalId
        self._clientType = clientType
        self._id = id
        self._modified = modified
        self._standbyAddress = standbyAddress
        self._standbyLastResponseTime = standbyLastResponseTime

    @property
    def activeAddress(self):
        """
        Gets the activeAddress of this DisasterRecoveryClientContact.

        :return: The activeAddress of this DisasterRecoveryClientContact.
        :rtype: str
        """
        return self._activeAddress

    @activeAddress.setter
    def activeAddress(self, activeAddress):
        """
        Sets the activeAddress of this DisasterRecoveryClientContact.

        :param activeAddress: The activeAddress of this DisasterRecoveryClientContact.
        :type: str
        """

        self._activeAddress = activeAddress

    @property
    def activeLastResponseTime(self):
        """
        Gets the activeLastResponseTime of this DisasterRecoveryClientContact.

        :return: The activeLastResponseTime of this DisasterRecoveryClientContact.
        :rtype: datetime
        """
        return self._activeLastResponseTime

    @activeLastResponseTime.setter
    def activeLastResponseTime(self, activeLastResponseTime):
        """
        Sets the activeLastResponseTime of this DisasterRecoveryClientContact.

        :param activeLastResponseTime: The activeLastResponseTime of this DisasterRecoveryClientContact.
        :type: datetime
        """

        self._activeLastResponseTime = activeLastResponseTime

    @property
    def clientLogicalId(self):
        """
        Gets the clientLogicalId of this DisasterRecoveryClientContact.

        :return: The clientLogicalId of this DisasterRecoveryClientContact.
        :rtype: str
        """
        return self._clientLogicalId

    @clientLogicalId.setter
    def clientLogicalId(self, clientLogicalId):
        """
        Sets the clientLogicalId of this DisasterRecoveryClientContact.

        :param clientLogicalId: The clientLogicalId of this DisasterRecoveryClientContact.
        :type: str
        """

        self._clientLogicalId = clientLogicalId

    @property
    def clientType(self):
        """
        Gets the clientType of this DisasterRecoveryClientContact.

        :return: The clientType of this DisasterRecoveryClientContact.
        :rtype: str
        """
        return self._clientType

    @clientType.setter
    def clientType(self, clientType):
        """
        Sets the clientType of this DisasterRecoveryClientContact.

        :param clientType: The clientType of this DisasterRecoveryClientContact.
        :type: str
        """

        self._clientType = clientType

    @property
    def id(self):
        """
        Gets the id of this DisasterRecoveryClientContact.

        :return: The id of this DisasterRecoveryClientContact.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DisasterRecoveryClientContact.

        :param id: The id of this DisasterRecoveryClientContact.
        :type: int
        """

        self._id = id

    @property
    def modified(self):
        """
        Gets the modified of this DisasterRecoveryClientContact.

        :return: The modified of this DisasterRecoveryClientContact.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this DisasterRecoveryClientContact.

        :param modified: The modified of this DisasterRecoveryClientContact.
        :type: datetime
        """

        self._modified = modified

    @property
    def standbyAddress(self):
        """
        Gets the standbyAddress of this DisasterRecoveryClientContact.

        :return: The standbyAddress of this DisasterRecoveryClientContact.
        :rtype: str
        """
        return self._standbyAddress

    @standbyAddress.setter
    def standbyAddress(self, standbyAddress):
        """
        Sets the standbyAddress of this DisasterRecoveryClientContact.

        :param standbyAddress: The standbyAddress of this DisasterRecoveryClientContact.
        :type: str
        """

        self._standbyAddress = standbyAddress

    @property
    def standbyLastResponseTime(self):
        """
        Gets the standbyLastResponseTime of this DisasterRecoveryClientContact.

        :return: The standbyLastResponseTime of this DisasterRecoveryClientContact.
        :rtype: datetime
        """
        return self._standbyLastResponseTime

    @standbyLastResponseTime.setter
    def standbyLastResponseTime(self, standbyLastResponseTime):
        """
        Sets the standbyLastResponseTime of this DisasterRecoveryClientContact.

        :param standbyLastResponseTime: The standbyLastResponseTime of this DisasterRecoveryClientContact.
        :type: datetime
        """

        self._standbyLastResponseTime = standbyLastResponseTime

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DisasterRecoveryClientContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
