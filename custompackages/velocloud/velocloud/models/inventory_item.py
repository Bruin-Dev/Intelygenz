# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InventoryItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, deviceSerialNumber=None, deviceUuid=None, modelNumber=None, siteId=None, description=None, acknowledged=None, edgeId=None, edge=None, inventoryState=None, inventoryEdgeState=None, inventoryAction=None, vcoOwnerId=None, vcoOwner=None, modified=None):
        """
        InventoryItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'deviceSerialNumber': 'str',
            'deviceUuid': 'str',
            'modelNumber': 'str',
            'siteId': 'int',
            'description': 'str',
            'acknowledged': 'int',
            'edgeId': 'int',
            'edge': 'InventoryItemEdge',
            'inventoryState': 'str',
            'inventoryEdgeState': 'str',
            'inventoryAction': 'str',
            'vcoOwnerId': 'int',
            'vcoOwner': 'InventoryItemVcoOwner',
            'modified': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'deviceSerialNumber': 'deviceSerialNumber',
            'deviceUuid': 'deviceUuid',
            'modelNumber': 'modelNumber',
            'siteId': 'siteId',
            'description': 'description',
            'acknowledged': 'acknowledged',
            'edgeId': 'edgeId',
            'edge': 'edge',
            'inventoryState': 'inventoryState',
            'inventoryEdgeState': 'inventoryEdgeState',
            'inventoryAction': 'inventoryAction',
            'vcoOwnerId': 'vcoOwnerId',
            'vcoOwner': 'vcoOwner',
            'modified': 'modified'
        }

        self._id = id
        self._deviceSerialNumber = deviceSerialNumber
        self._deviceUuid = deviceUuid
        self._modelNumber = modelNumber
        self._siteId = siteId
        self._description = description
        self._acknowledged = acknowledged
        self._edgeId = edgeId
        self._edge = edge
        self._inventoryState = inventoryState
        self._inventoryEdgeState = inventoryEdgeState
        self._inventoryAction = inventoryAction
        self._vcoOwnerId = vcoOwnerId
        self._vcoOwner = vcoOwner
        self._modified = modified

    @property
    def id(self):
        """
        Gets the id of this InventoryItem.

        :return: The id of this InventoryItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InventoryItem.

        :param id: The id of this InventoryItem.
        :type: int
        """

        self._id = id

    @property
    def deviceSerialNumber(self):
        """
        Gets the deviceSerialNumber of this InventoryItem.

        :return: The deviceSerialNumber of this InventoryItem.
        :rtype: str
        """
        return self._deviceSerialNumber

    @deviceSerialNumber.setter
    def deviceSerialNumber(self, deviceSerialNumber):
        """
        Sets the deviceSerialNumber of this InventoryItem.

        :param deviceSerialNumber: The deviceSerialNumber of this InventoryItem.
        :type: str
        """

        self._deviceSerialNumber = deviceSerialNumber

    @property
    def deviceUuid(self):
        """
        Gets the deviceUuid of this InventoryItem.

        :return: The deviceUuid of this InventoryItem.
        :rtype: str
        """
        return self._deviceUuid

    @deviceUuid.setter
    def deviceUuid(self, deviceUuid):
        """
        Sets the deviceUuid of this InventoryItem.

        :param deviceUuid: The deviceUuid of this InventoryItem.
        :type: str
        """

        self._deviceUuid = deviceUuid

    @property
    def modelNumber(self):
        """
        Gets the modelNumber of this InventoryItem.

        :return: The modelNumber of this InventoryItem.
        :rtype: str
        """
        return self._modelNumber

    @modelNumber.setter
    def modelNumber(self, modelNumber):
        """
        Sets the modelNumber of this InventoryItem.

        :param modelNumber: The modelNumber of this InventoryItem.
        :type: str
        """

        self._modelNumber = modelNumber

    @property
    def siteId(self):
        """
        Gets the siteId of this InventoryItem.

        :return: The siteId of this InventoryItem.
        :rtype: int
        """
        return self._siteId

    @siteId.setter
    def siteId(self, siteId):
        """
        Sets the siteId of this InventoryItem.

        :param siteId: The siteId of this InventoryItem.
        :type: int
        """

        self._siteId = siteId

    @property
    def description(self):
        """
        Gets the description of this InventoryItem.

        :return: The description of this InventoryItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InventoryItem.

        :param description: The description of this InventoryItem.
        :type: str
        """

        self._description = description

    @property
    def acknowledged(self):
        """
        Gets the acknowledged of this InventoryItem.

        :return: The acknowledged of this InventoryItem.
        :rtype: int
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """
        Sets the acknowledged of this InventoryItem.

        :param acknowledged: The acknowledged of this InventoryItem.
        :type: int
        """

        self._acknowledged = acknowledged

    @property
    def edgeId(self):
        """
        Gets the edgeId of this InventoryItem.

        :return: The edgeId of this InventoryItem.
        :rtype: int
        """
        return self._edgeId

    @edgeId.setter
    def edgeId(self, edgeId):
        """
        Sets the edgeId of this InventoryItem.

        :param edgeId: The edgeId of this InventoryItem.
        :type: int
        """

        self._edgeId = edgeId

    @property
    def edge(self):
        """
        Gets the edge of this InventoryItem.

        :return: The edge of this InventoryItem.
        :rtype: InventoryItemEdge
        """
        return self._edge

    @edge.setter
    def edge(self, edge):
        """
        Sets the edge of this InventoryItem.

        :param edge: The edge of this InventoryItem.
        :type: InventoryItemEdge
        """

        self._edge = edge

    @property
    def inventoryState(self):
        """
        Gets the inventoryState of this InventoryItem.

        :return: The inventoryState of this InventoryItem.
        :rtype: str
        """
        return self._inventoryState

    @inventoryState.setter
    def inventoryState(self, inventoryState):
        """
        Sets the inventoryState of this InventoryItem.

        :param inventoryState: The inventoryState of this InventoryItem.
        :type: str
        """

        self._inventoryState = inventoryState

    @property
    def inventoryEdgeState(self):
        """
        Gets the inventoryEdgeState of this InventoryItem.

        :return: The inventoryEdgeState of this InventoryItem.
        :rtype: str
        """
        return self._inventoryEdgeState

    @inventoryEdgeState.setter
    def inventoryEdgeState(self, inventoryEdgeState):
        """
        Sets the inventoryEdgeState of this InventoryItem.

        :param inventoryEdgeState: The inventoryEdgeState of this InventoryItem.
        :type: str
        """

        self._inventoryEdgeState = inventoryEdgeState

    @property
    def inventoryAction(self):
        """
        Gets the inventoryAction of this InventoryItem.

        :return: The inventoryAction of this InventoryItem.
        :rtype: str
        """
        return self._inventoryAction

    @inventoryAction.setter
    def inventoryAction(self, inventoryAction):
        """
        Sets the inventoryAction of this InventoryItem.

        :param inventoryAction: The inventoryAction of this InventoryItem.
        :type: str
        """

        self._inventoryAction = inventoryAction

    @property
    def vcoOwnerId(self):
        """
        Gets the vcoOwnerId of this InventoryItem.

        :return: The vcoOwnerId of this InventoryItem.
        :rtype: int
        """
        return self._vcoOwnerId

    @vcoOwnerId.setter
    def vcoOwnerId(self, vcoOwnerId):
        """
        Sets the vcoOwnerId of this InventoryItem.

        :param vcoOwnerId: The vcoOwnerId of this InventoryItem.
        :type: int
        """

        self._vcoOwnerId = vcoOwnerId

    @property
    def vcoOwner(self):
        """
        Gets the vcoOwner of this InventoryItem.

        :return: The vcoOwner of this InventoryItem.
        :rtype: InventoryItemVcoOwner
        """
        return self._vcoOwner

    @vcoOwner.setter
    def vcoOwner(self, vcoOwner):
        """
        Sets the vcoOwner of this InventoryItem.

        :param vcoOwner: The vcoOwner of this InventoryItem.
        :type: InventoryItemVcoOwner
        """

        self._vcoOwner = vcoOwner

    @property
    def modified(self):
        """
        Gets the modified of this InventoryItem.

        :return: The modified of this InventoryItem.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this InventoryItem.

        :param modified: The modified of this InventoryItem.
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InventoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
