# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewaySite(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, city=None, contactEmail=None, contactMobile=None, contactName=None, contactPhone=None, country=None, lat=None, lon=None, name=None, postalCode=None, state=None, streetAddress=None, streetAddress2=None, id=None, created=None, modified=None, timezone=None, locale=None, shippingSameAsLocation=None, shippingContactName=None, shippingAddress=None, shippingAddress2=None, shippingCity=None, shippingState=None, shippingPostalCode=None, shippingCountry=None):
        """
        GatewaySite - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'contactEmail': 'str',
            'contactMobile': 'str',
            'contactName': 'str',
            'contactPhone': 'str',
            'country': 'str',
            'lat': 'float',
            'lon': 'float',
            'name': 'str',
            'postalCode': 'str',
            'state': 'str',
            'streetAddress': 'str',
            'streetAddress2': 'str',
            'id': 'int',
            'created': 'datetime',
            'modified': 'datetime',
            'timezone': 'str',
            'locale': 'str',
            'shippingSameAsLocation': 'int',
            'shippingContactName': 'str',
            'shippingAddress': 'str',
            'shippingAddress2': 'str',
            'shippingCity': 'str',
            'shippingState': 'str',
            'shippingPostalCode': 'str',
            'shippingCountry': 'str'
        }

        self.attribute_map = {
            'city': 'city',
            'contactEmail': 'contactEmail',
            'contactMobile': 'contactMobile',
            'contactName': 'contactName',
            'contactPhone': 'contactPhone',
            'country': 'country',
            'lat': 'lat',
            'lon': 'lon',
            'name': 'name',
            'postalCode': 'postalCode',
            'state': 'state',
            'streetAddress': 'streetAddress',
            'streetAddress2': 'streetAddress2',
            'id': 'id',
            'created': 'created',
            'modified': 'modified',
            'timezone': 'timezone',
            'locale': 'locale',
            'shippingSameAsLocation': 'shippingSameAsLocation',
            'shippingContactName': 'shippingContactName',
            'shippingAddress': 'shippingAddress',
            'shippingAddress2': 'shippingAddress2',
            'shippingCity': 'shippingCity',
            'shippingState': 'shippingState',
            'shippingPostalCode': 'shippingPostalCode',
            'shippingCountry': 'shippingCountry'
        }

        self._city = city
        self._contactEmail = contactEmail
        self._contactMobile = contactMobile
        self._contactName = contactName
        self._contactPhone = contactPhone
        self._country = country
        self._lat = lat
        self._lon = lon
        self._name = name
        self._postalCode = postalCode
        self._state = state
        self._streetAddress = streetAddress
        self._streetAddress2 = streetAddress2
        self._id = id
        self._created = created
        self._modified = modified
        self._timezone = timezone
        self._locale = locale
        self._shippingSameAsLocation = shippingSameAsLocation
        self._shippingContactName = shippingContactName
        self._shippingAddress = shippingAddress
        self._shippingAddress2 = shippingAddress2
        self._shippingCity = shippingCity
        self._shippingState = shippingState
        self._shippingPostalCode = shippingPostalCode
        self._shippingCountry = shippingCountry

    @property
    def city(self):
        """
        Gets the city of this GatewaySite.

        :return: The city of this GatewaySite.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this GatewaySite.

        :param city: The city of this GatewaySite.
        :type: str
        """

        self._city = city

    @property
    def contactEmail(self):
        """
        Gets the contactEmail of this GatewaySite.

        :return: The contactEmail of this GatewaySite.
        :rtype: str
        """
        return self._contactEmail

    @contactEmail.setter
    def contactEmail(self, contactEmail):
        """
        Sets the contactEmail of this GatewaySite.

        :param contactEmail: The contactEmail of this GatewaySite.
        :type: str
        """

        self._contactEmail = contactEmail

    @property
    def contactMobile(self):
        """
        Gets the contactMobile of this GatewaySite.

        :return: The contactMobile of this GatewaySite.
        :rtype: str
        """
        return self._contactMobile

    @contactMobile.setter
    def contactMobile(self, contactMobile):
        """
        Sets the contactMobile of this GatewaySite.

        :param contactMobile: The contactMobile of this GatewaySite.
        :type: str
        """

        self._contactMobile = contactMobile

    @property
    def contactName(self):
        """
        Gets the contactName of this GatewaySite.

        :return: The contactName of this GatewaySite.
        :rtype: str
        """
        return self._contactName

    @contactName.setter
    def contactName(self, contactName):
        """
        Sets the contactName of this GatewaySite.

        :param contactName: The contactName of this GatewaySite.
        :type: str
        """

        self._contactName = contactName

    @property
    def contactPhone(self):
        """
        Gets the contactPhone of this GatewaySite.

        :return: The contactPhone of this GatewaySite.
        :rtype: str
        """
        return self._contactPhone

    @contactPhone.setter
    def contactPhone(self, contactPhone):
        """
        Sets the contactPhone of this GatewaySite.

        :param contactPhone: The contactPhone of this GatewaySite.
        :type: str
        """

        self._contactPhone = contactPhone

    @property
    def country(self):
        """
        Gets the country of this GatewaySite.

        :return: The country of this GatewaySite.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this GatewaySite.

        :param country: The country of this GatewaySite.
        :type: str
        """

        self._country = country

    @property
    def lat(self):
        """
        Gets the lat of this GatewaySite.

        :return: The lat of this GatewaySite.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """
        Sets the lat of this GatewaySite.

        :param lat: The lat of this GatewaySite.
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """
        Gets the lon of this GatewaySite.

        :return: The lon of this GatewaySite.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """
        Sets the lon of this GatewaySite.

        :param lon: The lon of this GatewaySite.
        :type: float
        """

        self._lon = lon

    @property
    def name(self):
        """
        Gets the name of this GatewaySite.

        :return: The name of this GatewaySite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GatewaySite.

        :param name: The name of this GatewaySite.
        :type: str
        """

        self._name = name

    @property
    def postalCode(self):
        """
        Gets the postalCode of this GatewaySite.

        :return: The postalCode of this GatewaySite.
        :rtype: str
        """
        return self._postalCode

    @postalCode.setter
    def postalCode(self, postalCode):
        """
        Sets the postalCode of this GatewaySite.

        :param postalCode: The postalCode of this GatewaySite.
        :type: str
        """

        self._postalCode = postalCode

    @property
    def state(self):
        """
        Gets the state of this GatewaySite.

        :return: The state of this GatewaySite.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this GatewaySite.

        :param state: The state of this GatewaySite.
        :type: str
        """

        self._state = state

    @property
    def streetAddress(self):
        """
        Gets the streetAddress of this GatewaySite.

        :return: The streetAddress of this GatewaySite.
        :rtype: str
        """
        return self._streetAddress

    @streetAddress.setter
    def streetAddress(self, streetAddress):
        """
        Sets the streetAddress of this GatewaySite.

        :param streetAddress: The streetAddress of this GatewaySite.
        :type: str
        """

        self._streetAddress = streetAddress

    @property
    def streetAddress2(self):
        """
        Gets the streetAddress2 of this GatewaySite.

        :return: The streetAddress2 of this GatewaySite.
        :rtype: str
        """
        return self._streetAddress2

    @streetAddress2.setter
    def streetAddress2(self, streetAddress2):
        """
        Sets the streetAddress2 of this GatewaySite.

        :param streetAddress2: The streetAddress2 of this GatewaySite.
        :type: str
        """

        self._streetAddress2 = streetAddress2

    @property
    def id(self):
        """
        Gets the id of this GatewaySite.

        :return: The id of this GatewaySite.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GatewaySite.

        :param id: The id of this GatewaySite.
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """
        Gets the created of this GatewaySite.

        :return: The created of this GatewaySite.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this GatewaySite.

        :param created: The created of this GatewaySite.
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """
        Gets the modified of this GatewaySite.

        :return: The modified of this GatewaySite.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this GatewaySite.

        :param modified: The modified of this GatewaySite.
        :type: datetime
        """

        self._modified = modified

    @property
    def timezone(self):
        """
        Gets the timezone of this GatewaySite.

        :return: The timezone of this GatewaySite.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this GatewaySite.

        :param timezone: The timezone of this GatewaySite.
        :type: str
        """

        self._timezone = timezone

    @property
    def locale(self):
        """
        Gets the locale of this GatewaySite.

        :return: The locale of this GatewaySite.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this GatewaySite.

        :param locale: The locale of this GatewaySite.
        :type: str
        """

        self._locale = locale

    @property
    def shippingSameAsLocation(self):
        """
        Gets the shippingSameAsLocation of this GatewaySite.

        :return: The shippingSameAsLocation of this GatewaySite.
        :rtype: int
        """
        return self._shippingSameAsLocation

    @shippingSameAsLocation.setter
    def shippingSameAsLocation(self, shippingSameAsLocation):
        """
        Sets the shippingSameAsLocation of this GatewaySite.

        :param shippingSameAsLocation: The shippingSameAsLocation of this GatewaySite.
        :type: int
        """

        self._shippingSameAsLocation = shippingSameAsLocation

    @property
    def shippingContactName(self):
        """
        Gets the shippingContactName of this GatewaySite.

        :return: The shippingContactName of this GatewaySite.
        :rtype: str
        """
        return self._shippingContactName

    @shippingContactName.setter
    def shippingContactName(self, shippingContactName):
        """
        Sets the shippingContactName of this GatewaySite.

        :param shippingContactName: The shippingContactName of this GatewaySite.
        :type: str
        """

        self._shippingContactName = shippingContactName

    @property
    def shippingAddress(self):
        """
        Gets the shippingAddress of this GatewaySite.

        :return: The shippingAddress of this GatewaySite.
        :rtype: str
        """
        return self._shippingAddress

    @shippingAddress.setter
    def shippingAddress(self, shippingAddress):
        """
        Sets the shippingAddress of this GatewaySite.

        :param shippingAddress: The shippingAddress of this GatewaySite.
        :type: str
        """

        self._shippingAddress = shippingAddress

    @property
    def shippingAddress2(self):
        """
        Gets the shippingAddress2 of this GatewaySite.

        :return: The shippingAddress2 of this GatewaySite.
        :rtype: str
        """
        return self._shippingAddress2

    @shippingAddress2.setter
    def shippingAddress2(self, shippingAddress2):
        """
        Sets the shippingAddress2 of this GatewaySite.

        :param shippingAddress2: The shippingAddress2 of this GatewaySite.
        :type: str
        """

        self._shippingAddress2 = shippingAddress2

    @property
    def shippingCity(self):
        """
        Gets the shippingCity of this GatewaySite.

        :return: The shippingCity of this GatewaySite.
        :rtype: str
        """
        return self._shippingCity

    @shippingCity.setter
    def shippingCity(self, shippingCity):
        """
        Sets the shippingCity of this GatewaySite.

        :param shippingCity: The shippingCity of this GatewaySite.
        :type: str
        """

        self._shippingCity = shippingCity

    @property
    def shippingState(self):
        """
        Gets the shippingState of this GatewaySite.

        :return: The shippingState of this GatewaySite.
        :rtype: str
        """
        return self._shippingState

    @shippingState.setter
    def shippingState(self, shippingState):
        """
        Sets the shippingState of this GatewaySite.

        :param shippingState: The shippingState of this GatewaySite.
        :type: str
        """

        self._shippingState = shippingState

    @property
    def shippingPostalCode(self):
        """
        Gets the shippingPostalCode of this GatewaySite.

        :return: The shippingPostalCode of this GatewaySite.
        :rtype: str
        """
        return self._shippingPostalCode

    @shippingPostalCode.setter
    def shippingPostalCode(self, shippingPostalCode):
        """
        Sets the shippingPostalCode of this GatewaySite.

        :param shippingPostalCode: The shippingPostalCode of this GatewaySite.
        :type: str
        """

        self._shippingPostalCode = shippingPostalCode

    @property
    def shippingCountry(self):
        """
        Gets the shippingCountry of this GatewaySite.

        :return: The shippingCountry of this GatewaySite.
        :rtype: str
        """
        return self._shippingCountry

    @shippingCountry.setter
    def shippingCountry(self, shippingCountry):
        """
        Sets the shippingCountry of this GatewaySite.

        :param shippingCountry: The shippingCountry of this GatewaySite.
        :type: str
        """

        self._shippingCountry = shippingCountry

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewaySite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
