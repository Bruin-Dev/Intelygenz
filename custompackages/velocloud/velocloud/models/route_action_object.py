# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RouteActionObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, interface=None, linkInternalLogicalId=None, linkPolicy=None, routeCfg=None, routePolicy=None, serviceGroup=None, vlanId=None, wanlink=None, linkCosLogicalId=None, linkOuterDscpTag=None, linkInnerDscpTag=None):
        """
        RouteActionObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'interface': 'str',
            'linkInternalLogicalId': 'str',
            'linkPolicy': 'str',
            'routeCfg': 'object',
            'routePolicy': 'str',
            'serviceGroup': 'str',
            'vlanId': 'int',
            'wanlink': 'str',
            'linkCosLogicalId': 'str',
            'linkOuterDscpTag': 'str',
            'linkInnerDscpTag': 'str'
        }

        self.attribute_map = {
            'interface': 'interface',
            'linkInternalLogicalId': 'linkInternalLogicalId',
            'linkPolicy': 'linkPolicy',
            'routeCfg': 'routeCfg',
            'routePolicy': 'routePolicy',
            'serviceGroup': 'serviceGroup',
            'vlanId': 'vlanId',
            'wanlink': 'wanlink',
            'linkCosLogicalId': 'linkCosLogicalId',
            'linkOuterDscpTag': 'linkOuterDscpTag',
            'linkInnerDscpTag': 'linkInnerDscpTag'
        }

        self._interface = interface
        self._linkInternalLogicalId = linkInternalLogicalId
        self._linkPolicy = linkPolicy
        self._routeCfg = routeCfg
        self._routePolicy = routePolicy
        self._serviceGroup = serviceGroup
        self._vlanId = vlanId
        self._wanlink = wanlink
        self._linkCosLogicalId = linkCosLogicalId
        self._linkOuterDscpTag = linkOuterDscpTag
        self._linkInnerDscpTag = linkInnerDscpTag

    @property
    def interface(self):
        """
        Gets the interface of this RouteActionObject.

        :return: The interface of this RouteActionObject.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this RouteActionObject.

        :param interface: The interface of this RouteActionObject.
        :type: str
        """

        self._interface = interface

    @property
    def linkInternalLogicalId(self):
        """
        Gets the linkInternalLogicalId of this RouteActionObject.

        :return: The linkInternalLogicalId of this RouteActionObject.
        :rtype: str
        """
        return self._linkInternalLogicalId

    @linkInternalLogicalId.setter
    def linkInternalLogicalId(self, linkInternalLogicalId):
        """
        Sets the linkInternalLogicalId of this RouteActionObject.

        :param linkInternalLogicalId: The linkInternalLogicalId of this RouteActionObject.
        :type: str
        """

        self._linkInternalLogicalId = linkInternalLogicalId

    @property
    def linkPolicy(self):
        """
        Gets the linkPolicy of this RouteActionObject.

        :return: The linkPolicy of this RouteActionObject.
        :rtype: str
        """
        return self._linkPolicy

    @linkPolicy.setter
    def linkPolicy(self, linkPolicy):
        """
        Sets the linkPolicy of this RouteActionObject.

        :param linkPolicy: The linkPolicy of this RouteActionObject.
        :type: str
        """

        self._linkPolicy = linkPolicy

    @property
    def routeCfg(self):
        """
        Gets the routeCfg of this RouteActionObject.

        :return: The routeCfg of this RouteActionObject.
        :rtype: object
        """
        return self._routeCfg

    @routeCfg.setter
    def routeCfg(self, routeCfg):
        """
        Sets the routeCfg of this RouteActionObject.

        :param routeCfg: The routeCfg of this RouteActionObject.
        :type: object
        """

        self._routeCfg = routeCfg

    @property
    def routePolicy(self):
        """
        Gets the routePolicy of this RouteActionObject.

        :return: The routePolicy of this RouteActionObject.
        :rtype: str
        """
        return self._routePolicy

    @routePolicy.setter
    def routePolicy(self, routePolicy):
        """
        Sets the routePolicy of this RouteActionObject.

        :param routePolicy: The routePolicy of this RouteActionObject.
        :type: str
        """

        self._routePolicy = routePolicy

    @property
    def serviceGroup(self):
        """
        Gets the serviceGroup of this RouteActionObject.

        :return: The serviceGroup of this RouteActionObject.
        :rtype: str
        """
        return self._serviceGroup

    @serviceGroup.setter
    def serviceGroup(self, serviceGroup):
        """
        Sets the serviceGroup of this RouteActionObject.

        :param serviceGroup: The serviceGroup of this RouteActionObject.
        :type: str
        """

        self._serviceGroup = serviceGroup

    @property
    def vlanId(self):
        """
        Gets the vlanId of this RouteActionObject.

        :return: The vlanId of this RouteActionObject.
        :rtype: int
        """
        return self._vlanId

    @vlanId.setter
    def vlanId(self, vlanId):
        """
        Sets the vlanId of this RouteActionObject.

        :param vlanId: The vlanId of this RouteActionObject.
        :type: int
        """

        self._vlanId = vlanId

    @property
    def wanlink(self):
        """
        Gets the wanlink of this RouteActionObject.

        :return: The wanlink of this RouteActionObject.
        :rtype: str
        """
        return self._wanlink

    @wanlink.setter
    def wanlink(self, wanlink):
        """
        Sets the wanlink of this RouteActionObject.

        :param wanlink: The wanlink of this RouteActionObject.
        :type: str
        """

        self._wanlink = wanlink

    @property
    def linkCosLogicalId(self):
        """
        Gets the linkCosLogicalId of this RouteActionObject.

        :return: The linkCosLogicalId of this RouteActionObject.
        :rtype: str
        """
        return self._linkCosLogicalId

    @linkCosLogicalId.setter
    def linkCosLogicalId(self, linkCosLogicalId):
        """
        Sets the linkCosLogicalId of this RouteActionObject.

        :param linkCosLogicalId: The linkCosLogicalId of this RouteActionObject.
        :type: str
        """

        self._linkCosLogicalId = linkCosLogicalId

    @property
    def linkOuterDscpTag(self):
        """
        Gets the linkOuterDscpTag of this RouteActionObject.

        :return: The linkOuterDscpTag of this RouteActionObject.
        :rtype: str
        """
        return self._linkOuterDscpTag

    @linkOuterDscpTag.setter
    def linkOuterDscpTag(self, linkOuterDscpTag):
        """
        Sets the linkOuterDscpTag of this RouteActionObject.

        :param linkOuterDscpTag: The linkOuterDscpTag of this RouteActionObject.
        :type: str
        """

        self._linkOuterDscpTag = linkOuterDscpTag

    @property
    def linkInnerDscpTag(self):
        """
        Gets the linkInnerDscpTag of this RouteActionObject.

        :return: The linkInnerDscpTag of this RouteActionObject.
        :rtype: str
        """
        return self._linkInnerDscpTag

    @linkInnerDscpTag.setter
    def linkInnerDscpTag(self, linkInnerDscpTag):
        """
        Sets the linkInnerDscpTag of this RouteActionObject.

        :param linkInnerDscpTag: The linkInnerDscpTag of this RouteActionObject.
        :type: str
        """

        self._linkInnerDscpTag = linkInnerDscpTag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RouteActionObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
