# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LinkQualityObjectTimeseriesDataMetadataDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, latencyMsRx=None, latencyMsTx=None, lossPctRx=None, lossPctTx=None, jitterMsRx=None, jitterMsTx=None):
        """
        LinkQualityObjectTimeseriesDataMetadataDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'latencyMsRx': 'int',
            'latencyMsTx': 'int',
            'lossPctRx': 'int',
            'lossPctTx': 'int',
            'jitterMsRx': 'int',
            'jitterMsTx': 'int'
        }

        self.attribute_map = {
            'latencyMsRx': 'latencyMsRx',
            'latencyMsTx': 'latencyMsTx',
            'lossPctRx': 'lossPctRx',
            'lossPctTx': 'lossPctTx',
            'jitterMsRx': 'jitterMsRx',
            'jitterMsTx': 'jitterMsTx'
        }

        self._latencyMsRx = latencyMsRx
        self._latencyMsTx = latencyMsTx
        self._lossPctRx = lossPctRx
        self._lossPctTx = lossPctTx
        self._jitterMsRx = jitterMsRx
        self._jitterMsTx = jitterMsTx

    @property
    def latencyMsRx(self):
        """
        Gets the latencyMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :return: The latencyMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :rtype: int
        """
        return self._latencyMsRx

    @latencyMsRx.setter
    def latencyMsRx(self, latencyMsRx):
        """
        Sets the latencyMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :param latencyMsRx: The latencyMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :type: int
        """

        self._latencyMsRx = latencyMsRx

    @property
    def latencyMsTx(self):
        """
        Gets the latencyMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :return: The latencyMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :rtype: int
        """
        return self._latencyMsTx

    @latencyMsTx.setter
    def latencyMsTx(self, latencyMsTx):
        """
        Sets the latencyMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :param latencyMsTx: The latencyMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :type: int
        """

        self._latencyMsTx = latencyMsTx

    @property
    def lossPctRx(self):
        """
        Gets the lossPctRx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :return: The lossPctRx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :rtype: int
        """
        return self._lossPctRx

    @lossPctRx.setter
    def lossPctRx(self, lossPctRx):
        """
        Sets the lossPctRx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :param lossPctRx: The lossPctRx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :type: int
        """

        self._lossPctRx = lossPctRx

    @property
    def lossPctTx(self):
        """
        Gets the lossPctTx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :return: The lossPctTx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :rtype: int
        """
        return self._lossPctTx

    @lossPctTx.setter
    def lossPctTx(self, lossPctTx):
        """
        Sets the lossPctTx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :param lossPctTx: The lossPctTx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :type: int
        """

        self._lossPctTx = lossPctTx

    @property
    def jitterMsRx(self):
        """
        Gets the jitterMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :return: The jitterMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :rtype: int
        """
        return self._jitterMsRx

    @jitterMsRx.setter
    def jitterMsRx(self, jitterMsRx):
        """
        Sets the jitterMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :param jitterMsRx: The jitterMsRx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :type: int
        """

        self._jitterMsRx = jitterMsRx

    @property
    def jitterMsTx(self):
        """
        Gets the jitterMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :return: The jitterMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :rtype: int
        """
        return self._jitterMsTx

    @jitterMsTx.setter
    def jitterMsTx(self, jitterMsTx):
        """
        Sets the jitterMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.

        :param jitterMsTx: The jitterMsTx of this LinkQualityObjectTimeseriesDataMetadataDetail.
        :type: int
        """

        self._jitterMsTx = jitterMsTx

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LinkQualityObjectTimeseriesDataMetadataDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
