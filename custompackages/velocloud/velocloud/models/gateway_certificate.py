# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GatewayCertificate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created=None, csrId=None, gatewayId=None, networkId=None, certificate=None, serialNumber=None, subjectKeyId=None, fingerPrint=None, validFrom=None, validTo=None):
        """
        GatewayCertificate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created': 'datetime',
            'csrId': 'int',
            'gatewayId': 'int',
            'networkId': 'int',
            'certificate': 'str',
            'serialNumber': 'str',
            'subjectKeyId': 'str',
            'fingerPrint': 'str',
            'validFrom': 'datetime',
            'validTo': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'created': 'created',
            'csrId': 'csrId',
            'gatewayId': 'gatewayId',
            'networkId': 'networkId',
            'certificate': 'certificate',
            'serialNumber': 'serialNumber',
            'subjectKeyId': 'subjectKeyId',
            'fingerPrint': 'fingerPrint',
            'validFrom': 'validFrom',
            'validTo': 'validTo'
        }

        self._id = id
        self._created = created
        self._csrId = csrId
        self._gatewayId = gatewayId
        self._networkId = networkId
        self._certificate = certificate
        self._serialNumber = serialNumber
        self._subjectKeyId = subjectKeyId
        self._fingerPrint = fingerPrint
        self._validFrom = validFrom
        self._validTo = validTo

    @property
    def id(self):
        """
        Gets the id of this GatewayCertificate.

        :return: The id of this GatewayCertificate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GatewayCertificate.

        :param id: The id of this GatewayCertificate.
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """
        Gets the created of this GatewayCertificate.

        :return: The created of this GatewayCertificate.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this GatewayCertificate.

        :param created: The created of this GatewayCertificate.
        :type: datetime
        """

        self._created = created

    @property
    def csrId(self):
        """
        Gets the csrId of this GatewayCertificate.

        :return: The csrId of this GatewayCertificate.
        :rtype: int
        """
        return self._csrId

    @csrId.setter
    def csrId(self, csrId):
        """
        Sets the csrId of this GatewayCertificate.

        :param csrId: The csrId of this GatewayCertificate.
        :type: int
        """

        self._csrId = csrId

    @property
    def gatewayId(self):
        """
        Gets the gatewayId of this GatewayCertificate.

        :return: The gatewayId of this GatewayCertificate.
        :rtype: int
        """
        return self._gatewayId

    @gatewayId.setter
    def gatewayId(self, gatewayId):
        """
        Sets the gatewayId of this GatewayCertificate.

        :param gatewayId: The gatewayId of this GatewayCertificate.
        :type: int
        """

        self._gatewayId = gatewayId

    @property
    def networkId(self):
        """
        Gets the networkId of this GatewayCertificate.

        :return: The networkId of this GatewayCertificate.
        :rtype: int
        """
        return self._networkId

    @networkId.setter
    def networkId(self, networkId):
        """
        Sets the networkId of this GatewayCertificate.

        :param networkId: The networkId of this GatewayCertificate.
        :type: int
        """

        self._networkId = networkId

    @property
    def certificate(self):
        """
        Gets the certificate of this GatewayCertificate.

        :return: The certificate of this GatewayCertificate.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """
        Sets the certificate of this GatewayCertificate.

        :param certificate: The certificate of this GatewayCertificate.
        :type: str
        """

        self._certificate = certificate

    @property
    def serialNumber(self):
        """
        Gets the serialNumber of this GatewayCertificate.

        :return: The serialNumber of this GatewayCertificate.
        :rtype: str
        """
        return self._serialNumber

    @serialNumber.setter
    def serialNumber(self, serialNumber):
        """
        Sets the serialNumber of this GatewayCertificate.

        :param serialNumber: The serialNumber of this GatewayCertificate.
        :type: str
        """

        self._serialNumber = serialNumber

    @property
    def subjectKeyId(self):
        """
        Gets the subjectKeyId of this GatewayCertificate.

        :return: The subjectKeyId of this GatewayCertificate.
        :rtype: str
        """
        return self._subjectKeyId

    @subjectKeyId.setter
    def subjectKeyId(self, subjectKeyId):
        """
        Sets the subjectKeyId of this GatewayCertificate.

        :param subjectKeyId: The subjectKeyId of this GatewayCertificate.
        :type: str
        """

        self._subjectKeyId = subjectKeyId

    @property
    def fingerPrint(self):
        """
        Gets the fingerPrint of this GatewayCertificate.

        :return: The fingerPrint of this GatewayCertificate.
        :rtype: str
        """
        return self._fingerPrint

    @fingerPrint.setter
    def fingerPrint(self, fingerPrint):
        """
        Sets the fingerPrint of this GatewayCertificate.

        :param fingerPrint: The fingerPrint of this GatewayCertificate.
        :type: str
        """

        self._fingerPrint = fingerPrint

    @property
    def validFrom(self):
        """
        Gets the validFrom of this GatewayCertificate.

        :return: The validFrom of this GatewayCertificate.
        :rtype: datetime
        """
        return self._validFrom

    @validFrom.setter
    def validFrom(self, validFrom):
        """
        Sets the validFrom of this GatewayCertificate.

        :param validFrom: The validFrom of this GatewayCertificate.
        :type: datetime
        """

        self._validFrom = validFrom

    @property
    def validTo(self):
        """
        Gets the validTo of this GatewayCertificate.

        :return: The validTo of this GatewayCertificate.
        :rtype: datetime
        """
        return self._validTo

    @validTo.setter
    def validTo(self, validTo):
        """
        Sets the validTo of this GatewayCertificate.

        :param validTo: The validTo of this GatewayCertificate.
        :type: datetime
        """

        self._validTo = validTo

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
