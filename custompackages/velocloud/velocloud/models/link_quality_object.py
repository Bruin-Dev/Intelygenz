# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LinkQualityObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, distribution=None, sampleCount=None, sampleLength=None, score=None, timeseries=None, totalScore=None):
        """
        LinkQualityObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'distribution': 'LinkQualityObjectDistribution',
            'sampleCount': 'int',
            'sampleLength': 'int',
            'score': 'dict(str, float)',
            'timeseries': 'list[LinkQualityObjectTimeseriesData]',
            'totalScore': 'float'
        }

        self.attribute_map = {
            'distribution': 'distribution',
            'sampleCount': 'sampleCount',
            'sampleLength': 'sampleLength',
            'score': 'score',
            'timeseries': 'timeseries',
            'totalScore': 'totalScore'
        }

        self._distribution = distribution
        self._sampleCount = sampleCount
        self._sampleLength = sampleLength
        self._score = score
        self._timeseries = timeseries
        self._totalScore = totalScore

    @property
    def distribution(self):
        """
        Gets the distribution of this LinkQualityObject.

        :return: The distribution of this LinkQualityObject.
        :rtype: LinkQualityObjectDistribution
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """
        Sets the distribution of this LinkQualityObject.

        :param distribution: The distribution of this LinkQualityObject.
        :type: LinkQualityObjectDistribution
        """

        self._distribution = distribution

    @property
    def sampleCount(self):
        """
        Gets the sampleCount of this LinkQualityObject.

        :return: The sampleCount of this LinkQualityObject.
        :rtype: int
        """
        return self._sampleCount

    @sampleCount.setter
    def sampleCount(self, sampleCount):
        """
        Sets the sampleCount of this LinkQualityObject.

        :param sampleCount: The sampleCount of this LinkQualityObject.
        :type: int
        """

        self._sampleCount = sampleCount

    @property
    def sampleLength(self):
        """
        Gets the sampleLength of this LinkQualityObject.

        :return: The sampleLength of this LinkQualityObject.
        :rtype: int
        """
        return self._sampleLength

    @sampleLength.setter
    def sampleLength(self, sampleLength):
        """
        Sets the sampleLength of this LinkQualityObject.

        :param sampleLength: The sampleLength of this LinkQualityObject.
        :type: int
        """

        self._sampleLength = sampleLength

    @property
    def score(self):
        """
        Gets the score of this LinkQualityObject.

        :return: The score of this LinkQualityObject.
        :rtype: dict(str, float)
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this LinkQualityObject.

        :param score: The score of this LinkQualityObject.
        :type: dict(str, float)
        """

        self._score = score

    @property
    def timeseries(self):
        """
        Gets the timeseries of this LinkQualityObject.

        :return: The timeseries of this LinkQualityObject.
        :rtype: list[LinkQualityObjectTimeseriesData]
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries):
        """
        Sets the timeseries of this LinkQualityObject.

        :param timeseries: The timeseries of this LinkQualityObject.
        :type: list[LinkQualityObjectTimeseriesData]
        """

        self._timeseries = timeseries

    @property
    def totalScore(self):
        """
        Gets the totalScore of this LinkQualityObject.

        :return: The totalScore of this LinkQualityObject.
        :rtype: float
        """
        return self._totalScore

    @totalScore.setter
    def totalScore(self, totalScore):
        """
        Sets the totalScore of this LinkQualityObject.

        :param totalScore: The totalScore of this LinkQualityObject.
        :type: float
        """

        self._totalScore = totalScore

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LinkQualityObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
