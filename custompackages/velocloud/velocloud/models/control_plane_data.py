# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ControlPlaneData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, gatewaySelection=None, vpn=None, ipsecGatewayDetail=None):
        """
        ControlPlaneData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'gatewaySelection': 'ControlPlaneDataGatewaySelection',
            'vpn': 'ControlPlaneDataVpn',
            'ipsecGatewayDetail': 'dict(str, GatewayPoolGatewayIpsecGatewayDetail)'
        }

        self.attribute_map = {
            'gatewaySelection': 'gatewaySelection',
            'vpn': 'vpn',
            'ipsecGatewayDetail': 'ipsecGatewayDetail'
        }

        self._gatewaySelection = gatewaySelection
        self._vpn = vpn
        self._ipsecGatewayDetail = ipsecGatewayDetail

    @property
    def gatewaySelection(self):
        """
        Gets the gatewaySelection of this ControlPlaneData.

        :return: The gatewaySelection of this ControlPlaneData.
        :rtype: ControlPlaneDataGatewaySelection
        """
        return self._gatewaySelection

    @gatewaySelection.setter
    def gatewaySelection(self, gatewaySelection):
        """
        Sets the gatewaySelection of this ControlPlaneData.

        :param gatewaySelection: The gatewaySelection of this ControlPlaneData.
        :type: ControlPlaneDataGatewaySelection
        """

        self._gatewaySelection = gatewaySelection

    @property
    def vpn(self):
        """
        Gets the vpn of this ControlPlaneData.

        :return: The vpn of this ControlPlaneData.
        :rtype: ControlPlaneDataVpn
        """
        return self._vpn

    @vpn.setter
    def vpn(self, vpn):
        """
        Sets the vpn of this ControlPlaneData.

        :param vpn: The vpn of this ControlPlaneData.
        :type: ControlPlaneDataVpn
        """

        self._vpn = vpn

    @property
    def ipsecGatewayDetail(self):
        """
        Gets the ipsecGatewayDetail of this ControlPlaneData.

        :return: The ipsecGatewayDetail of this ControlPlaneData.
        :rtype: dict(str, GatewayPoolGatewayIpsecGatewayDetail)
        """
        return self._ipsecGatewayDetail

    @ipsecGatewayDetail.setter
    def ipsecGatewayDetail(self, ipsecGatewayDetail):
        """
        Sets the ipsecGatewayDetail of this ControlPlaneData.

        :param ipsecGatewayDetail: The ipsecGatewayDetail of this ControlPlaneData.
        :type: dict(str, GatewayPoolGatewayIpsecGatewayDetail)
        """

        self._ipsecGatewayDetail = ipsecGatewayDetail

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ControlPlaneData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
