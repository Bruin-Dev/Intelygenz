# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FirewallLogData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, edgeId=None, timestamp=None, allow=None, ruleLogicalId=None, interface=None, protocol=None, sourceIp=None, sourcePort=None, destIp=None, destPort=None, icmpType=None, length=None):
        """
        FirewallLogData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'edgeId': 'int',
            'timestamp': 'datetime',
            'allow': 'int',
            'ruleLogicalId': 'str',
            'interface': 'str',
            'protocol': 'str',
            'sourceIp': 'str',
            'sourcePort': 'int',
            'destIp': 'str',
            'destPort': 'int',
            'icmpType': 'str',
            'length': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'edgeId': 'edgeId',
            'timestamp': 'timestamp',
            'allow': 'allow',
            'ruleLogicalId': 'ruleLogicalId',
            'interface': 'interface',
            'protocol': 'protocol',
            'sourceIp': 'sourceIp',
            'sourcePort': 'sourcePort',
            'destIp': 'destIp',
            'destPort': 'destPort',
            'icmpType': 'icmpType',
            'length': 'length'
        }

        self._id = id
        self._edgeId = edgeId
        self._timestamp = timestamp
        self._allow = allow
        self._ruleLogicalId = ruleLogicalId
        self._interface = interface
        self._protocol = protocol
        self._sourceIp = sourceIp
        self._sourcePort = sourcePort
        self._destIp = destIp
        self._destPort = destPort
        self._icmpType = icmpType
        self._length = length

    @property
    def id(self):
        """
        Gets the id of this FirewallLogData.

        :return: The id of this FirewallLogData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FirewallLogData.

        :param id: The id of this FirewallLogData.
        :type: int
        """

        self._id = id

    @property
    def edgeId(self):
        """
        Gets the edgeId of this FirewallLogData.

        :return: The edgeId of this FirewallLogData.
        :rtype: int
        """
        return self._edgeId

    @edgeId.setter
    def edgeId(self, edgeId):
        """
        Sets the edgeId of this FirewallLogData.

        :param edgeId: The edgeId of this FirewallLogData.
        :type: int
        """

        self._edgeId = edgeId

    @property
    def timestamp(self):
        """
        Gets the timestamp of this FirewallLogData.

        :return: The timestamp of this FirewallLogData.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this FirewallLogData.

        :param timestamp: The timestamp of this FirewallLogData.
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def allow(self):
        """
        Gets the allow of this FirewallLogData.

        :return: The allow of this FirewallLogData.
        :rtype: int
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """
        Sets the allow of this FirewallLogData.

        :param allow: The allow of this FirewallLogData.
        :type: int
        """

        self._allow = allow

    @property
    def ruleLogicalId(self):
        """
        Gets the ruleLogicalId of this FirewallLogData.

        :return: The ruleLogicalId of this FirewallLogData.
        :rtype: str
        """
        return self._ruleLogicalId

    @ruleLogicalId.setter
    def ruleLogicalId(self, ruleLogicalId):
        """
        Sets the ruleLogicalId of this FirewallLogData.

        :param ruleLogicalId: The ruleLogicalId of this FirewallLogData.
        :type: str
        """

        self._ruleLogicalId = ruleLogicalId

    @property
    def interface(self):
        """
        Gets the interface of this FirewallLogData.

        :return: The interface of this FirewallLogData.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this FirewallLogData.

        :param interface: The interface of this FirewallLogData.
        :type: str
        """

        self._interface = interface

    @property
    def protocol(self):
        """
        Gets the protocol of this FirewallLogData.

        :return: The protocol of this FirewallLogData.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this FirewallLogData.

        :param protocol: The protocol of this FirewallLogData.
        :type: str
        """

        self._protocol = protocol

    @property
    def sourceIp(self):
        """
        Gets the sourceIp of this FirewallLogData.

        :return: The sourceIp of this FirewallLogData.
        :rtype: str
        """
        return self._sourceIp

    @sourceIp.setter
    def sourceIp(self, sourceIp):
        """
        Sets the sourceIp of this FirewallLogData.

        :param sourceIp: The sourceIp of this FirewallLogData.
        :type: str
        """

        self._sourceIp = sourceIp

    @property
    def sourcePort(self):
        """
        Gets the sourcePort of this FirewallLogData.

        :return: The sourcePort of this FirewallLogData.
        :rtype: int
        """
        return self._sourcePort

    @sourcePort.setter
    def sourcePort(self, sourcePort):
        """
        Sets the sourcePort of this FirewallLogData.

        :param sourcePort: The sourcePort of this FirewallLogData.
        :type: int
        """

        self._sourcePort = sourcePort

    @property
    def destIp(self):
        """
        Gets the destIp of this FirewallLogData.

        :return: The destIp of this FirewallLogData.
        :rtype: str
        """
        return self._destIp

    @destIp.setter
    def destIp(self, destIp):
        """
        Sets the destIp of this FirewallLogData.

        :param destIp: The destIp of this FirewallLogData.
        :type: str
        """

        self._destIp = destIp

    @property
    def destPort(self):
        """
        Gets the destPort of this FirewallLogData.

        :return: The destPort of this FirewallLogData.
        :rtype: int
        """
        return self._destPort

    @destPort.setter
    def destPort(self, destPort):
        """
        Sets the destPort of this FirewallLogData.

        :param destPort: The destPort of this FirewallLogData.
        :type: int
        """

        self._destPort = destPort

    @property
    def icmpType(self):
        """
        Gets the icmpType of this FirewallLogData.

        :return: The icmpType of this FirewallLogData.
        :rtype: str
        """
        return self._icmpType

    @icmpType.setter
    def icmpType(self, icmpType):
        """
        Sets the icmpType of this FirewallLogData.

        :param icmpType: The icmpType of this FirewallLogData.
        :type: str
        """

        self._icmpType = icmpType

    @property
    def length(self):
        """
        Gets the length of this FirewallLogData.

        :return: The length of this FirewallLogData.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this FirewallLogData.

        :param length: The length of this FirewallLogData.
        :type: int
        """

        self._length = length

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FirewallLogData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
