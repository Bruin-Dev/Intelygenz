# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetricsGetEdgeDeviceMetricsDeviceEdgeInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, edgeId=None, enterpriseId=None, hostName=None, id=None, ipAddress=None, lastContact=None, macAddress=None):
        """
        MetricsGetEdgeDeviceMetricsDeviceEdgeInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'edgeId': 'int',
            'enterpriseId': 'int',
            'hostName': 'str',
            'id': 'int',
            'ipAddress': 'str',
            'lastContact': 'datetime',
            'macAddress': 'str'
        }

        self.attribute_map = {
            'edgeId': 'edgeId',
            'enterpriseId': 'enterpriseId',
            'hostName': 'hostName',
            'id': 'id',
            'ipAddress': 'ipAddress',
            'lastContact': 'lastContact',
            'macAddress': 'macAddress'
        }

        self._edgeId = edgeId
        self._enterpriseId = enterpriseId
        self._hostName = hostName
        self._id = id
        self._ipAddress = ipAddress
        self._lastContact = lastContact
        self._macAddress = macAddress

    @property
    def edgeId(self):
        """
        Gets the edgeId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The edgeId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: int
        """
        return self._edgeId

    @edgeId.setter
    def edgeId(self, edgeId):
        """
        Sets the edgeId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param edgeId: The edgeId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: int
        """

        self._edgeId = edgeId

    @property
    def enterpriseId(self):
        """
        Gets the enterpriseId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The enterpriseId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: int
        """
        return self._enterpriseId

    @enterpriseId.setter
    def enterpriseId(self, enterpriseId):
        """
        Sets the enterpriseId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param enterpriseId: The enterpriseId of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: int
        """

        self._enterpriseId = enterpriseId

    @property
    def hostName(self):
        """
        Gets the hostName of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The hostName of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: str
        """
        return self._hostName

    @hostName.setter
    def hostName(self, hostName):
        """
        Sets the hostName of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param hostName: The hostName of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: str
        """

        self._hostName = hostName

    @property
    def id(self):
        """
        Gets the id of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The id of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param id: The id of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: int
        """

        self._id = id

    @property
    def ipAddress(self):
        """
        Gets the ipAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The ipAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: str
        """
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, ipAddress):
        """
        Sets the ipAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param ipAddress: The ipAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: str
        """

        self._ipAddress = ipAddress

    @property
    def lastContact(self):
        """
        Gets the lastContact of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The lastContact of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: datetime
        """
        return self._lastContact

    @lastContact.setter
    def lastContact(self, lastContact):
        """
        Sets the lastContact of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param lastContact: The lastContact of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: datetime
        """

        self._lastContact = lastContact

    @property
    def macAddress(self):
        """
        Gets the macAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :return: The macAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :rtype: str
        """
        return self._macAddress

    @macAddress.setter
    def macAddress(self, macAddress):
        """
        Sets the macAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.

        :param macAddress: The macAddress of this MetricsGetEdgeDeviceMetricsDeviceEdgeInfo.
        :type: str
        """

        self._macAddress = macAddress

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetricsGetEdgeDeviceMetricsDeviceEdgeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
