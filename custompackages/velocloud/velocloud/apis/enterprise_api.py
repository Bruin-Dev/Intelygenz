# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EnterpriseApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def enterpriseDeleteEnterprise(self, body, **kwargs):
        """
        Delete an enterprise
        Delete the enterprise specified by the given id parameter. enterpriseId is also a valid alias for id.  Privileges required:  `DELETE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterprise body: (required)
        :return: EnterpriseDeleteEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterprise_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise
        Delete the enterprise specified by the given id parameter. enterpriseId is also a valid alias for id.  Privileges required:  `DELETE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterprise body: (required)
        :return: EnterpriseDeleteEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterpriseGatewayRecords(self, body, **kwargs):
        """
        Delete enterprise gateway record(s)
        Delete the enterprise gateway record(s) matching the given gateway id(s) and neighbor IP addresses.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseGatewayRecords(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseGatewayRecords body: (required)
        :return: EnterpriseDeleteEnterpriseGatewayRecordsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterpriseGatewayRecords_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterpriseGatewayRecords_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterpriseGatewayRecords_with_http_info(self, body, **kwargs):
        """
        Delete enterprise gateway record(s)
        Delete the enterprise gateway record(s) matching the given gateway id(s) and neighbor IP addresses.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseGatewayRecords_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseGatewayRecords body: (required)
        :return: EnterpriseDeleteEnterpriseGatewayRecordsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterpriseGatewayRecords" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterpriseGatewayRecords`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterpriseGatewayRecords'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseGatewayRecordsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Delete an enterprise network allocation
        Delete an enterprise network allocation, by id.  Privileges required:  `DELETE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseDeleteEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise network allocation
        Delete an enterprise network allocation, by id.  Privileges required:  `DELETE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseDeleteEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterpriseService(self, body, **kwargs):
        """
        Delete an enterprise service
        Delete an enterprise service, by id.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseService(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseService body: (required)
        :return: EnterpriseDeleteEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterpriseService_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterpriseService_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterpriseService_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise service
        Delete an enterprise service, by id.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseService_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseService body: (required)
        :return: EnterpriseDeleteEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterpriseService" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterpriseService`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterpriseService'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseServiceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterprise(self, body, **kwargs):
        """
        Get enterprise
        Retrieve enterprise data, with optional proxy (partner) detail.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterprise body: (required)
        :return: EnterpriseGetEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterprise_with_http_info(self, body, **kwargs):
        """
        Get enterprise
        Retrieve enterprise data, with optional proxy (partner) detail.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterprise body: (required)
        :return: EnterpriseGetEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAddresses(self, body, **kwargs):
        """
        Get enterprise IP address information
        Retrieve the public IP address information for the management and control entities associated with this enterprise, including Orchestrator(s), Gateway(s), and datacenter(s).  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAddresses(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAddresses body: (required)
        :return: list[EnterpriseGetEnterpriseAddressesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAddresses_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAddresses_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAddresses_with_http_info(self, body, **kwargs):
        """
        Get enterprise IP address information
        Retrieve the public IP address information for the management and control entities associated with this enterprise, including Orchestrator(s), Gateway(s), and datacenter(s).  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAddresses_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAddresses body: (required)
        :return: list[EnterpriseGetEnterpriseAddressesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAddresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAddresses`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAddresses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseAddressesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAlertConfigurations(self, body, **kwargs):
        """
        Get the enterprise alert configuration
        Get the alert configurations associated with an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlertConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlertConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseAlertConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAlertConfigurations_with_http_info(self, body, **kwargs):
        """
        Get the enterprise alert configuration
        Get the alert configurations associated with an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlertConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlertConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseAlertConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAlertConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAlertConfigurations`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAlertConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseAlertConfigurationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAlerts(self, body, **kwargs):
        """
        Get triggered enterprise alerts
        Gets past triggered alerts for the specified enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlerts(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlerts body: (required)
        :return: EnterpriseGetEnterpriseAlertsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAlerts_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAlerts_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAlerts_with_http_info(self, body, **kwargs):
        """
        Get triggered enterprise alerts
        Gets past triggered alerts for the specified enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlerts_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlerts body: (required)
        :return: EnterpriseGetEnterpriseAlertsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAlerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAlerts`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAlerts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseAlertsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAllAlertRecipients(self, body, **kwargs):
        """
        List recipients currently receiving ALL enterprise alerts
        List the recipients currently configured to receive all alerts for an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAllAlertRecipients(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseGetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAllAlertRecipients_with_http_info(self, body, **kwargs):
        """
        List recipients currently receiving ALL enterprise alerts
        List the recipients currently configured to receive all alerts for an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAllAlertRecipients_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseGetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAllAlertRecipients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAllAlertRecipients`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAllAlertsRecipients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseAllAlertRecipientsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseCapabilities(self, body, **kwargs):
        """
        Get enterprise capabilities
        Retrieve a list of the enterprise capabilities currently enabled/disabled on an enterprise (e.g. BGP, COS mapping, PKI, etc.)  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseCapabilities(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseCapabilities body: (required)
        :return: EnterpriseGetEnterpriseCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseCapabilities_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseCapabilities_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseCapabilities_with_http_info(self, body, **kwargs):
        """
        Get enterprise capabilities
        Retrieve a list of the enterprise capabilities currently enabled/disabled on an enterprise (e.g. BGP, COS mapping, PKI, etc.)  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseCapabilities_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseCapabilities body: (required)
        :return: EnterpriseGetEnterpriseCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseCapabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseCapabilities`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseCapabilities'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseCapabilitiesResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseConfigurations(self, body, **kwargs):
        """
        Get enterprise configuration profiles
        Retrieve a list of configuration profiles existing on an enterprise, with optional edge and/or module detail.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseConfigurations_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseConfigurations_with_http_info(self, body, **kwargs):
        """
        Get enterprise configuration profiles
        Retrieve a list of configuration profiles existing on an enterprise, with optional edge and/or module detail.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseConfigurations`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseConfigurationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseEdges(self, body, **kwargs):
        """
        Get edges associated with an enterprise
        Gets all Edges associated with the specified enterprise, including optional site, link, and configuration details.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseEdges(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseEdges body: (required)
        :return: list[EnterpriseGetEnterpriseEdgesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseEdges_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseEdges_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseEdges_with_http_info(self, body, **kwargs):
        """
        Get edges associated with an enterprise
        Gets all Edges associated with the specified enterprise, including optional site, link, and configuration details.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseEdges_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseEdges body: (required)
        :return: list[EnterpriseGetEnterpriseEdgesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseEdges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseEdges`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseEdges'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseEdgesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseGatewayHandoff(self, body, **kwargs):
        """
        Get enterprise gateway handoff configuration
        Get enterprise gateway handoff configuration.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseGatewayHandoff(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseGetEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseGatewayHandoff_with_http_info(self, body, **kwargs):
        """
        Get enterprise gateway handoff configuration
        Get enterprise gateway handoff configuration.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseGatewayHandoff_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseGetEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseGatewayHandoff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseGatewayHandoff`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseGatewayHandoff'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseGatewayHandoffResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Get an enterprise network allocation
        Retrieve a network allocation object by id.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseGetEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Get an enterprise network allocation
        Retrieve a network allocation object by id.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseGetEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseNetworkAllocations(self, body, **kwargs):
        """
        Get all network allocation objects defined on an enterprise
        Retrieve a list of all of the network allocations defined onthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocations body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkAllocationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseNetworkAllocations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseNetworkAllocations_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseNetworkAllocations_with_http_info(self, body, **kwargs):
        """
        Get all network allocation objects defined on an enterprise
        Retrieve a list of all of the network allocations defined onthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocations body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkAllocationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseNetworkAllocations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseNetworkAllocations`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseNetworkAllocations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseNetworkAllocationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseNetworkSegments(self, body, **kwargs):
        """
        Get all network segment objects defined on an enterprise
        Retrieve a list of all of the network segments defined forthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkSegments(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkSegments body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkSegmentsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseNetworkSegments_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseNetworkSegments_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseNetworkSegments_with_http_info(self, body, **kwargs):
        """
        Get all network segment objects defined on an enterprise
        Retrieve a list of all of the network segments defined forthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkSegments_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkSegments body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkSegmentsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseNetworkSegments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseNetworkSegments`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseNetworkSegments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseNetworkSegmentsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseProperty(self, body, **kwargs):
        """
        Get enterprise property
        Get a enterprise property by object id or other attribute.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseProperty body: (required)
        :return: EnterpriseGetEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseProperty_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseProperty_with_http_info(self, body, **kwargs):
        """
        Get enterprise property
        Get a enterprise property by object id or other attribute.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseProperty body: (required)
        :return: EnterpriseGetEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseProperty`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterprisePropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseRouteConfiguration(self, body, **kwargs):
        """
        Get route advertisement and routing preferences policy
        Get enterprise route advertisement, routing peferences and OSPF, BGP advertisement policy as configured in the Overlay Flow Control table.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseGetEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseRouteConfiguration_with_http_info(self, body, **kwargs):
        """
        Get route advertisement and routing preferences policy
        Get enterprise route advertisement, routing peferences and OSPF, BGP advertisement policy as configured in the Overlay Flow Control table.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseGetEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseRouteConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseRouteConfiguration`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseRouteConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseRouteConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseRouteTable(self, body, **kwargs):
        """
        Get the enterprise route table
        Get composite enterprise route table, optionally scoped by profile(s). The returned routes include static routes, directly connected routes and learned routes.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteTable(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteTable body: (required)
        :return: EnterpriseGetEnterpriseRouteTableResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseRouteTable_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseRouteTable_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseRouteTable_with_http_info(self, body, **kwargs):
        """
        Get the enterprise route table
        Get composite enterprise route table, optionally scoped by profile(s). The returned routes include static routes, directly connected routes and learned routes.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteTable_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteTable body: (required)
        :return: EnterpriseGetEnterpriseRouteTableResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseRouteTable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseRouteTable`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseRouteTable'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseRouteTableResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseServices(self, body, **kwargs):
        """
        Get enterprise network service detail
        Get the network service JSON objects defined for an enterprise.  Privileges required:  `READ` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseServices(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseServices body: (required)
        :return: list[EnterpriseGetEnterpriseServicesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseServices_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseServices_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseServices_with_http_info(self, body, **kwargs):
        """
        Get enterprise network service detail
        Get the network service JSON objects defined for an enterprise.  Privileges required:  `READ` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseServices_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseServices body: (required)
        :return: list[EnterpriseGetEnterpriseServicesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseServices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseServices`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseServices'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseServicesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterprise(self, body, **kwargs):
        """
        Create enterprise
        Creates a new enterprise, which is owned by the operator.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterprise body: (required)
        :return: EnterpriseInsertEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterprise_with_http_info(self, body, **kwargs):
        """
        Create enterprise
        Creates a new enterprise, which is owned by the operator.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterprise body: (required)
        :return: EnterpriseInsertEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Insert an enterprise network allocation
        Insert a new enterprise network allocation.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseInsertEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Insert an enterprise network allocation
        Insert a new enterprise network allocation.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseInsertEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseNetworkSegment(self, body, **kwargs):
        """
        Insert an enterprise network segment
        Insert a new enterprise network segment.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkSegment(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment body: (required)
        :return: EnterpriseInsertEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseNetworkSegment_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseNetworkSegment_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseNetworkSegment_with_http_info(self, body, **kwargs):
        """
        Insert an enterprise network segment
        Insert a new enterprise network segment.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkSegment_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment body: (required)
        :return: EnterpriseInsertEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseNetworkSegment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseNetworkSegment`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseNetworkSegment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseNetworkSegmentResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseService(self, body, **kwargs):
        """
        Insert a new enterprise service
        Insert a new enterprise service.  Privileges required:  `CREATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseService(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseService body: (required)
        :return: EnterpriseInsertEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseService_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseService_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseService_with_http_info(self, body, **kwargs):
        """
        Insert a new enterprise service
        Insert a new enterprise service.  Privileges required:  `CREATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseService_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseService body: (required)
        :return: EnterpriseInsertEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseService" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseService`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseService'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseServiceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseAlertConfigurations(self, body, **kwargs):
        """
        Insert, update, or delete enterprise alert configurations
        Insert, update, or delete enterprise alert configurations. Returns the array of alert configurations submitted, with ids added for the entries that have been successfully inserted. If an entry is not successfully inserted or updated, an `error` property is included in the .  Privileges required:  `CREATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseAlertConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseAlertConfigurations body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseAlertConfigurationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(self, body, **kwargs):
        """
        Insert, update, or delete enterprise alert configurations
        Insert, update, or delete enterprise alert configurations. Returns the array of alert configurations submitted, with ids added for the entries that have been successfully inserted. If an entry is not successfully inserted or updated, an `error` property is included in the .  Privileges required:  `CREATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseAlertConfigurations body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseAlertConfigurationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseAlertConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseAlertConfigurations`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseAlertConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterpriseAlertConfigurationsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseCapability(self, body, **kwargs):
        """
        Insert or update an enterprise capability
        Insert or update an enterprise capability.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseCapability(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseCapability body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseCapabilityResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(self, body, **kwargs):
        """
        Insert or update an enterprise capability
        Insert or update an enterprise capability.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseCapability body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseCapabilityResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseCapability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseCapability`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseCapability'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterpriseCapabilityResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseGatewayHandoff(self, body, **kwargs):
        """
        Insert or update an enterprise gateway handoff configuration
        Insert or update an enterprise gateway handoff configuration.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseGatewayHandoff(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(self, body, **kwargs):
        """
        Insert or update an enterprise gateway handoff configuration
        Insert or update an enterprise gateway handoff configuration.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseGatewayHandoff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseGatewayHandoff`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseGatewayHandoff'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterpriseGatewayHandoffResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseProperty(self, body, **kwargs):
        """
        Insert or update an enterprise property
        Insert a enterprise property. If property with the given name already exists, the property will be updated.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseProperty body: (required)
        :return: EnterpriseInsertOrUpdateEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(self, body, **kwargs):
        """
        Insert or update an enterprise property
        Insert a enterprise property. If property with the given name already exists, the property will be updated.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseProperty body: (required)
        :return: EnterpriseInsertOrUpdateEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseProperty`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterprisePropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseSetEnterpriseAllAlertRecipients(self, body, **kwargs):
        """
        Set the recipients who should receive all alerts for an enterprise
        Set the recipients who should receive all alerts for an enterprise.  Privileges required:  `UPDATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseSetEnterpriseAllAlertRecipients(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseSetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseSetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseSetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseSetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
            return data

    def enterpriseSetEnterpriseAllAlertRecipients_with_http_info(self, body, **kwargs):
        """
        Set the recipients who should receive all alerts for an enterprise
        Set the recipients who should receive all alerts for an enterprise.  Privileges required:  `UPDATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseSetEnterpriseAllAlertRecipients_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseSetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseSetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseSetEnterpriseAllAlertRecipients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseSetEnterpriseAllAlertRecipients`")


        collection_formats = {}

        resource_path = '/enterprise/setEnterpriseAllAlertsRecipients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseSetEnterpriseAllAlertRecipientsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterprise(self, body, **kwargs):
        """
        Update an enterprise
        Update an enterprise provided an object id or name, and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterprise body: (required)
        :return: EnterpriseUpdateEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterprise_with_http_info(self, body, **kwargs):
        """
        Update an enterprise
        Update an enterprise provided an object id or name, and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterprise body: (required)
        :return: EnterpriseUpdateEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Update an enterprise network allocation
        Update an enterprise network allocation, provided an object id and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Update an enterprise network allocation
        Update an enterprise network allocation, provided an object id and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseNetworkSegment(self, body, **kwargs):
        """
        Update an enterprise network segment
        Update an enterprise network segment.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkSegment(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment1 body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseNetworkSegment_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseNetworkSegment_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseNetworkSegment_with_http_info(self, body, **kwargs):
        """
        Update an enterprise network segment
        Update an enterprise network segment.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkSegment_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment1 body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseNetworkSegment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseNetworkSegment`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseNetworkSegment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseNetworkSegmentResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseRoute(self, body, **kwargs):
        """
        Update an enterprise route
        Update an enterprise route, set advertisement and cost values. Required parameters include the original route, as returned by enterprise/getEnterpriseRouteTable and the updated route with modified advertisement and route preference ordering.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRoute(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRoute body: (required)
        :return: EnterpriseUpdateEnterpriseRouteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseRoute_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseRoute_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseRoute_with_http_info(self, body, **kwargs):
        """
        Update an enterprise route
        Update an enterprise route, set advertisement and cost values. Required parameters include the original route, as returned by enterprise/getEnterpriseRouteTable and the updated route with modified advertisement and route preference ordering.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRoute_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRoute body: (required)
        :return: EnterpriseUpdateEnterpriseRouteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseRoute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseRoute`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseRoute'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseRouteResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseRouteConfiguration(self, body, **kwargs):
        """
        Update enterprise routing configuration
        Update enterprise routing configuration, by configuration id or logicalId.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRouteConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseUpdateEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(self, body, **kwargs):
        """
        Update enterprise routing configuration
        Update enterprise routing configuration, by configuration id or logicalId.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseUpdateEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseRouteConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseRouteConfiguration`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseRouteConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseRouteConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseSecurityPolicy(self, body, **kwargs):
        """
        Update enterprise security policy
        Update enterprise security policy in accordance with to the passed ipsec settings.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseSecurityPolicy(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseSecurityPolicy body: (required)
        :return: EnterpriseUpdateEnterpriseSecurityPolicyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(self, body, **kwargs):
        """
        Update enterprise security policy
        Update enterprise security policy in accordance with to the passed ipsec settings.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseSecurityPolicy body: (required)
        :return: EnterpriseUpdateEnterpriseSecurityPolicyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseSecurityPolicy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseSecurityPolicy`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseSecurityPolicy'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseSecurityPolicyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseService(self, body, **kwargs):
        """
        Update an enterprise service
        Update the enterprise service with the given id according to the settings specified by the _update field.  Privileges required:  `UPDATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseService(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseService body: (required)
        :return: EnterpriseUpdateEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseService_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseService_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseService_with_http_info(self, body, **kwargs):
        """
        Update an enterprise service
        Update the enterprise service with the given id according to the settings specified by the _update field.  Privileges required:  `UPDATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseService_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseService body: (required)
        :return: EnterpriseUpdateEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseService" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseService`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseService'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseServiceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
