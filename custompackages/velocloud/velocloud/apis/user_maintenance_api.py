# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserMaintenanceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def enterpriseGetEnterpriseUsers(self, body, **kwargs):
        """
        Get list of enterprise users by enterprise id
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseUsers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseUsers body: (required)
        :return: list[EnterpriseGetEnterpriseUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseUsers_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseUsers_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseUsers_with_http_info(self, body, **kwargs):
        """
        Get list of enterprise users by enterprise id
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseUsers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseUsers body: (required)
        :return: list[EnterpriseGetEnterpriseUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseUsers`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseUsers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseUsersResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseUser(self, body, **kwargs):
        """
        Insert an enterprise user
        Insert an enterprise user.  Privileges required:  `CREATE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseUser body: (required)
        :return: EnterpriseInsertEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Insert an enterprise user
        Insert an enterprise user.  Privileges required:  `CREATE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseUser body: (required)
        :return: EnterpriseInsertEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyDeleteEnterpriseProxyUser(self, body, **kwargs):
        """
        Delete an enterprise proxy admin user
        Delete an enterprise proxy user by id or username. Note that `enterpriseProxyId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyDeleteEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyDeleteEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyDeleteEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise proxy admin user
        Delete an enterprise proxy user by id or username. Note that `enterpriseProxyId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyDeleteEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyDeleteEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyDeleteEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyDeleteEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/deleteEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyDeleteEnterpriseProxyUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyUser(self, body, **kwargs):
        """
        Get an enterprise proxy user
        Get an enterprise proxy user by id or username.  Privileges required:  `READ` `PROXY_USER`  `READ` `PROXY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyGetEnterpriseProxyUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Get an enterprise proxy user
        Get an enterprise proxy user by id or username.  Privileges required:  `READ` `PROXY_USER`  `READ` `PROXY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyGetEnterpriseProxyUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyGetEnterpriseProxyUser',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyUsers(self, body, **kwargs):
        """
        Get all enterprise proxy admin users
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUsers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUsers body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyUsers_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyUsers_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyUsers_with_http_info(self, body, **kwargs):
        """
        Get all enterprise proxy admin users
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUsers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUsers body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyUsers`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyUsers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyUsersResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyInsertEnterpriseProxyUser(self, body, **kwargs):
        """
        Create a new partner admin user
        Create a new partner admin user  Privileges required:  `CREATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyInsertEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyInsertEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyInsertEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Create a new partner admin user
        Create a new partner admin user  Privileges required:  `CREATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyInsertEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyInsertEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/insertEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyInsertEnterpriseProxyUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyUpdateEnterpriseProxyUser(self, body, **kwargs):
        """
        Update an enterprise proxy admin user
        Update an enterprise proxy admin user  Privileges required:  `UPDATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyUpdateEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyUpdateEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyUpdateEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Update an enterprise proxy admin user
        Update an enterprise proxy admin user  Privileges required:  `UPDATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyUpdateEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyUpdateEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyUpdateEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyUpdateEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/updateEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyUpdateEnterpriseProxyUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUserDeleteEnterpriseUser(self, body, **kwargs):
        """
        Delete an enterprise user.
        Delete an enterprise user by id or username. Note that `enterpriseId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserDeleteEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserDeleteEnterpriseUser body: (required)
        :return: EnterpriseUserDeleteEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUserDeleteEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUserDeleteEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseUserDeleteEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise user.
        Delete an enterprise user by id or username. Note that `enterpriseId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserDeleteEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserDeleteEnterpriseUser body: (required)
        :return: EnterpriseUserDeleteEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUserDeleteEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUserDeleteEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterpriseUser/deleteEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUserDeleteEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUserGetEnterpriseUser(self, body, **kwargs):
        """
        Get an enterprise user
        Get an enterprise user by id or username.  Privileges required:  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserGetEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserGetEnterpriseUser body: (required)
        :return: EnterpriseUserGetEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUserGetEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUserGetEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseUserGetEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Get an enterprise user
        Get an enterprise user by id or username.  Privileges required:  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserGetEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserGetEnterpriseUser body: (required)
        :return: EnterpriseUserGetEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUserGetEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUserGetEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterpriseUser/getEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUserGetEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUserUpdateEnterpriseUser(self, body, **kwargs):
        """
        Update an enterprise user
        Update an enterprise user provided an object `id` or other identifying attributes, and an `_update` object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE_USER`, or  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserUpdateEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserUpdateEnterpriseUser body: (required)
        :return: EnterpriseUserUpdateEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUserUpdateEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUserUpdateEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseUserUpdateEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Update an enterprise user
        Update an enterprise user provided an object `id` or other identifying attributes, and an `_update` object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE_USER`, or  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserUpdateEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserUpdateEnterpriseUser body: (required)
        :return: EnterpriseUserUpdateEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUserUpdateEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUserUpdateEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterpriseUser/updateEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUserUpdateEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserDeleteOperatorUser(self, body, **kwargs):
        """
        Delete an operator user
        Delete an operator user object by `id` or `username`.  Privileges required:  `DELETE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserDeleteOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserDeleteOperatorUser body: (required)
        :return: OperatorUserDeleteOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserDeleteOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserDeleteOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserDeleteOperatorUser_with_http_info(self, body, **kwargs):
        """
        Delete an operator user
        Delete an operator user object by `id` or `username`.  Privileges required:  `DELETE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserDeleteOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserDeleteOperatorUser body: (required)
        :return: OperatorUserDeleteOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserDeleteOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserDeleteOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/deleteOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserDeleteOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserGetOperatorUser(self, body, **kwargs):
        """
        Get an operator user
        Get an operator user object by `id` or `username`.  Privileges required:  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserGetOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserGetOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserGetOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserGetOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserGetOperatorUser_with_http_info(self, body, **kwargs):
        """
        Get an operator user
        Get an operator user object by `id` or `username`.  Privileges required:  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserGetOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserGetOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserGetOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserGetOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/getOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserGetOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserInsertOperatorUser(self, body, **kwargs):
        """
        Insert an operator user
        Insert an operator user and associate with an operator's network.  Privileges required:  `CREATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserInsertOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserInsertOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserInsertOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserInsertOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserInsertOperatorUser_with_http_info(self, body, **kwargs):
        """
        Insert an operator user
        Insert an operator user and associate with an operator's network.  Privileges required:  `CREATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserInsertOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserInsertOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserInsertOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserInsertOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/insertOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserGetOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserUpdateOperatorUser(self, body, **kwargs):
        """
        Update an operator user
        Update an operator user provided an object `id` or `username`, and an `_update` object containing the names and values, of columns to be updated.  Privileges required:  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserUpdateOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserUpdateOperatorUser body: (required)
        :return: OperatorUserUpdateOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserUpdateOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserUpdateOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserUpdateOperatorUser_with_http_info(self, body, **kwargs):
        """
        Update an operator user
        Update an operator user provided an object `id` or `username`, and an `_update` object containing the names and values, of columns to be updated.  Privileges required:  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserUpdateOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserUpdateOperatorUser body: (required)
        :return: OperatorUserUpdateOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserUpdateOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserUpdateOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/updateOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserUpdateOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
