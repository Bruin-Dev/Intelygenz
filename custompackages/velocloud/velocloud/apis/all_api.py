# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AllApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def configurationCloneAndConvertConfiguration(self, body, **kwargs):
        """
        Clone and convert a network based profile configuration to segment based profile configuration
        Clones an convert existing network configuration by configurationId. Accepts an enterpriseId or networkId to associate the new config with an enterprise or network. On success, returns an object the ID of the newly created configuration object.  Privileges required:  `CREATE` `ENTERPRISE_PROFILE`, or  `CREATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationCloneAndConvertConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCloneAndConvertConfiguration body: (required)
        :return: ConfigurationCloneAndConvertConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationCloneAndConvertConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationCloneAndConvertConfiguration_with_http_info(body, **kwargs)
            return data

    def configurationCloneAndConvertConfiguration_with_http_info(self, body, **kwargs):
        """
        Clone and convert a network based profile configuration to segment based profile configuration
        Clones an convert existing network configuration by configurationId. Accepts an enterpriseId or networkId to associate the new config with an enterprise or network. On success, returns an object the ID of the newly created configuration object.  Privileges required:  `CREATE` `ENTERPRISE_PROFILE`, or  `CREATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationCloneAndConvertConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCloneAndConvertConfiguration body: (required)
        :return: ConfigurationCloneAndConvertConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationCloneAndConvertConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationCloneAndConvertConfiguration`")


        collection_formats = {}

        resource_path = '/configuration/cloneAndConvertConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationCloneAndConvertConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationCloneConfiguration(self, body, **kwargs):
        """
        Clone configuration profile
        Clones the specified configuration (by `configurationId`) and all associated configuration modules. Accepts an `enterpriseId` or `networkId` to associate the new configuration with an enterprise or network. Select modules may also be specified. On success, returns the `id` of the newly created configuration object.  Privileges required:  `CREATE` `ENTERPRISE_PROFILE`, or  `CREATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationCloneConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCloneConfiguration body: (required)
        :return: ConfigurationCloneConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationCloneConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationCloneConfiguration_with_http_info(body, **kwargs)
            return data

    def configurationCloneConfiguration_with_http_info(self, body, **kwargs):
        """
        Clone configuration profile
        Clones the specified configuration (by `configurationId`) and all associated configuration modules. Accepts an `enterpriseId` or `networkId` to associate the new configuration with an enterprise or network. Select modules may also be specified. On success, returns the `id` of the newly created configuration object.  Privileges required:  `CREATE` `ENTERPRISE_PROFILE`, or  `CREATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationCloneConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCloneConfiguration body: (required)
        :return: ConfigurationCloneConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationCloneConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationCloneConfiguration`")


        collection_formats = {}

        resource_path = '/configuration/cloneConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationCloneConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationCloneEnterpriseTemplate(self, body, **kwargs):
        """
        Clone default enterprise configuration profile
        Creates a new enterprise configuration from the enterprise default configuration. On success, returns the `id` of the newly created configuration object.  Privileges required:  `CREATE` `ENTERPRISE_PROFILE`, or  `CREATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationCloneEnterpriseTemplate(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCloneEnterpriseTemplate body: (required)
        :return: ConfigurationCloneEnterpriseTemplateResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationCloneEnterpriseTemplate_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationCloneEnterpriseTemplate_with_http_info(body, **kwargs)
            return data

    def configurationCloneEnterpriseTemplate_with_http_info(self, body, **kwargs):
        """
        Clone default enterprise configuration profile
        Creates a new enterprise configuration from the enterprise default configuration. On success, returns the `id` of the newly created configuration object.  Privileges required:  `CREATE` `ENTERPRISE_PROFILE`, or  `CREATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationCloneEnterpriseTemplate_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCloneEnterpriseTemplate body: (required)
        :return: ConfigurationCloneEnterpriseTemplateResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationCloneEnterpriseTemplate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationCloneEnterpriseTemplate`")


        collection_formats = {}

        resource_path = '/configuration/cloneEnterpriseTemplate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationCloneEnterpriseTemplateResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationDeleteConfiguration(self, body, **kwargs):
        """
        Delete a configuration profile
        Delete an existing configuration profile. On success, returns an object indicating the number of rows deleted.  Privileges required:  `DELETE` `ENTERPRISE_PROFILE`, or  `DELETE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationDeleteConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationDeleteConfiguration body: (required)
        :return: ConfigurationDeleteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationDeleteConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationDeleteConfiguration_with_http_info(body, **kwargs)
            return data

    def configurationDeleteConfiguration_with_http_info(self, body, **kwargs):
        """
        Delete a configuration profile
        Delete an existing configuration profile. On success, returns an object indicating the number of rows deleted.  Privileges required:  `DELETE` `ENTERPRISE_PROFILE`, or  `DELETE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationDeleteConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationDeleteConfiguration body: (required)
        :return: ConfigurationDeleteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationDeleteConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationDeleteConfiguration`")


        collection_formats = {}

        resource_path = '/configuration/deleteConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationDeleteConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationGetConfiguration(self, body, **kwargs):
        """
        Get a configuration profile
        Get a configuration profile, optionally with module detail.  Privileges required:  `READ` `ENTERPRISE_PROFILE`, or  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationGetConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationGetConfiguration body: (required)
        :return: ConfigurationGetConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationGetConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationGetConfiguration_with_http_info(body, **kwargs)
            return data

    def configurationGetConfiguration_with_http_info(self, body, **kwargs):
        """
        Get a configuration profile
        Get a configuration profile, optionally with module detail.  Privileges required:  `READ` `ENTERPRISE_PROFILE`, or  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationGetConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationGetConfiguration body: (required)
        :return: ConfigurationGetConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationGetConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationGetConfiguration`")


        collection_formats = {}

        resource_path = '/configuration/getConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationGetConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationGetConfigurationModules(self, body, **kwargs):
        """
        List the modules that compose a configuration profile
        Retrieve a list of the configuration modules that compose the given configuration profile.  Privileges required:  `READ` `ENTERPRISE_PROFILE`, or  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationGetConfigurationModules(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationGetConfigurationModules body: (required)
        :return: list[ConfigurationGetConfigurationModulesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationGetConfigurationModules_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationGetConfigurationModules_with_http_info(body, **kwargs)
            return data

    def configurationGetConfigurationModules_with_http_info(self, body, **kwargs):
        """
        List the modules that compose a configuration profile
        Retrieve a list of the configuration modules that compose the given configuration profile.  Privileges required:  `READ` `ENTERPRISE_PROFILE`, or  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationGetConfigurationModules_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationGetConfigurationModules body: (required)
        :return: list[ConfigurationGetConfigurationModulesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationGetConfigurationModules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationGetConfigurationModules`")


        collection_formats = {}

        resource_path = '/configuration/getConfigurationModules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ConfigurationGetConfigurationModulesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationGetRoutableApplications(self, body, **kwargs):
        """
        Get first packet routable applications
        Gets all applications that are first packet routable. If called from an operator or MSP context, then `enterpriseId` is required. Optionally, specify `edgeId` to get the map for a specific Edge.  Privileges required:  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationGetRoutableApplications(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationGetRoutableApplications body: (required)
        :return: ConfigurationGetRoutableApplicationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationGetRoutableApplications_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationGetRoutableApplications_with_http_info(body, **kwargs)
            return data

    def configurationGetRoutableApplications_with_http_info(self, body, **kwargs):
        """
        Get first packet routable applications
        Gets all applications that are first packet routable. If called from an operator or MSP context, then `enterpriseId` is required. Optionally, specify `edgeId` to get the map for a specific Edge.  Privileges required:  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationGetRoutableApplications_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationGetRoutableApplications body: (required)
        :return: ConfigurationGetRoutableApplicationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationGetRoutableApplications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationGetRoutableApplications`")


        collection_formats = {}

        resource_path = '/configuration/getRoutableApplications'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationGetRoutableApplicationsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationInsertConfigurationModule(self, body, **kwargs):
        """
        Insert a new configuration module
        Insert a new configuration module into the given configuration profile.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`, or  `UPDATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationInsertConfigurationModule(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationInsertConfigurationModule body: (required)
        :return: ConfigurationInsertConfigurationModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationInsertConfigurationModule_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationInsertConfigurationModule_with_http_info(body, **kwargs)
            return data

    def configurationInsertConfigurationModule_with_http_info(self, body, **kwargs):
        """
        Insert a new configuration module
        Insert a new configuration module into the given configuration profile.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`, or  `UPDATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationInsertConfigurationModule_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationInsertConfigurationModule body: (required)
        :return: ConfigurationInsertConfigurationModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationInsertConfigurationModule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationInsertConfigurationModule`")


        collection_formats = {}

        resource_path = '/configuration/insertConfigurationModule'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationInsertConfigurationModuleResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configurationUpdateConfigurationModule(self, body, **kwargs):
        """
        Update a configuration module
        Update an existing configuration module with the data. module data contained in the _update object.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`, or  `UPDATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationUpdateConfigurationModule(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationUpdateConfigurationModule body: (required)
        :return: ConfigurationUpdateConfigurationModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configurationUpdateConfigurationModule_with_http_info(body, **kwargs)
        else:
            (data) = self.configurationUpdateConfigurationModule_with_http_info(body, **kwargs)
            return data

    def configurationUpdateConfigurationModule_with_http_info(self, body, **kwargs):
        """
        Update a configuration module
        Update an existing configuration module with the data. module data contained in the _update object.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`, or  `UPDATE` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurationUpdateConfigurationModule_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationUpdateConfigurationModule body: (required)
        :return: ConfigurationUpdateConfigurationModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurationUpdateConfigurationModule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configurationUpdateConfigurationModule`")


        collection_formats = {}

        resource_path = '/configuration/updateConfigurationModule'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationUpdateConfigurationModuleResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryConfigureActiveForReplication(self, body, **kwargs):
        """
        Designate a standby Orchestrator for disaster recovery replication
        Configure the current Orchestrator to be active and the specified Orchestrator to be standby for Orchestrator disaster recovery replication. Required attributes are 1) standbyList, a single-entry array containing the standbyAddress and standbyUuid, 2) drVCOUser, a Orchestrator super user available on both the active and standby VCOs, and 3) drVCOPassword, the password of drVCOUser on the standby Orchestrator (unless the autoConfigStandby option is specified as false). The call sets up the active Orchestrator to allow replication from the standby and then (unless autoConfigStandby is false) makes a transitionToStandby API call to the specified standby, expected to have been previously placed in STANDBY_CANDIDATE state via prepareForStandby.  After this call, the active and standby VCOs should be polled via getReplicationStatus until they  both reach STANDBY_RUNNING drState (or a configuration error is reported).  (Note: the drVCOPassword is not persisted.)  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryConfigureActiveForReplication(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryConfigureActiveForReplication body: (required)
        :return: DisasterRecoveryConfigureActiveForReplicationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryConfigureActiveForReplication_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryConfigureActiveForReplication_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryConfigureActiveForReplication_with_http_info(self, body, **kwargs):
        """
        Designate a standby Orchestrator for disaster recovery replication
        Configure the current Orchestrator to be active and the specified Orchestrator to be standby for Orchestrator disaster recovery replication. Required attributes are 1) standbyList, a single-entry array containing the standbyAddress and standbyUuid, 2) drVCOUser, a Orchestrator super user available on both the active and standby VCOs, and 3) drVCOPassword, the password of drVCOUser on the standby Orchestrator (unless the autoConfigStandby option is specified as false). The call sets up the active Orchestrator to allow replication from the standby and then (unless autoConfigStandby is false) makes a transitionToStandby API call to the specified standby, expected to have been previously placed in STANDBY_CANDIDATE state via prepareForStandby.  After this call, the active and standby VCOs should be polled via getReplicationStatus until they  both reach STANDBY_RUNNING drState (or a configuration error is reported).  (Note: the drVCOPassword is not persisted.)  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryConfigureActiveForReplication_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryConfigureActiveForReplication body: (required)
        :return: DisasterRecoveryConfigureActiveForReplicationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryConfigureActiveForReplication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryConfigureActiveForReplication`")


        collection_formats = {}

        resource_path = '/disasterRecovery/configureActiveForReplication'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryConfigureActiveForReplicationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryDemoteActive(self, body, **kwargs):
        """
        Demote current server from active to zombie
        No input parameters are required.  The active server is expected to be in the drState FAILURE_GET_STANDBY_STATUS or FAILURE_MYSQL_ACTIVE_STATUS, meaning that DR protection had been engaged (with the last successful replication status observed at lastDRProtectedTime) but that active failed a health check since that time.  If the active server is in the drState STANDBY_RUNNING, meaning that it has detected no problems in interacting with the standby server, the operator can force demotion of the active using the optional parameter force passed with value of true; in this case, the operator must ensure the standby server has already been successfully promoted.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryDemoteActive(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryDemoteActive body: (required)
        :return: DisasterRecoveryDemoteActiveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryDemoteActive_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryDemoteActive_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryDemoteActive_with_http_info(self, body, **kwargs):
        """
        Demote current server from active to zombie
        No input parameters are required.  The active server is expected to be in the drState FAILURE_GET_STANDBY_STATUS or FAILURE_MYSQL_ACTIVE_STATUS, meaning that DR protection had been engaged (with the last successful replication status observed at lastDRProtectedTime) but that active failed a health check since that time.  If the active server is in the drState STANDBY_RUNNING, meaning that it has detected no problems in interacting with the standby server, the operator can force demotion of the active using the optional parameter force passed with value of true; in this case, the operator must ensure the standby server has already been successfully promoted.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryDemoteActive_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryDemoteActive body: (required)
        :return: DisasterRecoveryDemoteActiveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryDemoteActive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryDemoteActive`")


        collection_formats = {}

        resource_path = '/disasterRecovery/demoteActive'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryDemoteActiveResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryGetReplicationBlob(self, body, **kwargs):
        """
        Get the blob needed to configure replication on the standby
        Get from the active Orchestrator the blob needed to configure replication on the standby. Only used when configureActiveForReplication was called with autoConfigStandby set to false [true by default].  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryGetReplicationBlob(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryGetReplicationBlob body: (required)
        :return: DisasterRecoveryGetReplicationBlobResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryGetReplicationBlob_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryGetReplicationBlob_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryGetReplicationBlob_with_http_info(self, body, **kwargs):
        """
        Get the blob needed to configure replication on the standby
        Get from the active Orchestrator the blob needed to configure replication on the standby. Only used when configureActiveForReplication was called with autoConfigStandby set to false [true by default].  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryGetReplicationBlob_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryGetReplicationBlob body: (required)
        :return: DisasterRecoveryGetReplicationBlobResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryGetReplicationBlob" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryGetReplicationBlob`")


        collection_formats = {}

        resource_path = '/disasterRecovery/getReplicationBlob'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryGetReplicationBlobResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryGetReplicationStatus(self, body, **kwargs):
        """
        Get disaster recovery status
        Get disaster recovery replication status, optionally with client contact, state transition history, and storage information.  No input parameters are required.  Can optionally specify 1 or more of the following with parameters: clientContact,clientCount,stateHistory,storageInfo.  Privileges required:  `READ` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryGetReplicationStatus(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryGetReplicationStatus body: (required)
        :return: DisasterRecoveryGetReplicationStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryGetReplicationStatus_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryGetReplicationStatus_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryGetReplicationStatus_with_http_info(self, body, **kwargs):
        """
        Get disaster recovery status
        Get disaster recovery replication status, optionally with client contact, state transition history, and storage information.  No input parameters are required.  Can optionally specify 1 or more of the following with parameters: clientContact,clientCount,stateHistory,storageInfo.  Privileges required:  `READ` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryGetReplicationStatus_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryGetReplicationStatus body: (required)
        :return: DisasterRecoveryGetReplicationStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryGetReplicationStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryGetReplicationStatus`")


        collection_formats = {}

        resource_path = '/disasterRecovery/getReplicationStatus'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryGetReplicationStatusResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryPrepareForStandby(self, body, **kwargs):
        """
        Prepare current Orchestrator to be configured as a standby system
        Transitions the current Orchestrator to a quiesced state, ready to be configured as a standby system. No input parameters are required.  After this call, the Orchestrator will be restarted in standby mode. The caller should subsequently poll `getReplicationStatus` until `drState` is `STANDBY_CANDIDATE`.  This is the first step in configuring Orchestrator disaster recovery.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryPrepareForStandby(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryPrepareForStandby body: (required)
        :return: DisasterRecoveryPrepareForStandbyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryPrepareForStandby_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryPrepareForStandby_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryPrepareForStandby_with_http_info(self, body, **kwargs):
        """
        Prepare current Orchestrator to be configured as a standby system
        Transitions the current Orchestrator to a quiesced state, ready to be configured as a standby system. No input parameters are required.  After this call, the Orchestrator will be restarted in standby mode. The caller should subsequently poll `getReplicationStatus` until `drState` is `STANDBY_CANDIDATE`.  This is the first step in configuring Orchestrator disaster recovery.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryPrepareForStandby_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryPrepareForStandby body: (required)
        :return: DisasterRecoveryPrepareForStandbyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryPrepareForStandby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryPrepareForStandby`")


        collection_formats = {}

        resource_path = '/disasterRecovery/prepareForStandby'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryPrepareForStandbyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryPromoteStandbyToActive(self, body, **kwargs):
        """
        Promote the current server to take over as the single standalone VCO
        The current server is expected to be a standby in the drState FAILURE_MYSQL_STANDBY_STATUS, meaning that DR protection had been engaged (with the last successful replication status observed at lastDRProtectedTime) but that standby has been unable to replicate since that time. If the standby server is in the drState STANDBY_RUNNING, meaning that it has detected no problems in replicating from the active server, the operator can force promotion of the standby using the optional parameter force passed with value of true; in this case, the standby server will call demoteActive/force on the active.  The operator should, if possible, ensure the formerly active server is demoted by running demoteServer directly on that server if the standby server was unable to do so successfully.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryPromoteStandbyToActive(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryPromoteStandbyToActive body: (required)
        :return: DisasterRecoveryPromoteStandbyToActiveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryPromoteStandbyToActive_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryPromoteStandbyToActive_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryPromoteStandbyToActive_with_http_info(self, body, **kwargs):
        """
        Promote the current server to take over as the single standalone VCO
        The current server is expected to be a standby in the drState FAILURE_MYSQL_STANDBY_STATUS, meaning that DR protection had been engaged (with the last successful replication status observed at lastDRProtectedTime) but that standby has been unable to replicate since that time. If the standby server is in the drState STANDBY_RUNNING, meaning that it has detected no problems in replicating from the active server, the operator can force promotion of the standby using the optional parameter force passed with value of true; in this case, the standby server will call demoteActive/force on the active.  The operator should, if possible, ensure the formerly active server is demoted by running demoteServer directly on that server if the standby server was unable to do so successfully.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryPromoteStandbyToActive_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryPromoteStandbyToActive body: (required)
        :return: DisasterRecoveryPromoteStandbyToActiveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryPromoteStandbyToActive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryPromoteStandbyToActive`")


        collection_formats = {}

        resource_path = '/disasterRecovery/promoteStandbyToActive'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryPromoteStandbyToActiveResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryRemoveStandby(self, body, **kwargs):
        """
        Unconfigure disaster recovery on the current server
        Unconfigure disaster recovery on the current server.  Also, make a best-effort call to removeStandby on the paired DR server. No input parameters are required.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryRemoveStandby(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryRemoveStandby body: (required)
        :return: DisasterRecoveryRemoveStandbyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryRemoveStandby_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryRemoveStandby_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryRemoveStandby_with_http_info(self, body, **kwargs):
        """
        Unconfigure disaster recovery on the current server
        Unconfigure disaster recovery on the current server.  Also, make a best-effort call to removeStandby on the paired DR server. No input parameters are required.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryRemoveStandby_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryRemoveStandby body: (required)
        :return: DisasterRecoveryRemoveStandbyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryRemoveStandby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryRemoveStandby`")


        collection_formats = {}

        resource_path = '/disasterRecovery/removeStandby'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryRemoveStandbyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def disasterRecoveryTransitionToStandby(self, body, **kwargs):
        """
        Configure current Orchestrator to transition to standby in disaster recovery active/standby pair.
        Configure current Orchestrator to transition to standby in disaster recovery active/standby pair. Requires parameter activeAccessFromStandby, which contains the data needed to configure standby. This data is produced by configureActiveForReplication, which by default, automatically calls transitionToStandby; an explicit call is only needed, with a blob obtained from getReplicationBlob, if configureActiveForReplication is called with autoConfigStandby set false.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryTransitionToStandby(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryTransitionToStandby body: (required)
        :return: DisasterRecoveryTransitionToStandbyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.disasterRecoveryTransitionToStandby_with_http_info(body, **kwargs)
        else:
            (data) = self.disasterRecoveryTransitionToStandby_with_http_info(body, **kwargs)
            return data

    def disasterRecoveryTransitionToStandby_with_http_info(self, body, **kwargs):
        """
        Configure current Orchestrator to transition to standby in disaster recovery active/standby pair.
        Configure current Orchestrator to transition to standby in disaster recovery active/standby pair. Requires parameter activeAccessFromStandby, which contains the data needed to configure standby. This data is produced by configureActiveForReplication, which by default, automatically calls transitionToStandby; an explicit call is only needed, with a blob obtained from getReplicationBlob, if configureActiveForReplication is called with autoConfigStandby set false.  Privileges required:  `CREATE` `REPLICATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.disasterRecoveryTransitionToStandby_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DisasterRecoveryTransitionToStandby body: (required)
        :return: DisasterRecoveryTransitionToStandbyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disasterRecoveryTransitionToStandby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disasterRecoveryTransitionToStandby`")


        collection_formats = {}

        resource_path = '/disasterRecovery/transitionToStandby'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DisasterRecoveryTransitionToStandbyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeDeleteEdge(self, body, **kwargs):
        """
        Delete an edge
        Delete an edge by id.  Privileges required:  `DELETE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeDeleteEdge(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeDeleteEdge body: (required)
        :return: list[EdgeDeleteEdgeResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeDeleteEdge_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeDeleteEdge_with_http_info(body, **kwargs)
            return data

    def edgeDeleteEdge_with_http_info(self, body, **kwargs):
        """
        Delete an edge
        Delete an edge by id.  Privileges required:  `DELETE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeDeleteEdge_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeDeleteEdge body: (required)
        :return: list[EdgeDeleteEdgeResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeDeleteEdge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeDeleteEdge`")


        collection_formats = {}

        resource_path = '/edge/deleteEdge'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EdgeDeleteEdgeResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeDeleteEdgeBgpNeighborRecords(self, body, **kwargs):
        """
        Delete edge BGP neighbor records
        Deletes BGP record(s) matching the given record keys (neighborIp) on the edges with the given IDs, if they exist.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeDeleteEdgeBgpNeighborRecords(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeDeleteEdgeBgpNeighborRecords body: (required)
        :return: EdgeDeleteEdgeBgpNeighborRecordsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeDeleteEdgeBgpNeighborRecords_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeDeleteEdgeBgpNeighborRecords_with_http_info(body, **kwargs)
            return data

    def edgeDeleteEdgeBgpNeighborRecords_with_http_info(self, body, **kwargs):
        """
        Delete edge BGP neighbor records
        Deletes BGP record(s) matching the given record keys (neighborIp) on the edges with the given IDs, if they exist.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeDeleteEdgeBgpNeighborRecords_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeDeleteEdgeBgpNeighborRecords body: (required)
        :return: EdgeDeleteEdgeBgpNeighborRecordsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeDeleteEdgeBgpNeighborRecords" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeDeleteEdgeBgpNeighborRecords`")


        collection_formats = {}

        resource_path = '/edge/deleteEdgeBgpNeighborRecords'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeDeleteEdgeBgpNeighborRecordsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeEdgeCancelReactivation(self, body, **kwargs):
        """
        Cancel a pending edge reactivation request
        Cancel a pending reactivation edge reactivation request.  Privileges required:  `CREATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeEdgeCancelReactivation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeEdgeCancelReactivation body: (required)
        :return: EdgeEdgeCancelReactivationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeEdgeCancelReactivation_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeEdgeCancelReactivation_with_http_info(body, **kwargs)
            return data

    def edgeEdgeCancelReactivation_with_http_info(self, body, **kwargs):
        """
        Cancel a pending edge reactivation request
        Cancel a pending reactivation edge reactivation request.  Privileges required:  `CREATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeEdgeCancelReactivation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeEdgeCancelReactivation body: (required)
        :return: EdgeEdgeCancelReactivationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeEdgeCancelReactivation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeEdgeCancelReactivation`")


        collection_formats = {}

        resource_path = '/edge/edgeCancelReactivation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeEdgeCancelReactivationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeEdgeProvision(self, body, **kwargs):
        """
        Provision an edge
        Provision an edge prior to activation.  Privileges required:  `CREATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeEdgeProvision(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeEdgeProvision body: (required)
        :return: EdgeEdgeProvisionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeEdgeProvision_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeEdgeProvision_with_http_info(body, **kwargs)
            return data

    def edgeEdgeProvision_with_http_info(self, body, **kwargs):
        """
        Provision an edge
        Provision an edge prior to activation.  Privileges required:  `CREATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeEdgeProvision_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeEdgeProvision body: (required)
        :return: EdgeEdgeProvisionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeEdgeProvision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeEdgeProvision`")


        collection_formats = {}

        resource_path = '/edge/edgeProvision'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeEdgeProvisionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeEdgeRequestReactivation(self, body, **kwargs):
        """
        Reactivate an edge
        Update activation state for an edge to REACTIVATION_PENDING.  Privileges required:  `CREATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeEdgeRequestReactivation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeEdgeRequestReactivation body: (required)
        :return: EdgeEdgeRequestReactivationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeEdgeRequestReactivation_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeEdgeRequestReactivation_with_http_info(body, **kwargs)
            return data

    def edgeEdgeRequestReactivation_with_http_info(self, body, **kwargs):
        """
        Reactivate an edge
        Update activation state for an edge to REACTIVATION_PENDING.  Privileges required:  `CREATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeEdgeRequestReactivation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeEdgeRequestReactivation body: (required)
        :return: EdgeEdgeRequestReactivationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeEdgeRequestReactivation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeEdgeRequestReactivation`")


        collection_formats = {}

        resource_path = '/edge/edgeRequestReactivation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeEdgeRequestReactivationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeGetClientVisibilityMode(self, body, **kwargs):
        """
        Get an edge's client visibility mode
        Retrieve an edge's client visibility mode.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeGetClientVisibilityMode(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeGetClientVisibilityMode body: (required)
        :return: EdgeGetClientVisibilityModeResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeGetClientVisibilityMode_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeGetClientVisibilityMode_with_http_info(body, **kwargs)
            return data

    def edgeGetClientVisibilityMode_with_http_info(self, body, **kwargs):
        """
        Get an edge's client visibility mode
        Retrieve an edge's client visibility mode.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeGetClientVisibilityMode_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeGetClientVisibilityMode body: (required)
        :return: EdgeGetClientVisibilityModeResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeGetClientVisibilityMode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeGetClientVisibilityMode`")


        collection_formats = {}

        resource_path = '/edge/getClientVisibilityMode'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeGetClientVisibilityModeResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeGetEdge(self, body, **kwargs):
        """
        Get edge
        Gets the specified Edge with optional link, site, configuration, certificate, or enterprise details. Supports queries by Edge `id`, `deviceId`, `activationKey`, and `logicalId`.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeGetEdge(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeGetEdge body: (required)
        :return: EdgeGetEdgeResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeGetEdge_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeGetEdge_with_http_info(body, **kwargs)
            return data

    def edgeGetEdge_with_http_info(self, body, **kwargs):
        """
        Get edge
        Gets the specified Edge with optional link, site, configuration, certificate, or enterprise details. Supports queries by Edge `id`, `deviceId`, `activationKey`, and `logicalId`.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeGetEdge_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeGetEdge body: (required)
        :return: EdgeGetEdgeResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeGetEdge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeGetEdge`")


        collection_formats = {}

        resource_path = '/edge/getEdge'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeGetEdgeResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeGetEdgeConfigurationStack(self, body, **kwargs):
        """
        Get an edge's configuration stack
        Retrieve an edge's complete configuration profile, with all modules included.  Privileges required:  `READ` `EDGE`  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeGetEdgeConfigurationStack(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeGetEdgeConfigurationStack body: (required)
        :return: list[EdgeGetEdgeConfigurationStackResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeGetEdgeConfigurationStack_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeGetEdgeConfigurationStack_with_http_info(body, **kwargs)
            return data

    def edgeGetEdgeConfigurationStack_with_http_info(self, body, **kwargs):
        """
        Get an edge's configuration stack
        Retrieve an edge's complete configuration profile, with all modules included.  Privileges required:  `READ` `EDGE`  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeGetEdgeConfigurationStack_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeGetEdgeConfigurationStack body: (required)
        :return: list[EdgeGetEdgeConfigurationStackResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeGetEdgeConfigurationStack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeGetEdgeConfigurationStack`")


        collection_formats = {}

        resource_path = '/edge/getEdgeConfigurationStack'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EdgeGetEdgeConfigurationStackResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeSetEdgeEnterpriseConfiguration(self, body, **kwargs):
        """
        Apply an enterprise configuration to an Edge
        Sets the enterprise configuration for the specified Edge (by `edgeId`).  Privileges required:  `UPDATE` `EDGE`  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeSetEdgeEnterpriseConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeSetEdgeEnterpriseConfiguration body: (required)
        :return: EdgeSetEdgeEnterpriseConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeSetEdgeEnterpriseConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeSetEdgeEnterpriseConfiguration_with_http_info(body, **kwargs)
            return data

    def edgeSetEdgeEnterpriseConfiguration_with_http_info(self, body, **kwargs):
        """
        Apply an enterprise configuration to an Edge
        Sets the enterprise configuration for the specified Edge (by `edgeId`).  Privileges required:  `UPDATE` `EDGE`  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeSetEdgeEnterpriseConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeSetEdgeEnterpriseConfiguration body: (required)
        :return: EdgeSetEdgeEnterpriseConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeSetEdgeEnterpriseConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeSetEdgeEnterpriseConfiguration`")


        collection_formats = {}

        resource_path = '/edge/setEdgeEnterpriseConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeSetEdgeEnterpriseConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeSetEdgeHandOffGateways(self, body, **kwargs):
        """
        Set an edge's on-premise hand off gateways
        Set an edge's on-premise hand off gateways. A primary and secondary gateway are defined, primary is required, secondary is optional. All existing edge-gateway hand off relationships are moved and are replaced by the the specified primary and secondary gateways.  Privileges required:  `UPDATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeSetEdgeHandOffGateways(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeSetEdgeHandOffGateways body: (required)
        :return: EdgeSetEdgeHandOffGatewaysResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeSetEdgeHandOffGateways_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeSetEdgeHandOffGateways_with_http_info(body, **kwargs)
            return data

    def edgeSetEdgeHandOffGateways_with_http_info(self, body, **kwargs):
        """
        Set an edge's on-premise hand off gateways
        Set an edge's on-premise hand off gateways. A primary and secondary gateway are defined, primary is required, secondary is optional. All existing edge-gateway hand off relationships are moved and are replaced by the the specified primary and secondary gateways.  Privileges required:  `UPDATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeSetEdgeHandOffGateways_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeSetEdgeHandOffGateways body: (required)
        :return: EdgeSetEdgeHandOffGatewaysResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeSetEdgeHandOffGateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeSetEdgeHandOffGateways`")


        collection_formats = {}

        resource_path = '/edge/setEdgeHandOffGateways'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeSetEdgeHandOffGatewaysResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeSetEdgeOperatorConfiguration(self, body, **kwargs):
        """
        Apply an operator configuration to an Edge
        Set an Edge's operator configuration. This overrides any enterprise-assigned operator configuration and the network default operator configuration.  Privileges required:  `UPDATE` `EDGE`  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeSetEdgeOperatorConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeSetEdgeOperatorConfiguration body: (required)
        :return: EdgeSetEdgeOperatorConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeSetEdgeOperatorConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeSetEdgeOperatorConfiguration_with_http_info(body, **kwargs)
            return data

    def edgeSetEdgeOperatorConfiguration_with_http_info(self, body, **kwargs):
        """
        Apply an operator configuration to an Edge
        Set an Edge's operator configuration. This overrides any enterprise-assigned operator configuration and the network default operator configuration.  Privileges required:  `UPDATE` `EDGE`  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeSetEdgeOperatorConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeSetEdgeOperatorConfiguration body: (required)
        :return: EdgeSetEdgeOperatorConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeSetEdgeOperatorConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeSetEdgeOperatorConfiguration`")


        collection_formats = {}

        resource_path = '/edge/setEdgeOperatorConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeSetEdgeOperatorConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeUpdateEdgeAdminPassword(self, body, **kwargs):
        """
        Update edge's local UI authentication credentials
        Request an update to the edge's local UI authentication credentials. On success, returns a JSON object with the ID of the action queued, status for which can be queried using the edgeAction/getEdgeAction API  Privileges required:  `UPDATE` `EDGE`  `UPDATE` `ENTERPRISE_KEYS`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeUpdateEdgeAdminPassword(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeUpdateEdgeAdminPassword body: (required)
        :return: EdgeUpdateEdgeAdminPasswordResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeUpdateEdgeAdminPassword_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeUpdateEdgeAdminPassword_with_http_info(body, **kwargs)
            return data

    def edgeUpdateEdgeAdminPassword_with_http_info(self, body, **kwargs):
        """
        Update edge's local UI authentication credentials
        Request an update to the edge's local UI authentication credentials. On success, returns a JSON object with the ID of the action queued, status for which can be queried using the edgeAction/getEdgeAction API  Privileges required:  `UPDATE` `EDGE`  `UPDATE` `ENTERPRISE_KEYS`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeUpdateEdgeAdminPassword_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeUpdateEdgeAdminPassword body: (required)
        :return: EdgeUpdateEdgeAdminPasswordResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeUpdateEdgeAdminPassword" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeUpdateEdgeAdminPassword`")


        collection_formats = {}

        resource_path = '/edge/updateEdgeAdminPassword'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeUpdateEdgeAdminPasswordResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeUpdateEdgeAttributes(self, body, **kwargs):
        """
        Update edge attributes
        Update basic edge attributes, including edge name, description, site information, or serial number.  Privileges required:  `UPDATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeUpdateEdgeAttributes(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeUpdateEdgeAttributes body: (required)
        :return: EdgeUpdateEdgeAttributesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeUpdateEdgeAttributes_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeUpdateEdgeAttributes_with_http_info(body, **kwargs)
            return data

    def edgeUpdateEdgeAttributes_with_http_info(self, body, **kwargs):
        """
        Update edge attributes
        Update basic edge attributes, including edge name, description, site information, or serial number.  Privileges required:  `UPDATE` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeUpdateEdgeAttributes_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeUpdateEdgeAttributes body: (required)
        :return: EdgeUpdateEdgeAttributesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeUpdateEdgeAttributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeUpdateEdgeAttributes`")


        collection_formats = {}

        resource_path = '/edge/updateEdgeAttributes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeUpdateEdgeAttributesResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edgeUpdateEdgeCredentialsByConfiguration(self, body, **kwargs):
        """
        Update edge UI credentials by configuration id
        Request an update to the edge-local UI authentication credentials for all edges belonging to a configuration profile. On success, returns a JSON object containing a list of each of the action IDs queued.  Privileges required:  `UPDATE` `EDGE`  `UPDATE` `ENTERPRISE_KEYS`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeUpdateEdgeCredentialsByConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeUpdateEdgeCredentialsByConfiguration body: (required)
        :return: EdgeUpdateEdgeCredentialsByConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edgeUpdateEdgeCredentialsByConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.edgeUpdateEdgeCredentialsByConfiguration_with_http_info(body, **kwargs)
            return data

    def edgeUpdateEdgeCredentialsByConfiguration_with_http_info(self, body, **kwargs):
        """
        Update edge UI credentials by configuration id
        Request an update to the edge-local UI authentication credentials for all edges belonging to a configuration profile. On success, returns a JSON object containing a list of each of the action IDs queued.  Privileges required:  `UPDATE` `EDGE`  `UPDATE` `ENTERPRISE_KEYS`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edgeUpdateEdgeCredentialsByConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EdgeUpdateEdgeCredentialsByConfiguration body: (required)
        :return: EdgeUpdateEdgeCredentialsByConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edgeUpdateEdgeCredentialsByConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edgeUpdateEdgeCredentialsByConfiguration`")


        collection_formats = {}

        resource_path = '/edge/updateEdgeCredentialsByConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EdgeUpdateEdgeCredentialsByConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterprise(self, body, **kwargs):
        """
        Delete an enterprise
        Delete the enterprise specified by the given id parameter. enterpriseId is also a valid alias for id.  Privileges required:  `DELETE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterprise body: (required)
        :return: EnterpriseDeleteEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterprise_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise
        Delete the enterprise specified by the given id parameter. enterpriseId is also a valid alias for id.  Privileges required:  `DELETE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterprise body: (required)
        :return: EnterpriseDeleteEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterpriseGatewayRecords(self, body, **kwargs):
        """
        Delete enterprise gateway record(s)
        Delete the enterprise gateway record(s) matching the given gateway id(s) and neighbor IP addresses.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseGatewayRecords(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseGatewayRecords body: (required)
        :return: EnterpriseDeleteEnterpriseGatewayRecordsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterpriseGatewayRecords_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterpriseGatewayRecords_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterpriseGatewayRecords_with_http_info(self, body, **kwargs):
        """
        Delete enterprise gateway record(s)
        Delete the enterprise gateway record(s) matching the given gateway id(s) and neighbor IP addresses.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseGatewayRecords_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseGatewayRecords body: (required)
        :return: EnterpriseDeleteEnterpriseGatewayRecordsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterpriseGatewayRecords" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterpriseGatewayRecords`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterpriseGatewayRecords'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseGatewayRecordsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Delete an enterprise network allocation
        Delete an enterprise network allocation, by id.  Privileges required:  `DELETE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseDeleteEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise network allocation
        Delete an enterprise network allocation, by id.  Privileges required:  `DELETE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseDeleteEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseDeleteEnterpriseService(self, body, **kwargs):
        """
        Delete an enterprise service
        Delete an enterprise service, by id.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseService(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseService body: (required)
        :return: EnterpriseDeleteEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseDeleteEnterpriseService_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseDeleteEnterpriseService_with_http_info(body, **kwargs)
            return data

    def enterpriseDeleteEnterpriseService_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise service
        Delete an enterprise service, by id.  Privileges required:  `DELETE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseDeleteEnterpriseService_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseDeleteEnterpriseService body: (required)
        :return: EnterpriseDeleteEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseDeleteEnterpriseService" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseDeleteEnterpriseService`")


        collection_formats = {}

        resource_path = '/enterprise/deleteEnterpriseService'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseDeleteEnterpriseServiceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterprise(self, body, **kwargs):
        """
        Get enterprise
        Retrieve enterprise data, with optional proxy (partner) detail.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterprise body: (required)
        :return: EnterpriseGetEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterprise_with_http_info(self, body, **kwargs):
        """
        Get enterprise
        Retrieve enterprise data, with optional proxy (partner) detail.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterprise body: (required)
        :return: EnterpriseGetEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAddresses(self, body, **kwargs):
        """
        Get enterprise IP address information
        Retrieve the public IP address information for the management and control entities associated with this enterprise, including Orchestrator(s), Gateway(s), and datacenter(s).  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAddresses(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAddresses body: (required)
        :return: list[EnterpriseGetEnterpriseAddressesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAddresses_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAddresses_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAddresses_with_http_info(self, body, **kwargs):
        """
        Get enterprise IP address information
        Retrieve the public IP address information for the management and control entities associated with this enterprise, including Orchestrator(s), Gateway(s), and datacenter(s).  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAddresses_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAddresses body: (required)
        :return: list[EnterpriseGetEnterpriseAddressesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAddresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAddresses`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAddresses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseAddressesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAlertConfigurations(self, body, **kwargs):
        """
        Get the enterprise alert configuration
        Get the alert configurations associated with an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlertConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlertConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseAlertConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAlertConfigurations_with_http_info(self, body, **kwargs):
        """
        Get the enterprise alert configuration
        Get the alert configurations associated with an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlertConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlertConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseAlertConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAlertConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAlertConfigurations`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAlertConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseAlertConfigurationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAlerts(self, body, **kwargs):
        """
        Get triggered enterprise alerts
        Gets past triggered alerts for the specified enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlerts(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlerts body: (required)
        :return: EnterpriseGetEnterpriseAlertsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAlerts_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAlerts_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAlerts_with_http_info(self, body, **kwargs):
        """
        Get triggered enterprise alerts
        Gets past triggered alerts for the specified enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAlerts_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAlerts body: (required)
        :return: EnterpriseGetEnterpriseAlertsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAlerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAlerts`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAlerts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseAlertsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseAllAlertRecipients(self, body, **kwargs):
        """
        List recipients currently receiving ALL enterprise alerts
        List the recipients currently configured to receive all alerts for an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAllAlertRecipients(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseGetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseAllAlertRecipients_with_http_info(self, body, **kwargs):
        """
        List recipients currently receiving ALL enterprise alerts
        List the recipients currently configured to receive all alerts for an enterprise.  Privileges required:  `READ` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseAllAlertRecipients_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseGetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseAllAlertRecipients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseAllAlertRecipients`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseAllAlertsRecipients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseAllAlertRecipientsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseCapabilities(self, body, **kwargs):
        """
        Get enterprise capabilities
        Retrieve a list of the enterprise capabilities currently enabled/disabled on an enterprise (e.g. BGP, COS mapping, PKI, etc.)  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseCapabilities(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseCapabilities body: (required)
        :return: EnterpriseGetEnterpriseCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseCapabilities_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseCapabilities_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseCapabilities_with_http_info(self, body, **kwargs):
        """
        Get enterprise capabilities
        Retrieve a list of the enterprise capabilities currently enabled/disabled on an enterprise (e.g. BGP, COS mapping, PKI, etc.)  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseCapabilities_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseCapabilities body: (required)
        :return: EnterpriseGetEnterpriseCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseCapabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseCapabilities`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseCapabilities'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseCapabilitiesResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseConfigurations(self, body, **kwargs):
        """
        Get enterprise configuration profiles
        Retrieve a list of configuration profiles existing on an enterprise, with optional edge and/or module detail.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseConfigurations_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseConfigurations_with_http_info(self, body, **kwargs):
        """
        Get enterprise configuration profiles
        Retrieve a list of configuration profiles existing on an enterprise, with optional edge and/or module detail.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseConfigurations body: (required)
        :return: list[EnterpriseGetEnterpriseConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseConfigurations`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseConfigurationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseEdges(self, body, **kwargs):
        """
        Get edges associated with an enterprise
        Gets all Edges associated with the specified enterprise, including optional site, link, and configuration details.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseEdges(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseEdges body: (required)
        :return: list[EnterpriseGetEnterpriseEdgesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseEdges_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseEdges_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseEdges_with_http_info(self, body, **kwargs):
        """
        Get edges associated with an enterprise
        Gets all Edges associated with the specified enterprise, including optional site, link, and configuration details.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseEdges_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseEdges body: (required)
        :return: list[EnterpriseGetEnterpriseEdgesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseEdges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseEdges`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseEdges'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseEdgesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseGatewayHandoff(self, body, **kwargs):
        """
        Get enterprise gateway handoff configuration
        Get enterprise gateway handoff configuration.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseGatewayHandoff(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseGetEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseGatewayHandoff_with_http_info(self, body, **kwargs):
        """
        Get enterprise gateway handoff configuration
        Get enterprise gateway handoff configuration.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseGatewayHandoff_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseGetEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseGatewayHandoff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseGatewayHandoff`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseGatewayHandoff'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseGatewayHandoffResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Get an enterprise network allocation
        Retrieve a network allocation object by id.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseGetEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Get an enterprise network allocation
        Retrieve a network allocation object by id.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseGetEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseNetworkAllocations(self, body, **kwargs):
        """
        Get all network allocation objects defined on an enterprise
        Retrieve a list of all of the network allocations defined onthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocations body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkAllocationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseNetworkAllocations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseNetworkAllocations_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseNetworkAllocations_with_http_info(self, body, **kwargs):
        """
        Get all network allocation objects defined on an enterprise
        Retrieve a list of all of the network allocations defined onthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkAllocations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkAllocations body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkAllocationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseNetworkAllocations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseNetworkAllocations`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseNetworkAllocations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseNetworkAllocationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseNetworkSegments(self, body, **kwargs):
        """
        Get all network segment objects defined on an enterprise
        Retrieve a list of all of the network segments defined forthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkSegments(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkSegments body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkSegmentsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseNetworkSegments_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseNetworkSegments_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseNetworkSegments_with_http_info(self, body, **kwargs):
        """
        Get all network segment objects defined on an enterprise
        Retrieve a list of all of the network segments defined forthe given enterprise.  Privileges required:  `READ` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseNetworkSegments_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseNetworkSegments body: (required)
        :return: list[EnterpriseGetEnterpriseNetworkSegmentsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseNetworkSegments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseNetworkSegments`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseNetworkSegments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseNetworkSegmentsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseProperty(self, body, **kwargs):
        """
        Get enterprise property
        Get a enterprise property by object id or other attribute.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseProperty body: (required)
        :return: EnterpriseGetEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseProperty_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseProperty_with_http_info(self, body, **kwargs):
        """
        Get enterprise property
        Get a enterprise property by object id or other attribute.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseProperty body: (required)
        :return: EnterpriseGetEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseProperty`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterprisePropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseRouteConfiguration(self, body, **kwargs):
        """
        Get route advertisement and routing preferences policy
        Get enterprise route advertisement, routing peferences and OSPF, BGP advertisement policy as configured in the Overlay Flow Control table.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseGetEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseRouteConfiguration_with_http_info(self, body, **kwargs):
        """
        Get route advertisement and routing preferences policy
        Get enterprise route advertisement, routing peferences and OSPF, BGP advertisement policy as configured in the Overlay Flow Control table.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseGetEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseRouteConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseRouteConfiguration`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseRouteConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseRouteConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseRouteTable(self, body, **kwargs):
        """
        Get the enterprise route table
        Get composite enterprise route table, optionally scoped by profile(s). The returned routes include static routes, directly connected routes and learned routes.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteTable(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteTable body: (required)
        :return: EnterpriseGetEnterpriseRouteTableResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseRouteTable_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseRouteTable_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseRouteTable_with_http_info(self, body, **kwargs):
        """
        Get the enterprise route table
        Get composite enterprise route table, optionally scoped by profile(s). The returned routes include static routes, directly connected routes and learned routes.  Privileges required:  `READ` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseRouteTable_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseRouteTable body: (required)
        :return: EnterpriseGetEnterpriseRouteTableResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseRouteTable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseRouteTable`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseRouteTable'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseGetEnterpriseRouteTableResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseServices(self, body, **kwargs):
        """
        Get enterprise network service detail
        Get the network service JSON objects defined for an enterprise.  Privileges required:  `READ` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseServices(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseServices body: (required)
        :return: list[EnterpriseGetEnterpriseServicesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseServices_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseServices_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseServices_with_http_info(self, body, **kwargs):
        """
        Get enterprise network service detail
        Get the network service JSON objects defined for an enterprise.  Privileges required:  `READ` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseServices_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseServices body: (required)
        :return: list[EnterpriseGetEnterpriseServicesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseServices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseServices`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseServices'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseServicesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseGetEnterpriseUsers(self, body, **kwargs):
        """
        Get list of enterprise users by enterprise id
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseUsers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseUsers body: (required)
        :return: list[EnterpriseGetEnterpriseUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseGetEnterpriseUsers_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseGetEnterpriseUsers_with_http_info(body, **kwargs)
            return data

    def enterpriseGetEnterpriseUsers_with_http_info(self, body, **kwargs):
        """
        Get list of enterprise users by enterprise id
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseGetEnterpriseUsers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseGetEnterpriseUsers body: (required)
        :return: list[EnterpriseGetEnterpriseUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseGetEnterpriseUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseGetEnterpriseUsers`")


        collection_formats = {}

        resource_path = '/enterprise/getEnterpriseUsers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseGetEnterpriseUsersResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterprise(self, body, **kwargs):
        """
        Create enterprise
        Creates a new enterprise, which is owned by the operator.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterprise body: (required)
        :return: EnterpriseInsertEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterprise_with_http_info(self, body, **kwargs):
        """
        Create enterprise
        Creates a new enterprise, which is owned by the operator.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterprise body: (required)
        :return: EnterpriseInsertEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Insert an enterprise network allocation
        Insert a new enterprise network allocation.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseInsertEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Insert an enterprise network allocation
        Insert a new enterprise network allocation.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseInsertEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseNetworkSegment(self, body, **kwargs):
        """
        Insert an enterprise network segment
        Insert a new enterprise network segment.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkSegment(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment body: (required)
        :return: EnterpriseInsertEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseNetworkSegment_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseNetworkSegment_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseNetworkSegment_with_http_info(self, body, **kwargs):
        """
        Insert an enterprise network segment
        Insert a new enterprise network segment.  Privileges required:  `CREATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseNetworkSegment_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment body: (required)
        :return: EnterpriseInsertEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseNetworkSegment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseNetworkSegment`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseNetworkSegment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseNetworkSegmentResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseService(self, body, **kwargs):
        """
        Insert a new enterprise service
        Insert a new enterprise service.  Privileges required:  `CREATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseService(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseService body: (required)
        :return: EnterpriseInsertEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseService_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseService_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseService_with_http_info(self, body, **kwargs):
        """
        Insert a new enterprise service
        Insert a new enterprise service.  Privileges required:  `CREATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseService_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseService body: (required)
        :return: EnterpriseInsertEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseService" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseService`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseService'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseServiceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertEnterpriseUser(self, body, **kwargs):
        """
        Insert an enterprise user
        Insert an enterprise user.  Privileges required:  `CREATE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseUser body: (required)
        :return: EnterpriseInsertEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Insert an enterprise user
        Insert an enterprise user.  Privileges required:  `CREATE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseUser body: (required)
        :return: EnterpriseInsertEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterprise/insertEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseAlertConfigurations(self, body, **kwargs):
        """
        Insert, update, or delete enterprise alert configurations
        Insert, update, or delete enterprise alert configurations. Returns the array of alert configurations submitted, with ids added for the entries that have been successfully inserted. If an entry is not successfully inserted or updated, an `error` property is included in the .  Privileges required:  `CREATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseAlertConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseAlertConfigurations body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseAlertConfigurationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(self, body, **kwargs):
        """
        Insert, update, or delete enterprise alert configurations
        Insert, update, or delete enterprise alert configurations. Returns the array of alert configurations submitted, with ids added for the entries that have been successfully inserted. If an entry is not successfully inserted or updated, an `error` property is included in the .  Privileges required:  `CREATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseAlertConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseAlertConfigurations body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseAlertConfigurationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseAlertConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseAlertConfigurations`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseAlertConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterpriseAlertConfigurationsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseCapability(self, body, **kwargs):
        """
        Insert or update an enterprise capability
        Insert or update an enterprise capability.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseCapability(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseCapability body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseCapabilityResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(self, body, **kwargs):
        """
        Insert or update an enterprise capability
        Insert or update an enterprise capability.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseCapability_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseCapability body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseCapabilityResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseCapability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseCapability`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseCapability'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterpriseCapabilityResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseGatewayHandoff(self, body, **kwargs):
        """
        Insert or update an enterprise gateway handoff configuration
        Insert or update an enterprise gateway handoff configuration.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseGatewayHandoff(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(self, body, **kwargs):
        """
        Insert or update an enterprise gateway handoff configuration
        Insert or update an enterprise gateway handoff configuration.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseGatewayHandoff_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseGatewayHandoff body: (required)
        :return: EnterpriseInsertOrUpdateEnterpriseGatewayHandoffResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseGatewayHandoff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseGatewayHandoff`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseGatewayHandoff'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterpriseGatewayHandoffResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseInsertOrUpdateEnterpriseProperty(self, body, **kwargs):
        """
        Insert or update an enterprise property
        Insert a enterprise property. If property with the given name already exists, the property will be updated.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseProperty body: (required)
        :return: EnterpriseInsertOrUpdateEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(body, **kwargs)
            return data

    def enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(self, body, **kwargs):
        """
        Insert or update an enterprise property
        Insert a enterprise property. If property with the given name already exists, the property will be updated.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseInsertOrUpdateEnterpriseProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertOrUpdateEnterpriseProperty body: (required)
        :return: EnterpriseInsertOrUpdateEnterprisePropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseInsertOrUpdateEnterpriseProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseInsertOrUpdateEnterpriseProperty`")


        collection_formats = {}

        resource_path = '/enterprise/insertOrUpdateEnterpriseProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseInsertOrUpdateEnterprisePropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyDeleteEnterpriseProxyUser(self, body, **kwargs):
        """
        Delete an enterprise proxy admin user
        Delete an enterprise proxy user by id or username. Note that `enterpriseProxyId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyDeleteEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyDeleteEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyDeleteEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise proxy admin user
        Delete an enterprise proxy user by id or username. Note that `enterpriseProxyId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyDeleteEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyDeleteEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyDeleteEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyDeleteEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyDeleteEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/deleteEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyDeleteEnterpriseProxyUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyEdgeInventory(self, body, **kwargs):
        """
        Get a list of all partner enterprises and edge inventory associated with each enterprise
        Get  partner enterprises and their edge inventory.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEdgeInventory(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEdgeInventory body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEdgeInventoryResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(self, body, **kwargs):
        """
        Get a list of all partner enterprises and edge inventory associated with each enterprise
        Get  partner enterprises and their edge inventory.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEdgeInventory body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEdgeInventoryResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyEdgeInventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyEdgeInventory`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyEdgeInventory'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyEdgeInventoryResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyEnterprises(self, body, **kwargs):
        """
        Get a list of all partner enterprises
        Get all partner enterprises, optionally including all edges or edge counts.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEnterprises(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEnterprises body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEnterprisesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(self, body, **kwargs):
        """
        Get a list of all partner enterprises
        Get all partner enterprises, optionally including all edges or edge counts.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEnterprises body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEnterprisesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyEnterprises" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyEnterprises`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyEnterprises'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyEnterprisesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyGatewayPools(self, body, **kwargs):
        """
        Get list of gateway pools
        Get list of gateway pools associated with an enterprise proxy, optionally with lists of gateways or enterprises belonging to each pool.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyGatewayPools(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyGatewayPools body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(self, body, **kwargs):
        """
        Get list of gateway pools
        Get list of gateway pools associated with an enterprise proxy, optionally with lists of gateways or enterprises belonging to each pool.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyGatewayPools body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyGatewayPools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyGatewayPools`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyGatewayPools'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyOperatorProfiles(self, body, **kwargs):
        """
        Get the operator profiles associated with a partner
        Get the operator profiles associated with a proxy (MSP), as assigned by the operator.  Privileges required:  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyOperatorProfiles(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyOperatorProfiles body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyOperatorProfilesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(self, body, **kwargs):
        """
        Get the operator profiles associated with a partner
        Get the operator profiles associated with a proxy (MSP), as assigned by the operator.  Privileges required:  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyOperatorProfiles body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyOperatorProfilesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyOperatorProfiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyOperatorProfiles`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyOperatorProfiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyOperatorProfilesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyUser(self, body, **kwargs):
        """
        Get an enterprise proxy user
        Get an enterprise proxy user by id or username.  Privileges required:  `READ` `PROXY_USER`  `READ` `PROXY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyGetEnterpriseProxyUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Get an enterprise proxy user
        Get an enterprise proxy user by id or username.  Privileges required:  `READ` `PROXY_USER`  `READ` `PROXY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyGetEnterpriseProxyUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyGetEnterpriseProxyUser',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyUsers(self, body, **kwargs):
        """
        Get all enterprise proxy admin users
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUsers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUsers body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyUsers_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyUsers_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyUsers_with_http_info(self, body, **kwargs):
        """
        Get all enterprise proxy admin users
        undefined  Privileges required:  `READ` `ENTERPRISE`  `READ` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyUsers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyUsers body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyUsers`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyUsers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyUsersResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyInsertEnterpriseProxyEnterprise(self, body, **kwargs):
        """
        Insert a new enterprise owned by an MSP
        Insert an enterprise owned by an MSP. Whereas the `insertEnterprise` method will create an enterprise in the global or network context with no MSP association, this method will create one owned by an MSP, as determined by the credentials of the caller.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyInsertEnterpriseProxyEnterprise body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(self, body, **kwargs):
        """
        Insert a new enterprise owned by an MSP
        Insert an enterprise owned by an MSP. Whereas the `insertEnterprise` method will create an enterprise in the global or network context with no MSP association, this method will create one owned by an MSP, as determined by the credentials of the caller.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyInsertEnterpriseProxyEnterprise body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyInsertEnterpriseProxyEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyInsertEnterpriseProxyEnterprise`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/insertEnterpriseProxyEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyInsertEnterpriseProxyEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyInsertEnterpriseProxyUser(self, body, **kwargs):
        """
        Create a new partner admin user
        Create a new partner admin user  Privileges required:  `CREATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyInsertEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyInsertEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyInsertEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Create a new partner admin user
        Create a new partner admin user  Privileges required:  `CREATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NewEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyInsertEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyInsertEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/insertEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyInsertEnterpriseProxyUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyUpdateEnterpriseProxyUser(self, body, **kwargs):
        """
        Update an enterprise proxy admin user
        Update an enterprise proxy admin user  Privileges required:  `UPDATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyUpdateEnterpriseProxyUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyUpdateEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyUpdateEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(self, body, **kwargs):
        """
        Update an enterprise proxy admin user
        Update an enterprise proxy admin user  Privileges required:  `UPDATE` `PROXY_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyUpdateEnterpriseProxyUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyUpdateEnterpriseProxyUser body: (required)
        :return: EnterpriseProxyUpdateEnterpriseProxyUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyUpdateEnterpriseProxyUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyUpdateEnterpriseProxyUser`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/updateEnterpriseProxyUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyUpdateEnterpriseProxyUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseSetEnterpriseAllAlertRecipients(self, body, **kwargs):
        """
        Set the recipients who should receive all alerts for an enterprise
        Set the recipients who should receive all alerts for an enterprise.  Privileges required:  `UPDATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseSetEnterpriseAllAlertRecipients(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseSetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseSetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseSetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseSetEnterpriseAllAlertRecipients_with_http_info(body, **kwargs)
            return data

    def enterpriseSetEnterpriseAllAlertRecipients_with_http_info(self, body, **kwargs):
        """
        Set the recipients who should receive all alerts for an enterprise
        Set the recipients who should receive all alerts for an enterprise.  Privileges required:  `UPDATE` `ENTERPRISE_ALERT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseSetEnterpriseAllAlertRecipients_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseSetEnterpriseAllAlertRecipients body: (required)
        :return: EnterpriseSetEnterpriseAllAlertRecipientsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseSetEnterpriseAllAlertRecipients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseSetEnterpriseAllAlertRecipients`")


        collection_formats = {}

        resource_path = '/enterprise/setEnterpriseAllAlertsRecipients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseSetEnterpriseAllAlertRecipientsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterprise(self, body, **kwargs):
        """
        Update an enterprise
        Update an enterprise provided an object id or name, and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterprise body: (required)
        :return: EnterpriseUpdateEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterprise_with_http_info(self, body, **kwargs):
        """
        Update an enterprise
        Update an enterprise provided an object id or name, and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterprise body: (required)
        :return: EnterpriseUpdateEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterprise`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseNetworkAllocation(self, body, **kwargs):
        """
        Update an enterprise network allocation
        Update an enterprise network allocation, provided an object id and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkAllocation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(self, body, **kwargs):
        """
        Update an enterprise network allocation
        Update an enterprise network allocation, provided an object id and an _update object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkAllocation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseNetworkAllocation body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkAllocationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseNetworkAllocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseNetworkAllocation`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseNetworkAllocation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseNetworkAllocationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseNetworkSegment(self, body, **kwargs):
        """
        Update an enterprise network segment
        Update an enterprise network segment.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkSegment(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment1 body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseNetworkSegment_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseNetworkSegment_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseNetworkSegment_with_http_info(self, body, **kwargs):
        """
        Update an enterprise network segment
        Update an enterprise network segment.  Privileges required:  `UPDATE` `NETWORK_ALLOCATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseNetworkSegment_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseInsertEnterpriseNetworkSegment1 body: (required)
        :return: EnterpriseUpdateEnterpriseNetworkSegmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseNetworkSegment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseNetworkSegment`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseNetworkSegment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseNetworkSegmentResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseRoute(self, body, **kwargs):
        """
        Update an enterprise route
        Update an enterprise route, set advertisement and cost values. Required parameters include the original route, as returned by enterprise/getEnterpriseRouteTable and the updated route with modified advertisement and route preference ordering.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRoute(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRoute body: (required)
        :return: EnterpriseUpdateEnterpriseRouteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseRoute_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseRoute_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseRoute_with_http_info(self, body, **kwargs):
        """
        Update an enterprise route
        Update an enterprise route, set advertisement and cost values. Required parameters include the original route, as returned by enterprise/getEnterpriseRouteTable and the updated route with modified advertisement and route preference ordering.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRoute_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRoute body: (required)
        :return: EnterpriseUpdateEnterpriseRouteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseRoute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseRoute`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseRoute'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseRouteResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseRouteConfiguration(self, body, **kwargs):
        """
        Update enterprise routing configuration
        Update enterprise routing configuration, by configuration id or logicalId.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRouteConfiguration(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseUpdateEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(self, body, **kwargs):
        """
        Update enterprise routing configuration
        Update enterprise routing configuration, by configuration id or logicalId.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseRouteConfiguration_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseRouteConfiguration body: (required)
        :return: EnterpriseUpdateEnterpriseRouteConfigurationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseRouteConfiguration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseRouteConfiguration`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseRouteConfiguration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseRouteConfigurationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseSecurityPolicy(self, body, **kwargs):
        """
        Update enterprise security policy
        Update enterprise security policy in accordance with to the passed ipsec settings.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseSecurityPolicy(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseSecurityPolicy body: (required)
        :return: EnterpriseUpdateEnterpriseSecurityPolicyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(self, body, **kwargs):
        """
        Update enterprise security policy
        Update enterprise security policy in accordance with to the passed ipsec settings.  Privileges required:  `UPDATE` `ENTERPRISE_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseSecurityPolicy_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseSecurityPolicy body: (required)
        :return: EnterpriseUpdateEnterpriseSecurityPolicyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseSecurityPolicy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseSecurityPolicy`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseSecurityPolicy'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseSecurityPolicyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUpdateEnterpriseService(self, body, **kwargs):
        """
        Update an enterprise service
        Update the enterprise service with the given id according to the settings specified by the _update field.  Privileges required:  `UPDATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseService(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseService body: (required)
        :return: EnterpriseUpdateEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUpdateEnterpriseService_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUpdateEnterpriseService_with_http_info(body, **kwargs)
            return data

    def enterpriseUpdateEnterpriseService_with_http_info(self, body, **kwargs):
        """
        Update an enterprise service
        Update the enterprise service with the given id according to the settings specified by the _update field.  Privileges required:  `UPDATE` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUpdateEnterpriseService_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUpdateEnterpriseService body: (required)
        :return: EnterpriseUpdateEnterpriseServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUpdateEnterpriseService" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUpdateEnterpriseService`")


        collection_formats = {}

        resource_path = '/enterprise/updateEnterpriseService'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUpdateEnterpriseServiceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUserDeleteEnterpriseUser(self, body, **kwargs):
        """
        Delete an enterprise user.
        Delete an enterprise user by id or username. Note that `enterpriseId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserDeleteEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserDeleteEnterpriseUser body: (required)
        :return: EnterpriseUserDeleteEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUserDeleteEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUserDeleteEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseUserDeleteEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Delete an enterprise user.
        Delete an enterprise user by id or username. Note that `enterpriseId` is a required parameter when invoking this method as an operator or partner user.  Privileges required:  `DELETE` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserDeleteEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserDeleteEnterpriseUser body: (required)
        :return: EnterpriseUserDeleteEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUserDeleteEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUserDeleteEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterpriseUser/deleteEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUserDeleteEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUserGetEnterpriseUser(self, body, **kwargs):
        """
        Get an enterprise user
        Get an enterprise user by id or username.  Privileges required:  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserGetEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserGetEnterpriseUser body: (required)
        :return: EnterpriseUserGetEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUserGetEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUserGetEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseUserGetEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Get an enterprise user
        Get an enterprise user by id or username.  Privileges required:  `READ` `ENTERPRISE_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserGetEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserGetEnterpriseUser body: (required)
        :return: EnterpriseUserGetEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUserGetEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUserGetEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterpriseUser/getEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUserGetEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseUserUpdateEnterpriseUser(self, body, **kwargs):
        """
        Update an enterprise user
        Update an enterprise user provided an object `id` or other identifying attributes, and an `_update` object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE_USER`, or  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserUpdateEnterpriseUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserUpdateEnterpriseUser body: (required)
        :return: EnterpriseUserUpdateEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseUserUpdateEnterpriseUser_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseUserUpdateEnterpriseUser_with_http_info(body, **kwargs)
            return data

    def enterpriseUserUpdateEnterpriseUser_with_http_info(self, body, **kwargs):
        """
        Update an enterprise user
        Update an enterprise user provided an object `id` or other identifying attributes, and an `_update` object with the names and values of columns to be updated.  Privileges required:  `UPDATE` `ENTERPRISE_USER`, or  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseUserUpdateEnterpriseUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseUserUpdateEnterpriseUser body: (required)
        :return: EnterpriseUserUpdateEnterpriseUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseUserUpdateEnterpriseUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseUserUpdateEnterpriseUser`")


        collection_formats = {}

        resource_path = '/enterpriseUser/updateEnterpriseUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseUserUpdateEnterpriseUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def eventGetEnterpriseEvents(self, body, **kwargs):
        """
        Get Edge events
        Gets Edge events in an enterprise or Edge context. Returns an array of Edge events sorted by `eventTime`.  Privileges required:  `READ` `ENTERPRISE_EVENT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.eventGetEnterpriseEvents(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventGetEnterpriseEvents body: (required)
        :return: EventGetEnterpriseEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.eventGetEnterpriseEvents_with_http_info(body, **kwargs)
        else:
            (data) = self.eventGetEnterpriseEvents_with_http_info(body, **kwargs)
            return data

    def eventGetEnterpriseEvents_with_http_info(self, body, **kwargs):
        """
        Get Edge events
        Gets Edge events in an enterprise or Edge context. Returns an array of Edge events sorted by `eventTime`.  Privileges required:  `READ` `ENTERPRISE_EVENT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.eventGetEnterpriseEvents_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventGetEnterpriseEvents body: (required)
        :return: EventGetEnterpriseEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventGetEnterpriseEvents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `eventGetEnterpriseEvents`")


        collection_formats = {}

        resource_path = '/event/getEnterpriseEvents'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventGetEnterpriseEventsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def eventGetOperatorEvents(self, body, **kwargs):
        """
        Get operator events
        Gets operator events by network ID (optional). If not specified, will be taken for the caller's security context. Optionally, use a filter object to limit the number of events returned. Additionally, specify a time interval with an interval object. If no end date is specified, then the default is the current date. Specify a `gatewayId` to filter events for the specified gateway.  Privileges required:  `READ` `OPERATOR_EVENT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.eventGetOperatorEvents(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventGetOperatorEvents body: (required)
        :return: EventGetOperatorEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.eventGetOperatorEvents_with_http_info(body, **kwargs)
        else:
            (data) = self.eventGetOperatorEvents_with_http_info(body, **kwargs)
            return data

    def eventGetOperatorEvents_with_http_info(self, body, **kwargs):
        """
        Get operator events
        Gets operator events by network ID (optional). If not specified, will be taken for the caller's security context. Optionally, use a filter object to limit the number of events returned. Additionally, specify a time interval with an interval object. If no end date is specified, then the default is the current date. Specify a `gatewayId` to filter events for the specified gateway.  Privileges required:  `READ` `OPERATOR_EVENT`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.eventGetOperatorEvents_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventGetOperatorEvents body: (required)
        :return: EventGetOperatorEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventGetOperatorEvents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `eventGetOperatorEvents`")


        collection_formats = {}

        resource_path = '/event/getOperatorEvents'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventGetOperatorEventsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firewallGetEnterpriseFirewallLogs(self, body, **kwargs):
        """
        Get enterprise firewall logs
        Gets firewall logs for the specified enterprise.  Privileges required:  `READ` `EDGE`  `VIEW_FIREWALL_LOGS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firewallGetEnterpriseFirewallLogs(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FirewallGetEnterpriseFirewallLogs body: (required)
        :return: FirewallGetEnterpriseFirewallLogsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firewallGetEnterpriseFirewallLogs_with_http_info(body, **kwargs)
        else:
            (data) = self.firewallGetEnterpriseFirewallLogs_with_http_info(body, **kwargs)
            return data

    def firewallGetEnterpriseFirewallLogs_with_http_info(self, body, **kwargs):
        """
        Get enterprise firewall logs
        Gets firewall logs for the specified enterprise.  Privileges required:  `READ` `EDGE`  `VIEW_FIREWALL_LOGS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firewallGetEnterpriseFirewallLogs_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FirewallGetEnterpriseFirewallLogs body: (required)
        :return: FirewallGetEnterpriseFirewallLogsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firewallGetEnterpriseFirewallLogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `firewallGetEnterpriseFirewallLogs`")


        collection_formats = {}

        resource_path = '/firewall/getEnterpriseFirewallLogs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirewallGetEnterpriseFirewallLogsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gatewayDeleteGateway(self, body, **kwargs):
        """
        Delete a gateway
        Delete a gateway by id.  Privileges required:  `DELETE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayDeleteGateway(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayDeleteGateway body: (required)
        :return: GatewayDeleteGatewayResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gatewayDeleteGateway_with_http_info(body, **kwargs)
        else:
            (data) = self.gatewayDeleteGateway_with_http_info(body, **kwargs)
            return data

    def gatewayDeleteGateway_with_http_info(self, body, **kwargs):
        """
        Delete a gateway
        Delete a gateway by id.  Privileges required:  `DELETE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayDeleteGateway_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayDeleteGateway body: (required)
        :return: GatewayDeleteGatewayResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gatewayDeleteGateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `gatewayDeleteGateway`")


        collection_formats = {}

        resource_path = '/gateway/deleteGateway'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GatewayDeleteGatewayResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gatewayGatewayProvision(self, body, **kwargs):
        """
        Provision a gateway
        Provision a gateway into an operator network.  Privileges required:  `CREATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayGatewayProvision(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayGatewayProvision body: (required)
        :return: GatewayGatewayProvisionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gatewayGatewayProvision_with_http_info(body, **kwargs)
        else:
            (data) = self.gatewayGatewayProvision_with_http_info(body, **kwargs)
            return data

    def gatewayGatewayProvision_with_http_info(self, body, **kwargs):
        """
        Provision a gateway
        Provision a gateway into an operator network.  Privileges required:  `CREATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayGatewayProvision_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayGatewayProvision body: (required)
        :return: GatewayGatewayProvisionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gatewayGatewayProvision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `gatewayGatewayProvision`")


        collection_formats = {}

        resource_path = '/gateway/gatewayProvision'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GatewayGatewayProvisionResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gatewayGetGatewayEdgeAssignments(self, body, **kwargs):
        """
        Get edge assignments for a gateway
        Get edge assignments for a gateway  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayGetGatewayEdgeAssignments(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayGetGatewayEdgeAssignments body: (required)
        :return: list[GatewayGetGatewayEdgeAssignmentsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gatewayGetGatewayEdgeAssignments_with_http_info(body, **kwargs)
        else:
            (data) = self.gatewayGetGatewayEdgeAssignments_with_http_info(body, **kwargs)
            return data

    def gatewayGetGatewayEdgeAssignments_with_http_info(self, body, **kwargs):
        """
        Get edge assignments for a gateway
        Get edge assignments for a gateway  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayGetGatewayEdgeAssignments_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayGetGatewayEdgeAssignments body: (required)
        :return: list[GatewayGetGatewayEdgeAssignmentsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gatewayGetGatewayEdgeAssignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `gatewayGetGatewayEdgeAssignments`")


        collection_formats = {}

        resource_path = '/gateway/getGatewayEdgeAssignments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GatewayGetGatewayEdgeAssignmentsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gatewayUpdateGatewayAttributes(self, body, **kwargs):
        """
        Update gateway attributes
        Update gateway attributes (name, ipAddress, on-premise parametrization and description) and associated site attributes  Privileges required:  `UPDATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayUpdateGatewayAttributes(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayUpdateGatewayAttributes body: (required)
        :return: GatewayUpdateGatewayAttributesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gatewayUpdateGatewayAttributes_with_http_info(body, **kwargs)
        else:
            (data) = self.gatewayUpdateGatewayAttributes_with_http_info(body, **kwargs)
            return data

    def gatewayUpdateGatewayAttributes_with_http_info(self, body, **kwargs):
        """
        Update gateway attributes
        Update gateway attributes (name, ipAddress, on-premise parametrization and description) and associated site attributes  Privileges required:  `UPDATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gatewayUpdateGatewayAttributes_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GatewayUpdateGatewayAttributes body: (required)
        :return: GatewayUpdateGatewayAttributesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gatewayUpdateGatewayAttributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `gatewayUpdateGatewayAttributes`")


        collection_formats = {}

        resource_path = '/gateway/updateGatewayAttributes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GatewayUpdateGatewayAttributesResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def linkQualityEventGetLinkQualityEvents(self, body, **kwargs):
        """
        Get link quality data
        Returns link quality scores per link for a particular edge within a time interval. Rolls up link quality events to provide an aggregate score for the edge. Returns an empty array if no link quality events are available in the given timeframe.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.linkQualityEventGetLinkQualityEvents(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LinkQualityEventGetLinkQualityEvents body: (required)
        :return: LinkQualityEventGetLinkQualityEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.linkQualityEventGetLinkQualityEvents_with_http_info(body, **kwargs)
        else:
            (data) = self.linkQualityEventGetLinkQualityEvents_with_http_info(body, **kwargs)
            return data

    def linkQualityEventGetLinkQualityEvents_with_http_info(self, body, **kwargs):
        """
        Get link quality data
        Returns link quality scores per link for a particular edge within a time interval. Rolls up link quality events to provide an aggregate score for the edge. Returns an empty array if no link quality events are available in the given timeframe.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.linkQualityEventGetLinkQualityEvents_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LinkQualityEventGetLinkQualityEvents body: (required)
        :return: LinkQualityEventGetLinkQualityEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linkQualityEventGetLinkQualityEvents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `linkQualityEventGetLinkQualityEvents`")


        collection_formats = {}

        resource_path = '/linkQualityEvent/getLinkQualityEvents'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LinkQualityEventGetLinkQualityEventsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def loginEnterpriseLogin(self, authorization, **kwargs):
        """
        Authentication for non-operator users
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loginEnterpriseLogin(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthObject authorization: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loginEnterpriseLogin_with_http_info(authorization, **kwargs)
        else:
            (data) = self.loginEnterpriseLogin_with_http_info(authorization, **kwargs)
            return data

    def loginEnterpriseLogin_with_http_info(self, authorization, **kwargs):
        """
        Authentication for non-operator users
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loginEnterpriseLogin_with_http_info(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthObject authorization: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loginEnterpriseLogin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `loginEnterpriseLogin`")


        collection_formats = {}

        resource_path = '/login/enterpriseLogin'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authorization' in params:
            body_params = params['authorization']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def loginOperatorLogin(self, authorization, **kwargs):
        """
        Authentication for an operator user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loginOperatorLogin(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthObject authorization: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loginOperatorLogin_with_http_info(authorization, **kwargs)
        else:
            (data) = self.loginOperatorLogin_with_http_info(authorization, **kwargs)
            return data

    def loginOperatorLogin_with_http_info(self, authorization, **kwargs):
        """
        Authentication for an operator user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loginOperatorLogin_with_http_info(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthObject authorization: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loginOperatorLogin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `loginOperatorLogin`")


        collection_formats = {}

        resource_path = '/login/operatorLogin'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authorization' in params:
            body_params = params['authorization']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def logout(self, **kwargs):
        """
        Deactivate a given authorization cookie
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.logout(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.logout_with_http_info(**kwargs)
        else:
            (data) = self.logout_with_http_info(**kwargs)
            return data

    def logout_with_http_info(self, **kwargs):
        """
        Deactivate a given authorization cookie
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.logout_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/logout'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def meta(self, apiPath, **kwargs):
        """
        Get meta-data on any other API call
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.meta(apiPath, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str apiPath: the path to another api method, starting after /rest/ (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.meta_with_http_info(apiPath, **kwargs)
        else:
            (data) = self.meta_with_http_info(apiPath, **kwargs)
            return data

    def meta_with_http_info(self, apiPath, **kwargs):
        """
        Get meta-data on any other API call
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.meta_with_http_info(apiPath, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str apiPath: the path to another api method, starting after /rest/ (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apiPath']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apiPath' is set
        if ('apiPath' not in params) or (params['apiPath'] is None):
            raise ValueError("Missing the required parameter `apiPath` when calling `meta`")


        collection_formats = {}

        resource_path = '/meta/{apiPath}'.replace('{format}', 'json')
        path_params = {}
        if 'apiPath' in params:
            path_params['apiPath'] = params['apiPath']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeAppLinkMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by link
        Fetch flow metric summaries for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppLinkMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppLinkMetrics body: (required)
        :return: list[MetricsGetEdgeAppLinkMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeAppLinkMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeAppLinkMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeAppLinkMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by link
        Fetch flow metric summaries for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppLinkMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppLinkMetrics body: (required)
        :return: list[MetricsGetEdgeAppLinkMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeAppLinkMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeAppLinkMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeAppLinkMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeAppLinkMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeAppLinkSeries(self, body, **kwargs):
        """
        Get flow metric time series data by link
        Fetch flow metric time series for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppLinkSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppLinkSeries body: (required)
        :return: list[MetricsGetEdgeAppLinkSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeAppLinkSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeAppLinkSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeAppLinkSeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by link
        Fetch flow metric time series for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppLinkSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppLinkSeries body: (required)
        :return: list[MetricsGetEdgeAppLinkSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeAppLinkSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeAppLinkSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeAppLinkSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeAppLinkSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeAppMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by application
        Fetch flow metric summaries for the given time interval by application. On success, this method returns an array of flow data where each entry corresponds to a single application. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppMetrics body: (required)
        :return: list[MetricsGetEdgeAppMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeAppMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeAppMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeAppMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by application
        Fetch flow metric summaries for the given time interval by application. On success, this method returns an array of flow data where each entry corresponds to a single application. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppMetrics body: (required)
        :return: list[MetricsGetEdgeAppMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeAppMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeAppMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeAppMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeAppMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeAppSeries(self, body, **kwargs):
        """
        Get flow metric time series data by application
        Fetch flow metric time series for the given time interval by application. On success, this method returns an array of flow data where each entry corresponds to a single application. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppSeries body: (required)
        :return: list[MetricsGetEdgeAppSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeAppSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeAppSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeAppSeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by application
        Fetch flow metric time series for the given time interval by application. On success, this method returns an array of flow data where each entry corresponds to a single application. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeAppSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeAppSeries body: (required)
        :return: list[MetricsGetEdgeAppSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeAppSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeAppSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeAppSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeAppSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeCategoryMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by application category
        Fetch flow metric summaries for the given time interval by application category. On success, this method returns an array of flow data where each entry corresponds to a category of application traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeCategoryMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeCategoryMetrics body: (required)
        :return: list[MetricsGetEdgeCategoryMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeCategoryMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeCategoryMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeCategoryMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by application category
        Fetch flow metric summaries for the given time interval by application category. On success, this method returns an array of flow data where each entry corresponds to a category of application traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeCategoryMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeCategoryMetrics body: (required)
        :return: list[MetricsGetEdgeCategoryMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeCategoryMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeCategoryMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeCategoryMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeCategoryMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeCategorySeries(self, body, **kwargs):
        """
        Get flow metric time series data by application category
        Fetch flow metric time series for the given time interval by application category. On success, this method returns an array of flow data where each entry corresponds to a category of application traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeCategorySeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeCategorySeries body: (required)
        :return: list[MetricsGetEdgeCategorySeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeCategorySeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeCategorySeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeCategorySeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by application category
        Fetch flow metric time series for the given time interval by application category. On success, this method returns an array of flow data where each entry corresponds to a category of application traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeCategorySeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeCategorySeries body: (required)
        :return: list[MetricsGetEdgeCategorySeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeCategorySeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeCategorySeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeCategorySeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeCategorySeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeDestMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by destination
        Fetch flow metric summaries for the given time interval by destination. On success, this method returns an array of flow data where each entry corresponds to a distinct traffic destination. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDestMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDestMetrics body: (required)
        :return: list[MetricsGetEdgeDestMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeDestMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeDestMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeDestMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by destination
        Fetch flow metric summaries for the given time interval by destination. On success, this method returns an array of flow data where each entry corresponds to a distinct traffic destination. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDestMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDestMetrics body: (required)
        :return: list[MetricsGetEdgeDestMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeDestMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeDestMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeDestMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeDestMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeDestSeries(self, body, **kwargs):
        """
        Get flow metric time series data by destination
        Fetch flow metric time series for the given time interval by destination. On success, this method returns an array of flow data where each entry corresponds to a distinct traffic destination. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDestSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDestSeries body: (required)
        :return: list[MetricsGetEdgeDestSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeDestSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeDestSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeDestSeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by destination
        Fetch flow metric time series for the given time interval by destination. On success, this method returns an array of flow data where each entry corresponds to a distinct traffic destination. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDestSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDestSeries body: (required)
        :return: list[MetricsGetEdgeDestSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeDestSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeDestSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeDestSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeDestSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeDeviceMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by client device
        Fetch flow metric summaries for the given time interval by client device. On success, this method returns an array of flow data where each entry corresponds to a distinct device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_USER_IDENTIFIABLE_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDeviceMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDeviceMetrics body: (required)
        :return: list[MetricsGetEdgeDeviceMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeDeviceMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeDeviceMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeDeviceMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by client device
        Fetch flow metric summaries for the given time interval by client device. On success, this method returns an array of flow data where each entry corresponds to a distinct device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_USER_IDENTIFIABLE_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDeviceMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDeviceMetrics body: (required)
        :return: list[MetricsGetEdgeDeviceMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeDeviceMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeDeviceMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeDeviceMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeDeviceMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeDeviceSeries(self, body, **kwargs):
        """
        Get flow metric time series data by client device
        Fetch flow metric time series for the given time interval by client device. On success, this method returns an array of flow data where each entry corresponds to a distinct device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_USER_IDENTIFIABLE_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDeviceSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDeviceSeries body: (required)
        :return: list[MetricsGetEdgeDeviceSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeDeviceSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeDeviceSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeDeviceSeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by client device
        Fetch flow metric time series for the given time interval by client device. On success, this method returns an array of flow data where each entry corresponds to a distinct device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_USER_IDENTIFIABLE_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeDeviceSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeDeviceSeries body: (required)
        :return: list[MetricsGetEdgeDeviceSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeDeviceSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeDeviceSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeDeviceSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeDeviceSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeLinkMetrics(self, body, **kwargs):
        """
        Get advanced flow metric aggregate data by link
        Fetch advanced flow metric summaries for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeLinkMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeLinkMetrics body: (required)
        :return: list[MetricsGetEdgeLinkMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeLinkMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeLinkMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeLinkMetrics_with_http_info(self, body, **kwargs):
        """
        Get advanced flow metric aggregate data by link
        Fetch advanced flow metric summaries for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeLinkMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeLinkMetrics body: (required)
        :return: list[MetricsGetEdgeLinkMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeLinkMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeLinkMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeLinkMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeLinkMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeLinkSeries(self, body, **kwargs):
        """
        Get advanced flow metric time series data by link
        Fetch advanced flow metric time series for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeLinkSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeLinkSeries body: (required)
        :return: list[MetricsGetEdgeLinkSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeLinkSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeLinkSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeLinkSeries_with_http_info(self, body, **kwargs):
        """
        Get advanced flow metric time series data by link
        Fetch advanced flow metric time series for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeLinkSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeLinkSeries body: (required)
        :return: list[MetricsGetEdgeLinkSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeLinkSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeLinkSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeLinkSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeLinkSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeOsMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by client OS
        Fetch flow metric summaries for the given time interval by client OS. On success, this method returns an array of flow data where each entry corresponds to a distinct OS on a client device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeOsMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeOsMetrics body: (required)
        :return: list[MetricsGetEdgeOsMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeOsMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeOsMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeOsMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by client OS
        Fetch flow metric summaries for the given time interval by client OS. On success, this method returns an array of flow data where each entry corresponds to a distinct OS on a client device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeOsMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeOsMetrics body: (required)
        :return: list[MetricsGetEdgeOsMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeOsMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeOsMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeOsMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeOsMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeOsSeries(self, body, **kwargs):
        """
        Get flow metric time series data by client OS
        Fetch flow metric time series for the given time interval by client OS. On success, this method returns an array of flow data where each entry corresponds to a distinct OS on a client device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeOsSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeOsSeries body: (required)
        :return: list[MetricsGetEdgeOsSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeOsSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeOsSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeOsSeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by client OS
        Fetch flow metric time series for the given time interval by client OS. On success, this method returns an array of flow data where each entry corresponds to a distinct OS on a client device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeOsSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeOsSeries body: (required)
        :return: list[MetricsGetEdgeOsSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeOsSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeOsSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeOsSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeOsSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeSegmentMetrics(self, body, **kwargs):
        """
        Get flow metric aggregate data by segment Id
        Fetch flow metric summaries for the given time interval by segment id. On success, this method returns an array of flow data where each entry corresponds to a segment id traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeSegmentMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeSegmentMetrics body: (required)
        :return: list[MetricsGetEdgeSegmentMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeSegmentMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeSegmentMetrics_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeSegmentMetrics_with_http_info(self, body, **kwargs):
        """
        Get flow metric aggregate data by segment Id
        Fetch flow metric summaries for the given time interval by segment id. On success, this method returns an array of flow data where each entry corresponds to a segment id traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeSegmentMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeSegmentMetrics body: (required)
        :return: list[MetricsGetEdgeSegmentMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeSegmentMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeSegmentMetrics`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeSegmentMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeSegmentMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def metricsGetEdgeSegmentSeries(self, body, **kwargs):
        """
        Get flow metric time series data by segment id
        Fetch flow metric time series for the given time interval by segment id. On success, this method returns an array of flow data where each entry corresponds to a segment id of traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeSegmentSeries(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeSegmentSeries body: (required)
        :return: list[MetricsGetEdgeSegmentSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.metricsGetEdgeSegmentSeries_with_http_info(body, **kwargs)
        else:
            (data) = self.metricsGetEdgeSegmentSeries_with_http_info(body, **kwargs)
            return data

    def metricsGetEdgeSegmentSeries_with_http_info(self, body, **kwargs):
        """
        Get flow metric time series data by segment id
        Fetch flow metric time series for the given time interval by segment id. On success, this method returns an array of flow data where each entry corresponds to a segment id of traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.  Privileges required:  `READ` `EDGE`  `VIEW_FLOW_STATS` `undefined`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.metricsGetEdgeSegmentSeries_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetricsGetEdgeSegmentSeries body: (required)
        :return: list[MetricsGetEdgeSegmentSeriesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metricsGetEdgeSegmentSeries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `metricsGetEdgeSegmentSeries`")


        collection_formats = {}

        resource_path = '/metrics/getEdgeSegmentSeries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MetricsGetEdgeSegmentSeriesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def monitoringGetAggregateEdgeLinkMetrics(self, body, **kwargs):
        """
        Get aggregate Edge link metrics across enterprises
        Gets aggregate link metrics for the request interval for all active links across all enterprises, where a link is considered to be active if an Edge has reported any activity for it in the last 24 hours. On success, returns an array of network utilization metrics, one per link.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetAggregateEdgeLinkMetrics(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MonitoringGetAggregateEdgeLinkMetrics body: (required)
        :return: list[MonitoringGetAggregateEdgeLinkMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.monitoringGetAggregateEdgeLinkMetrics_with_http_info(body, **kwargs)
        else:
            (data) = self.monitoringGetAggregateEdgeLinkMetrics_with_http_info(body, **kwargs)
            return data

    def monitoringGetAggregateEdgeLinkMetrics_with_http_info(self, body, **kwargs):
        """
        Get aggregate Edge link metrics across enterprises
        Gets aggregate link metrics for the request interval for all active links across all enterprises, where a link is considered to be active if an Edge has reported any activity for it in the last 24 hours. On success, returns an array of network utilization metrics, one per link.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetAggregateEdgeLinkMetrics_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MonitoringGetAggregateEdgeLinkMetrics body: (required)
        :return: list[MonitoringGetAggregateEdgeLinkMetricsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoringGetAggregateEdgeLinkMetrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `monitoringGetAggregateEdgeLinkMetrics`")


        collection_formats = {}

        resource_path = '/monitoring/getAggregateEdgeLinkMetrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MonitoringGetAggregateEdgeLinkMetricsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def monitoringGetAggregateEnterpriseEvents(self, body, **kwargs):
        """
        Get events across all enterprises
        Gets events across all enterprises in a paginated list. When called in the MSP/Partner context, queries only enterprises managed by the MSP.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetAggregateEnterpriseEvents(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MonitoringGetAggregateEnterpriseEvents body: (required)
        :return: MonitoringGetAggregateEnterpriseEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.monitoringGetAggregateEnterpriseEvents_with_http_info(body, **kwargs)
        else:
            (data) = self.monitoringGetAggregateEnterpriseEvents_with_http_info(body, **kwargs)
            return data

    def monitoringGetAggregateEnterpriseEvents_with_http_info(self, body, **kwargs):
        """
        Get events across all enterprises
        Gets events across all enterprises in a paginated list. When called in the MSP/Partner context, queries only enterprises managed by the MSP.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetAggregateEnterpriseEvents_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MonitoringGetAggregateEnterpriseEvents body: (required)
        :return: MonitoringGetAggregateEnterpriseEventsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoringGetAggregateEnterpriseEvents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `monitoringGetAggregateEnterpriseEvents`")


        collection_formats = {}

        resource_path = '/monitoring/getAggregateEnterpriseEvents'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MonitoringGetAggregateEnterpriseEventsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def monitoringGetAggregates(self, body, **kwargs):
        """
        Get aggregate enterprise and edge information
        Retrieve a comprehensive listing of all enterprises and edges on a network. Returns an object containing an aggregate `edgeCount`, a list (`enterprises`) containing enterprise objects, and a map (`edges`) which gives edge counts per enterprise.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetAggregates(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MonitoringGetAggregates body: (required)
        :return: MonitoringGetAggregatesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.monitoringGetAggregates_with_http_info(body, **kwargs)
        else:
            (data) = self.monitoringGetAggregates_with_http_info(body, **kwargs)
            return data

    def monitoringGetAggregates_with_http_info(self, body, **kwargs):
        """
        Get aggregate enterprise and edge information
        Retrieve a comprehensive listing of all enterprises and edges on a network. Returns an object containing an aggregate `edgeCount`, a list (`enterprises`) containing enterprise objects, and a map (`edges`) which gives edge counts per enterprise.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetAggregates_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MonitoringGetAggregates body: (required)
        :return: MonitoringGetAggregatesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoringGetAggregates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `monitoringGetAggregates`")


        collection_formats = {}

        resource_path = '/monitoring/getAggregates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MonitoringGetAggregatesResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def monitoringGetEnterpriseBgpPeerStatus(self, body, **kwargs):
        """
        Get gateway BGP peer status for all enterprise gateways
        Returns an array where each entry corresponds to a gateway and contains an associated set of BGP peers with state records.  Privileges required:  `READ` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetEnterpriseBgpPeerStatus(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body body: (required)
        :return: list[MonitoringGetEnterpriseBgpPeerStatusResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.monitoringGetEnterpriseBgpPeerStatus_with_http_info(body, **kwargs)
        else:
            (data) = self.monitoringGetEnterpriseBgpPeerStatus_with_http_info(body, **kwargs)
            return data

    def monitoringGetEnterpriseBgpPeerStatus_with_http_info(self, body, **kwargs):
        """
        Get gateway BGP peer status for all enterprise gateways
        Returns an array where each entry corresponds to a gateway and contains an associated set of BGP peers with state records.  Privileges required:  `READ` `NETWORK_SERVICE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetEnterpriseBgpPeerStatus_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body body: (required)
        :return: list[MonitoringGetEnterpriseBgpPeerStatusResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoringGetEnterpriseBgpPeerStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `monitoringGetEnterpriseBgpPeerStatus`")


        collection_formats = {}

        resource_path = '/monitoring/getEnterpriseBgpPeerStatus'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MonitoringGetEnterpriseBgpPeerStatusResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def monitoringGetEnterpriseEdgeBgpPeerStatus(self, body, **kwargs):
        """
        Get edge BGP peer status for all enterprise edges
        Returns an array where each entry corresponds to an edge and contains an associated set of BGP peers and state records.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetEnterpriseEdgeBgpPeerStatus(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body1 body: (required)
        :return: list[MonitoringGetEnterpriseEdgeBgpPeerStatusResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.monitoringGetEnterpriseEdgeBgpPeerStatus_with_http_info(body, **kwargs)
        else:
            (data) = self.monitoringGetEnterpriseEdgeBgpPeerStatus_with_http_info(body, **kwargs)
            return data

    def monitoringGetEnterpriseEdgeBgpPeerStatus_with_http_info(self, body, **kwargs):
        """
        Get edge BGP peer status for all enterprise edges
        Returns an array where each entry corresponds to an edge and contains an associated set of BGP peers and state records.  Privileges required:  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetEnterpriseEdgeBgpPeerStatus_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body1 body: (required)
        :return: list[MonitoringGetEnterpriseEdgeBgpPeerStatusResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoringGetEnterpriseEdgeBgpPeerStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `monitoringGetEnterpriseEdgeBgpPeerStatus`")


        collection_formats = {}

        resource_path = '/monitoring/getEnterpriseEdgeBgpPeerStatus'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MonitoringGetEnterpriseEdgeBgpPeerStatusResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def monitoringGetEnterpriseEdgeLinkStatus(self, body, **kwargs):
        """
        Get edge and link status data
        Get current edge and edge-link status for all enterprise edges.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetEnterpriseEdgeLinkStatus(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body2 body: (required)
        :return: list[MonitoringGetEnterpriseEdgeLinkStatusResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.monitoringGetEnterpriseEdgeLinkStatus_with_http_info(body, **kwargs)
        else:
            (data) = self.monitoringGetEnterpriseEdgeLinkStatus_with_http_info(body, **kwargs)
            return data

    def monitoringGetEnterpriseEdgeLinkStatus_with_http_info(self, body, **kwargs):
        """
        Get edge and link status data
        Get current edge and edge-link status for all enterprise edges.  Privileges required:  `READ` `ENTERPRISE`  `READ` `EDGE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.monitoringGetEnterpriseEdgeLinkStatus_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body2 body: (required)
        :return: list[MonitoringGetEnterpriseEdgeLinkStatusResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoringGetEnterpriseEdgeLinkStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `monitoringGetEnterpriseEdgeLinkStatus`")


        collection_formats = {}

        resource_path = '/monitoring/getEnterpriseEdgeLinkStatus'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MonitoringGetEnterpriseEdgeLinkStatusResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkDeleteNetworkGatewayPool(self, body, **kwargs):
        """
        Delete gateway pool
        Deletes the specified gateway pool (by `id`).  Privileges required:  `DELETE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkDeleteNetworkGatewayPool(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkDeleteNetworkGatewayPool body: (required)
        :return: NetworkDeleteNetworkGatewayPoolResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkDeleteNetworkGatewayPool_with_http_info(body, **kwargs)
        else:
            (data) = self.networkDeleteNetworkGatewayPool_with_http_info(body, **kwargs)
            return data

    def networkDeleteNetworkGatewayPool_with_http_info(self, body, **kwargs):
        """
        Delete gateway pool
        Deletes the specified gateway pool (by `id`).  Privileges required:  `DELETE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkDeleteNetworkGatewayPool_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkDeleteNetworkGatewayPool body: (required)
        :return: NetworkDeleteNetworkGatewayPoolResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkDeleteNetworkGatewayPool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkDeleteNetworkGatewayPool`")


        collection_formats = {}

        resource_path = '/network/deleteNetworkGatewayPool'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NetworkDeleteNetworkGatewayPoolResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkGetNetworkConfigurations(self, body, **kwargs):
        """
        Get operator configuration profiles
        Gets all operator configuration profiles associated with an operator's network. Optionally includes the modules associated with each profile. This call does not return templates.  Privileges required:  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkConfigurations(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkConfigurations body: (required)
        :return: list[NetworkGetNetworkConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkGetNetworkConfigurations_with_http_info(body, **kwargs)
        else:
            (data) = self.networkGetNetworkConfigurations_with_http_info(body, **kwargs)
            return data

    def networkGetNetworkConfigurations_with_http_info(self, body, **kwargs):
        """
        Get operator configuration profiles
        Gets all operator configuration profiles associated with an operator's network. Optionally includes the modules associated with each profile. This call does not return templates.  Privileges required:  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkConfigurations_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkConfigurations body: (required)
        :return: list[NetworkGetNetworkConfigurationsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkGetNetworkConfigurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkGetNetworkConfigurations`")


        collection_formats = {}

        resource_path = '/network/getNetworkConfigurations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[NetworkGetNetworkConfigurationsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkGetNetworkEnterprises(self, body, **kwargs):
        """
        Get a list of the enterprises on a network
        Get the enterprises existing on a network, optionally including all edges or edge counts. The `edgeConfigUpdate` \"with\" option may also be passed to check whether application of configuration updates to edges is enabled for each enterprise.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkEnterprises(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkEnterprises body: (required)
        :return: list[NetworkGetNetworkEnterprisesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkGetNetworkEnterprises_with_http_info(body, **kwargs)
        else:
            (data) = self.networkGetNetworkEnterprises_with_http_info(body, **kwargs)
            return data

    def networkGetNetworkEnterprises_with_http_info(self, body, **kwargs):
        """
        Get a list of the enterprises on a network
        Get the enterprises existing on a network, optionally including all edges or edge counts. The `edgeConfigUpdate` \"with\" option may also be passed to check whether application of configuration updates to edges is enabled for each enterprise.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkEnterprises_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkEnterprises body: (required)
        :return: list[NetworkGetNetworkEnterprisesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkGetNetworkEnterprises" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkGetNetworkEnterprises`")


        collection_formats = {}

        resource_path = '/network/getNetworkEnterprises'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[NetworkGetNetworkEnterprisesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkGetNetworkGatewayPools(self, body, **kwargs):
        """
        Get list of gateway pools
        Get list of gateway pools associated with a network, optionally with the gateways or enterprises belonging to each pool.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkGatewayPools(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkGatewayPools body: (required)
        :return: list[NetworkGetNetworkGatewayPoolsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkGetNetworkGatewayPools_with_http_info(body, **kwargs)
        else:
            (data) = self.networkGetNetworkGatewayPools_with_http_info(body, **kwargs)
            return data

    def networkGetNetworkGatewayPools_with_http_info(self, body, **kwargs):
        """
        Get list of gateway pools
        Get list of gateway pools associated with a network, optionally with the gateways or enterprises belonging to each pool.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkGatewayPools_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkGatewayPools body: (required)
        :return: list[NetworkGetNetworkGatewayPoolsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkGetNetworkGatewayPools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkGetNetworkGatewayPools`")


        collection_formats = {}

        resource_path = '/network/getNetworkGatewayPools'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[NetworkGetNetworkGatewayPoolsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkGetNetworkGateways(self, body, **kwargs):
        """
        Get list of gateways
        Get list of gateways associated with a network.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkGateways(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkGateways body: (required)
        :return: list[NetworkGetNetworkGatewaysResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkGetNetworkGateways_with_http_info(body, **kwargs)
        else:
            (data) = self.networkGetNetworkGateways_with_http_info(body, **kwargs)
            return data

    def networkGetNetworkGateways_with_http_info(self, body, **kwargs):
        """
        Get list of gateways
        Get list of gateways associated with a network.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkGateways_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkGateways body: (required)
        :return: list[NetworkGetNetworkGatewaysResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkGetNetworkGateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkGetNetworkGateways`")


        collection_formats = {}

        resource_path = '/network/getNetworkGateways'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[NetworkGetNetworkGatewaysResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkGetNetworkOperatorUsers(self, body, **kwargs):
        """
        Get list of operator users for a network
        Get a list of all of the operator users associated with a network  Privileges required:  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkOperatorUsers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkOperatorUsers body: (required)
        :return: list[NetworkGetNetworkOperatorUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkGetNetworkOperatorUsers_with_http_info(body, **kwargs)
        else:
            (data) = self.networkGetNetworkOperatorUsers_with_http_info(body, **kwargs)
            return data

    def networkGetNetworkOperatorUsers_with_http_info(self, body, **kwargs):
        """
        Get list of operator users for a network
        Get a list of all of the operator users associated with a network  Privileges required:  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkGetNetworkOperatorUsers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGetNetworkOperatorUsers body: (required)
        :return: list[NetworkGetNetworkOperatorUsersResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkGetNetworkOperatorUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkGetNetworkOperatorUsers`")


        collection_formats = {}

        resource_path = '/network/getNetworkOperatorUsers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[NetworkGetNetworkOperatorUsersResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkInsertNetworkGatewayPool(self, body, **kwargs):
        """
        Insert a gateway pool
        Insert a gateway pool, associated with a network.  Privileges required:  `CREATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkInsertNetworkGatewayPool(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkInsertNetworkGatewayPool body: (required)
        :return: NetworkInsertNetworkGatewayPoolResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkInsertNetworkGatewayPool_with_http_info(body, **kwargs)
        else:
            (data) = self.networkInsertNetworkGatewayPool_with_http_info(body, **kwargs)
            return data

    def networkInsertNetworkGatewayPool_with_http_info(self, body, **kwargs):
        """
        Insert a gateway pool
        Insert a gateway pool, associated with a network.  Privileges required:  `CREATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkInsertNetworkGatewayPool_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkInsertNetworkGatewayPool body: (required)
        :return: NetworkInsertNetworkGatewayPoolResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkInsertNetworkGatewayPool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkInsertNetworkGatewayPool`")


        collection_formats = {}

        resource_path = '/network/insertNetworkGatewayPool'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NetworkInsertNetworkGatewayPoolResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def networkUpdateNetworkGatewayPoolAttributes(self, body, **kwargs):
        """
        Update gateway pool attributes
        Update the configurable attributes of a Gateway Pool. Configurarable attributes are `name`, `description`, and `handOffType`.  Privileges required:  `UPDATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkUpdateNetworkGatewayPoolAttributes(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkUpdateNetworkGatewayPoolAttributes body: (required)
        :return: NetworkUpdateNetworkGatewayPoolAttributesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.networkUpdateNetworkGatewayPoolAttributes_with_http_info(body, **kwargs)
        else:
            (data) = self.networkUpdateNetworkGatewayPoolAttributes_with_http_info(body, **kwargs)
            return data

    def networkUpdateNetworkGatewayPoolAttributes_with_http_info(self, body, **kwargs):
        """
        Update gateway pool attributes
        Update the configurable attributes of a Gateway Pool. Configurarable attributes are `name`, `description`, and `handOffType`.  Privileges required:  `UPDATE` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.networkUpdateNetworkGatewayPoolAttributes_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkUpdateNetworkGatewayPoolAttributes body: (required)
        :return: NetworkUpdateNetworkGatewayPoolAttributesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method networkUpdateNetworkGatewayPoolAttributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `networkUpdateNetworkGatewayPoolAttributes`")


        collection_formats = {}

        resource_path = '/network/updateNetworkGatwayPoolAttributes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NetworkUpdateNetworkGatewayPoolAttributesResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserDeleteOperatorUser(self, body, **kwargs):
        """
        Delete an operator user
        Delete an operator user object by `id` or `username`.  Privileges required:  `DELETE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserDeleteOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserDeleteOperatorUser body: (required)
        :return: OperatorUserDeleteOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserDeleteOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserDeleteOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserDeleteOperatorUser_with_http_info(self, body, **kwargs):
        """
        Delete an operator user
        Delete an operator user object by `id` or `username`.  Privileges required:  `DELETE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserDeleteOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserDeleteOperatorUser body: (required)
        :return: OperatorUserDeleteOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserDeleteOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserDeleteOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/deleteOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserDeleteOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserGetOperatorUser(self, body, **kwargs):
        """
        Get an operator user
        Get an operator user object by `id` or `username`.  Privileges required:  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserGetOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserGetOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserGetOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserGetOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserGetOperatorUser_with_http_info(self, body, **kwargs):
        """
        Get an operator user
        Get an operator user object by `id` or `username`.  Privileges required:  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserGetOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserGetOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserGetOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserGetOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/getOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserGetOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserInsertOperatorUser(self, body, **kwargs):
        """
        Insert an operator user
        Insert an operator user and associate with an operator's network.  Privileges required:  `CREATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserInsertOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserInsertOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserInsertOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserInsertOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserInsertOperatorUser_with_http_info(self, body, **kwargs):
        """
        Insert an operator user
        Insert an operator user and associate with an operator's network.  Privileges required:  `CREATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserInsertOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserInsertOperatorUser body: (required)
        :return: OperatorUserGetOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserInsertOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserInsertOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/insertOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserGetOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def operatorUserUpdateOperatorUser(self, body, **kwargs):
        """
        Update an operator user
        Update an operator user provided an object `id` or `username`, and an `_update` object containing the names and values, of columns to be updated.  Privileges required:  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserUpdateOperatorUser(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserUpdateOperatorUser body: (required)
        :return: OperatorUserUpdateOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.operatorUserUpdateOperatorUser_with_http_info(body, **kwargs)
        else:
            (data) = self.operatorUserUpdateOperatorUser_with_http_info(body, **kwargs)
            return data

    def operatorUserUpdateOperatorUser_with_http_info(self, body, **kwargs):
        """
        Update an operator user
        Update an operator user provided an object `id` or `username`, and an `_update` object containing the names and values, of columns to be updated.  Privileges required:  `UPDATE` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.operatorUserUpdateOperatorUser_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperatorUserUpdateOperatorUser body: (required)
        :return: OperatorUserUpdateOperatorUserResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatorUserUpdateOperatorUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operatorUserUpdateOperatorUser`")


        collection_formats = {}

        resource_path = '/operatorUser/updateOperatorUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OperatorUserUpdateOperatorUserResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleCreateRoleCustomization(self, body, **kwargs):
        """
        Create a role customization
        Create a role customization given a roleId and an array of privilegeIds.  Privileges required:  `UPDATE` `NETWORK`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleCreateRoleCustomization(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RoleCreateRoleCustomization body: (required)
        :return: RoleCreateRoleCustomizationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleCreateRoleCustomization_with_http_info(body, **kwargs)
        else:
            (data) = self.roleCreateRoleCustomization_with_http_info(body, **kwargs)
            return data

    def roleCreateRoleCustomization_with_http_info(self, body, **kwargs):
        """
        Create a role customization
        Create a role customization given a roleId and an array of privilegeIds.  Privileges required:  `UPDATE` `NETWORK`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleCreateRoleCustomization_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RoleCreateRoleCustomization body: (required)
        :return: RoleCreateRoleCustomizationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleCreateRoleCustomization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleCreateRoleCustomization`")


        collection_formats = {}

        resource_path = '/role/createRoleCustomization'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RoleCreateRoleCustomizationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleDeleteRoleCustomization(self, body, **kwargs):
        """
        Delete a role customization
        Delete a role customization, given a role customization name or forRoleId.  Privileges required:  `UPDATE` `NETWORK`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleDeleteRoleCustomization(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RoleDeleteRoleCustomization body: (required)
        :return: RoleDeleteRoleCustomizationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleDeleteRoleCustomization_with_http_info(body, **kwargs)
        else:
            (data) = self.roleDeleteRoleCustomization_with_http_info(body, **kwargs)
            return data

    def roleDeleteRoleCustomization_with_http_info(self, body, **kwargs):
        """
        Delete a role customization
        Delete a role customization, given a role customization name or forRoleId.  Privileges required:  `UPDATE` `NETWORK`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleDeleteRoleCustomization_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RoleDeleteRoleCustomization body: (required)
        :return: RoleDeleteRoleCustomizationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleDeleteRoleCustomization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleDeleteRoleCustomization`")


        collection_formats = {}

        resource_path = '/role/deleteRoleCustomization'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RoleDeleteRoleCustomizationResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleGetUserTypeRoles(self, body, **kwargs):
        """
        Get the roles defined for a user type
        Return the defined roles for a specified user type.  Privileges required:  `READ` `ENTERPRISE_USER`, or  `READ` `PROXY_USER`, or  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleGetUserTypeRoles(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RoleGetUserTypeRoles body: (required)
        :return: list[RoleGetUserTypeRolesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleGetUserTypeRoles_with_http_info(body, **kwargs)
        else:
            (data) = self.roleGetUserTypeRoles_with_http_info(body, **kwargs)
            return data

    def roleGetUserTypeRoles_with_http_info(self, body, **kwargs):
        """
        Get the roles defined for a user type
        Return the defined roles for a specified user type.  Privileges required:  `READ` `ENTERPRISE_USER`, or  `READ` `PROXY_USER`, or  `READ` `OPERATOR_USER`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleGetUserTypeRoles_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RoleGetUserTypeRoles body: (required)
        :return: list[RoleGetUserTypeRolesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleGetUserTypeRoles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleGetUserTypeRoles`")


        collection_formats = {}

        resource_path = '/role/getUserTypeRoles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[RoleGetUserTypeRolesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleSetEnterpriseDelegatedToEnterpriseProxy(self, body, **kwargs):
        """
        Grant enterprise access to partner
        Grants enterprise access to the specified enterprise proxy (partner). When an enterprise is delegated to a proxy, proxy users are granted access to view, configure, and troubleshoot Edges owned by the enterprise. As a security consideration, proxy Support users cannot view personally identifiable information.  Privileges required:  `UPDATE` `ENTERPRISE_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseDelegatedToEnterpriseProxy(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body3 body: (required)
        :return: RoleSetEnterpriseDelegatedToEnterpriseProxyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleSetEnterpriseDelegatedToEnterpriseProxy_with_http_info(body, **kwargs)
        else:
            (data) = self.roleSetEnterpriseDelegatedToEnterpriseProxy_with_http_info(body, **kwargs)
            return data

    def roleSetEnterpriseDelegatedToEnterpriseProxy_with_http_info(self, body, **kwargs):
        """
        Grant enterprise access to partner
        Grants enterprise access to the specified enterprise proxy (partner). When an enterprise is delegated to a proxy, proxy users are granted access to view, configure, and troubleshoot Edges owned by the enterprise. As a security consideration, proxy Support users cannot view personally identifiable information.  Privileges required:  `UPDATE` `ENTERPRISE_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseDelegatedToEnterpriseProxy_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body3 body: (required)
        :return: RoleSetEnterpriseDelegatedToEnterpriseProxyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleSetEnterpriseDelegatedToEnterpriseProxy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleSetEnterpriseDelegatedToEnterpriseProxy`")


        collection_formats = {}

        resource_path = '/role/setEnterpriseDelegatedToEnterpriseProxy'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RoleSetEnterpriseDelegatedToEnterpriseProxyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleSetEnterpriseDelegatedToOperator(self, body, **kwargs):
        """
        Grant enterprise access to network operator
        Grants enterprise access to the network operator. When an enterprise is delegated to the operator, operator users are permitted to view, configure, and troubleshoot Edges owned by the enterprise. As a security consideration, operator users cannot view personally identifiable information.  Privileges required:  `UPDATE` `ENTERPRISE_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseDelegatedToOperator(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body4 body: (required)
        :return: RoleSetEnterpriseDelegatedToOperatorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleSetEnterpriseDelegatedToOperator_with_http_info(body, **kwargs)
        else:
            (data) = self.roleSetEnterpriseDelegatedToOperator_with_http_info(body, **kwargs)
            return data

    def roleSetEnterpriseDelegatedToOperator_with_http_info(self, body, **kwargs):
        """
        Grant enterprise access to network operator
        Grants enterprise access to the network operator. When an enterprise is delegated to the operator, operator users are permitted to view, configure, and troubleshoot Edges owned by the enterprise. As a security consideration, operator users cannot view personally identifiable information.  Privileges required:  `UPDATE` `ENTERPRISE_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseDelegatedToOperator_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body4 body: (required)
        :return: RoleSetEnterpriseDelegatedToOperatorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleSetEnterpriseDelegatedToOperator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleSetEnterpriseDelegatedToOperator`")


        collection_formats = {}

        resource_path = '/role/setEnterpriseDelegatedToOperator'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RoleSetEnterpriseDelegatedToOperatorResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleSetEnterpriseProxyDelegatedToOperator(self, body, **kwargs):
        """
        Grant enterprise proxy access to network operator
        Grants enterprise proxy access to the network operator. When an enterprise proxy is delegated to the operator, operator users are granted access to view, configure and troubleshoot objects owned by the proxy.  Privileges required:  `UPDATE` `ENTERPRISE_PROXY_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseProxyDelegatedToOperator(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body5 body: (required)
        :return: RoleSetEnterpriseProxyDelegatedToOperatorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleSetEnterpriseProxyDelegatedToOperator_with_http_info(body, **kwargs)
        else:
            (data) = self.roleSetEnterpriseProxyDelegatedToOperator_with_http_info(body, **kwargs)
            return data

    def roleSetEnterpriseProxyDelegatedToOperator_with_http_info(self, body, **kwargs):
        """
        Grant enterprise proxy access to network operator
        Grants enterprise proxy access to the network operator. When an enterprise proxy is delegated to the operator, operator users are granted access to view, configure and troubleshoot objects owned by the proxy.  Privileges required:  `UPDATE` `ENTERPRISE_PROXY_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseProxyDelegatedToOperator_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body5 body: (required)
        :return: RoleSetEnterpriseProxyDelegatedToOperatorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleSetEnterpriseProxyDelegatedToOperator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleSetEnterpriseProxyDelegatedToOperator`")


        collection_formats = {}

        resource_path = '/role/setEnterpriseProxyDelegatedToOperator'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RoleSetEnterpriseProxyDelegatedToOperatorResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def roleSetEnterpriseUserManagementDelegatedToOperator(self, body, **kwargs):
        """
        Grant enterprise user access to the network operator
        When enterprise user management is delegated to the operator, operator users are granted enterprise-level user management capabilities (user creation, password resets, etc.).  Privileges required:  `UPDATE` `ENTERPRISE_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseUserManagementDelegatedToOperator(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body6 body: (required)
        :return: RoleSetEnterpriseUserManagementDelegatedToOperatorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.roleSetEnterpriseUserManagementDelegatedToOperator_with_http_info(body, **kwargs)
        else:
            (data) = self.roleSetEnterpriseUserManagementDelegatedToOperator_with_http_info(body, **kwargs)
            return data

    def roleSetEnterpriseUserManagementDelegatedToOperator_with_http_info(self, body, **kwargs):
        """
        Grant enterprise user access to the network operator
        When enterprise user management is delegated to the operator, operator users are granted enterprise-level user management capabilities (user creation, password resets, etc.).  Privileges required:  `UPDATE` `ENTERPRISE_DELEGATION`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.roleSetEnterpriseUserManagementDelegatedToOperator_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body6 body: (required)
        :return: RoleSetEnterpriseUserManagementDelegatedToOperatorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleSetEnterpriseUserManagementDelegatedToOperator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roleSetEnterpriseUserManagementDelegatedToOperator`")


        collection_formats = {}

        resource_path = '/role/setEnterpriseUserManagementDelegatedToOperator'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RoleSetEnterpriseUserManagementDelegatedToOperatorResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyGetSystemProperties(self, body, **kwargs):
        """
        Get all system properties
        Get a list of all configured system properties.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperties(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperties body: (required)
        :return: list[SystemPropertyGetSystemPropertiesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyGetSystemProperties_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyGetSystemProperties_with_http_info(body, **kwargs)
            return data

    def systemPropertyGetSystemProperties_with_http_info(self, body, **kwargs):
        """
        Get all system properties
        Get a list of all configured system properties.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperties_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperties body: (required)
        :return: list[SystemPropertyGetSystemPropertiesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyGetSystemProperties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyGetSystemProperties`")


        collection_formats = {}

        resource_path = '/systemProperty/getSystemProperties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[SystemPropertyGetSystemPropertiesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyGetSystemProperty(self, body, **kwargs):
        """
        Get system property
        Get a system property by object id or other attribute.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperty body: (required)
        :return: SystemPropertyGetSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyGetSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyGetSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyGetSystemProperty_with_http_info(self, body, **kwargs):
        """
        Get system property
        Get a system property by object id or other attribute.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperty body: (required)
        :return: SystemPropertyGetSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyGetSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyGetSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/getSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyGetSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyInsertOrUpdateSystemProperty(self, body, **kwargs):
        """
        Insert or update a system property
        Insert a system property. If property with the given name already exists, the property will be updated.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertOrUpdateSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertOrUpdateSystemProperty body: (required)
        :return: SystemPropertyInsertOrUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyInsertOrUpdateSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyInsertOrUpdateSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyInsertOrUpdateSystemProperty_with_http_info(self, body, **kwargs):
        """
        Insert or update a system property
        Insert a system property. If property with the given name already exists, the property will be updated.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertOrUpdateSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertOrUpdateSystemProperty body: (required)
        :return: SystemPropertyInsertOrUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyInsertOrUpdateSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyInsertOrUpdateSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/insertOrUpdateSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyInsertOrUpdateSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyInsertSystemProperty(self, body, **kwargs):
        """
        Insert a system property
        Insert a new system property.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertSystemProperty body: (required)
        :return: SystemPropertyInsertSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyInsertSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyInsertSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyInsertSystemProperty_with_http_info(self, body, **kwargs):
        """
        Insert a system property
        Insert a new system property.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertSystemProperty body: (required)
        :return: SystemPropertyInsertSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyInsertSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyInsertSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/insertSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyInsertSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyUpdateSystemProperty(self, body, **kwargs):
        """
        Update a system property
        Update an existing system property, provided an object `id` or other identifying attributes  Privileges required:  `UPDATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyUpdateSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyUpdateSystemProperty body: (required)
        :return: SystemPropertyUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyUpdateSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyUpdateSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyUpdateSystemProperty_with_http_info(self, body, **kwargs):
        """
        Update a system property
        Update an existing system property, provided an object `id` or other identifying attributes  Privileges required:  `UPDATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyUpdateSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyUpdateSystemProperty body: (required)
        :return: SystemPropertyUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyUpdateSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyUpdateSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/updateSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyUpdateSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def vcoInventoryAssociateEdge(self, body, **kwargs):
        """
        Return inventory items available at this VCO
        Assigns an edge in the inventory to an Enterprise. To perform the action, the edge should already be in a STAGING state. The assignment can be done at an enterprise level, without selecting a destination Edge profile. In such a case, the inventory edge is assigned to a staging profile within the Enterprise. Optionally a profile or destination edge can be assigned to this inventory edge. The edge in the inventory can be assigned to any profile. The inventory edge can be assigned to an Enterprise edge only if it is in a PENDING/REACTIVATION_PENDING state.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vcoInventoryAssociateEdge(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VcoInventoryAssociateEdge body: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vcoInventoryAssociateEdge_with_http_info(body, **kwargs)
        else:
            (data) = self.vcoInventoryAssociateEdge_with_http_info(body, **kwargs)
            return data

    def vcoInventoryAssociateEdge_with_http_info(self, body, **kwargs):
        """
        Return inventory items available at this VCO
        Assigns an edge in the inventory to an Enterprise. To perform the action, the edge should already be in a STAGING state. The assignment can be done at an enterprise level, without selecting a destination Edge profile. In such a case, the inventory edge is assigned to a staging profile within the Enterprise. Optionally a profile or destination edge can be assigned to this inventory edge. The edge in the inventory can be assigned to any profile. The inventory edge can be assigned to an Enterprise edge only if it is in a PENDING/REACTIVATION_PENDING state.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vcoInventoryAssociateEdge_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VcoInventoryAssociateEdge body: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vcoInventoryAssociateEdge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `vcoInventoryAssociateEdge`")


        collection_formats = {}

        resource_path = '/vcoInventory/associateEdge'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def vcoInventoryGetInventoryItems(self, body, **kwargs):
        """
        Return inventory items available at this VCO
        Retrieve all the inventory information available with this VCO. This method does not have required parameters. The optional parameters are  enterpriseId - Return inventory items belonging to that enterprise. If the caller context is an enterprise, this value will be taken from token itself. modifiedSince - Used to retrieve inventory items that have been modified in the last modifiedSince hours. with - an array containing the string \"edge\" to get details about details about the provisioned edge if any.  Privileges required:  `READ` `INVENTORY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vcoInventoryGetInventoryItems(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VcoInventoryGetInventoryItems body: (required)
        :return: VcoInventoryGetInventoryItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vcoInventoryGetInventoryItems_with_http_info(body, **kwargs)
        else:
            (data) = self.vcoInventoryGetInventoryItems_with_http_info(body, **kwargs)
            return data

    def vcoInventoryGetInventoryItems_with_http_info(self, body, **kwargs):
        """
        Return inventory items available at this VCO
        Retrieve all the inventory information available with this VCO. This method does not have required parameters. The optional parameters are  enterpriseId - Return inventory items belonging to that enterprise. If the caller context is an enterprise, this value will be taken from token itself. modifiedSince - Used to retrieve inventory items that have been modified in the last modifiedSince hours. with - an array containing the string \"edge\" to get details about details about the provisioned edge if any.  Privileges required:  `READ` `INVENTORY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vcoInventoryGetInventoryItems_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VcoInventoryGetInventoryItems body: (required)
        :return: VcoInventoryGetInventoryItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vcoInventoryGetInventoryItems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `vcoInventoryGetInventoryItems`")


        collection_formats = {}

        resource_path = '/vcoInventory/getInventoryItems'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VcoInventoryGetInventoryItemsResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
    def getSwagger(self):
        true=True
        false=False
        return {   "swagger": "2.0",   "info": {     "title": "Velocloud API",     "version": "3.2.19",     "contact": {       "name": "VeloCloud Networks, Inc.",       "url": "http://www.velocloud.com"     }   },   "basePath": "/portal/rest",   "schemes": [     "https"   ],   "produces": [     "application/json"   ],   "paths": {     "/login/operatorLogin": {       "post": {         "operationId": "login_operator_login",         "summary": "Authentication for an operator user",         "tags": [           "all",           "login"         ],         "parameters": [           {             "$ref": "#/parameters/auth_param"           }         ],         "responses": {           "200": {             "description": "If you are using an HTTP client that is configured to automatically follow HTTP redirects (e.g. Postman), a successful authentication request will cause your client to follow a HTTP 302 redirect to the portal 'Home' web page. Your session cookie may then be used to make API calls."           },           "302": {             "description": "An HTTP 302 response is returned on both successful and failed authentication attempts. If the response includes a Set-Cookie header specifying a non-empty velocloud.session cookie, authentication was successful and this cookie may be used to make API calls."           }         }       }     },     "/login/enterpriseLogin": {       "post": {         "operationId": "login_enterprise_login",         "summary": "Authentication for non-operator users",         "tags": [           "all",           "login"         ],         "parameters": [           {             "$ref": "#/parameters/auth_param"           }         ],         "responses": {           "200": {             "description": "If you are using an HTTP client that is configured to automatically follow HTTP redirects (e.g. Postman), a successful authentication request will cause your client to follow an HTTP 302 redirect to the portal 'Home' web page. Your session cookie may then be used to make API calls."           },           "302": {             "description": "An HTTP 302 response is returned on both successful and failed authentication attempts. If the response includes a Set-Cookie header specifying a non-empty velocloud.session cookie, authentication was successful and this cookie may be used to make API calls."           }         }       }     },     "/logout": {       "post": {         "operationId": "logout",         "summary": "Deactivate a given authorization cookie",         "tags": [           "all",           "login"         ],         "parameters": [],         "responses": {           "200": {             "description": "If you are using an HTTP client that is configured to automatically follow HTTP redirects (e.g. Postman), a successful logout request will cause your client to follow an HTTP 302 redirect to the portal login web page."           },           "302": {             "description": "An HTTP 302 (redirect) response is returned on both successful and failed logout attempts."           }         }       }     },     "/meta/{apiPath}": {       "post": {         "operationId": "meta",         "summary": "Get meta-data on any other API call",         "tags": [           "all",           "meta"         ],         "parameters": [           {             "name": "apiPath",             "in": "path",             "description": "the path to another api method, starting after /rest/",             "required": true,             "type": "string"           }         ],         "responses": {           "200": {             "description": "Request successful",             "schema": {               "type": "object",               "properties": {                 "privileges": {                   "type": "object"                 },                 "swagger": {                   "type": "object"                 }               }             }           },           "400": {             "$ref": "#/responses/generic_400"           }         }       }     },     "/clientDevice/setClientDeviceHostName": {       "post": {         "summary": "Set hostname for client device",         "description": "Set hostname for client device\n\nPrivileges required:\n\n`UPDATE` `CLIENT_DEVICE`",         "operationId": "set_client_device_host_name",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "CLIENT_DEVICE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "title": "set_client_device_host_name",               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "clientDeviceId": {                   "type": "integer"                 },                 "hostName": {                   "type": "string"                 },                 "macAddress": {                   "type": "string"                 },                 "ipAddress": {                   "type": "string"                 }               },               "required": [                 "enterpriseId",                 "hostName"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/set_client_device_host_name_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/cloneAndConvertConfiguration": {       "post": {         "summary": "Clone and convert a network based profile configuration to segment based profile configuration",         "description": "Clones an convert existing network configuration by configurationId. Accepts an enterpriseId or networkId to associate the new config with an enterprise or network. On success, returns an object the ID of the newly created configuration object.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE_PROFILE`, or\n\n`CREATE` `OPERATOR_PROFILE`",         "tags": [           "configuration",           "all"         ],         "operationId": "configuration_clone_and_convert_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "CREATE",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_clone_and_convert_configuration",               "properties": {                 "configurationId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "guestVLANSegmentObjectId": {                   "type": "integer"                 }               },               "required": [                 "configurationId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_clone_and_convert_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/cloneConfiguration": {       "post": {         "summary": "Clone configuration profile",         "description": "Clones the specified configuration (by `configurationId`) and all associated configuration modules. Accepts an `enterpriseId` or `networkId` to associate the new configuration with an enterprise or network. Select modules may also be specified. On success, returns the `id` of the newly created configuration object.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE_PROFILE`, or\n\n`CREATE` `OPERATOR_PROFILE`",         "tags": [           "configuration",           "all"         ],         "operationId": "configuration_clone_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "CREATE",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_clone_configuration",               "properties": {                 "configurationId": {                   "type": "integer"                 },                 "networkId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "version": {                   "type": "string"                 },                 "description": {                   "type": "string"                 }               },               "required": [                 "configurationId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_clone_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/cloneEnterpriseTemplate": {       "post": {         "summary": "Clone default enterprise configuration profile",         "description": "Creates a new enterprise configuration from the enterprise default configuration. On success, returns the `id` of the newly created configuration object.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE_PROFILE`, or\n\n`CREATE` `OPERATOR_PROFILE`",         "tags": [           "all",           "configuration"         ],         "operationId": "configuration_clone_enterprise_template",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "CREATE",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_clone_enterprise_template",               "properties": {                 "enterpriseId": {                   "type": "integer",                   "description": "Required if called from the operator or MSP context, identifies the target enterprise of the API call."                 },                 "configurationType": {                   "type": "string",                   "enum": [                     "SEGMENT_BASED",                     "NETWORK_BASED"                   ],                   "description": "If both network and segment based functionality is granted to the enterprise, chose which template type to clone. If not specified the type of the operator profile assigned to the enterprise will be used."                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_clone_enterprise_template_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/deleteConfiguration": {       "post": {         "summary": "Delete a configuration profile",         "description": "Delete an existing configuration profile. On success, returns an object indicating the number of rows deleted.\n\nPrivileges required:\n\n`DELETE` `ENTERPRISE_PROFILE`, or\n\n`DELETE` `OPERATOR_PROFILE`",         "tags": [           "all",           "configuration"         ],         "operationId": "configuration_delete_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "DELETE",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_delete_configuration",               "properties": {                 "id": {                   "type": "integer"                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_delete_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/getConfiguration": {       "post": {         "summary": "Get a configuration profile",         "description": "Get a configuration profile, optionally with module detail.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_PROFILE`, or\n\n`READ` `OPERATOR_PROFILE`",         "tags": [           "all",           "configuration"         ],         "operationId": "configuration_get_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "READ",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_get_configuration",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "modules",                       "edgeCount",                       "enterprises",                       "enterpriseCount",                       "counts"                     ]                   }                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_get_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/getConfigurationModules": {       "post": {         "summary": "List the modules that compose a configuration profile",         "description": "Retrieve a list of the configuration modules that compose the given configuration profile.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_PROFILE`, or\n\n`READ` `OPERATOR_PROFILE`",         "tags": [           "configuration",           "all"         ],         "operationId": "configuration_get_configuration_modules",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "READ",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_get_configuration_modules",               "properties": {                 "configurationId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "noData": {                   "type": "boolean"                 },                 "modules": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "imageUpdate",                       "controlPlane",                       "managementPlane",                       "firewall",                       "QOS",                       "deviceSettings",                       "WAN",                       "metaData",                       "properties"                     ]                   }                 }               },               "required": [                 "configurationId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "configuration_get_configuration_modules_result",               "type": "array",               "items": {                 "$ref": "#/definitions/configuration_get_configuration_modules_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/getRoutableApplications": {       "post": {         "summary": "Get first packet routable applications",         "description": "Gets all applications that are first packet routable. If called from an operator or MSP context, then `enterpriseId` is required. Optionally, specify `edgeId` to get the map for a specific Edge.\n\nPrivileges required:\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "configuration"         ],         "operationId": "configuration_get_routable_applications",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "VIEW_FLOW_STATS",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_get_routable_applications",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "edgeId": {                   "type": "integer"                 }               },               "required": [                 "edgeId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_get_routable_applications_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/insertConfigurationModule": {       "post": {         "summary": "Insert a new configuration module",         "description": "Insert a new configuration module into the given configuration profile.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_PROFILE`, or\n\n`UPDATE` `OPERATOR_PROFILE`",         "tags": [           "configuration",           "all"         ],         "operationId": "configuration_insert_configuration_module",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "UPDATE",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_insert_configuration_module",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string",                   "enum": [                     "imageUpdate",                     "controlPlane",                     "managementPlane",                     "firewall",                     "QOS",                     "deviceSettings",                     "WAN",                     "metaData",                     "properties"                   ]                 },                 "type": {                   "type": "string",                   "enum": [                     "ENTERPRISE",                     "OPERATOR",                     "GATEWAY"                   ]                 },                 "description": {                   "type": "string"                 },                 "data": {                   "type": "object"                 },                 "configurationId": {                   "type": "integer"                 },                 "version": {                   "type": "string"                 }               },               "required": [                 "name",                 "data",                 "configurationId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_insert_configuration_module_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/configuration/updateConfigurationModule": {       "post": {         "summary": "Update a configuration module",         "description": "Update an existing configuration module with the data. module data contained in the _update object.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_PROFILE`, or\n\n`UPDATE` `OPERATOR_PROFILE`",         "tags": [           "configuration",           "all"         ],         "operationId": "configuration_update_configuration_module",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_PROFILE",               "sufficient": true             },             {               "action": "UPDATE",               "object": "OPERATOR_PROFILE",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "configuration_update_configuration_module",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "basic": {                   "type": "boolean",                   "default": false                 },                 "_update": {                   "$ref": "#/definitions/configuration_module"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/configuration_update_configuration_module_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/configureActiveForReplication": {       "post": {         "summary": "Designate a standby Orchestrator for disaster recovery replication",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Configure the current Orchestrator to be active and the specified Orchestrator to be standby for Orchestrator disaster recovery replication. Required attributes are 1) standbyList, a single-entry array containing the standbyAddress and standbyUuid, 2) drVCOUser, a Orchestrator super user available on both the active and standby VCOs, and 3) drVCOPassword, the password of drVCOUser on the standby Orchestrator (unless the autoConfigStandby option is specified as false). The call sets up the active Orchestrator to allow replication from the standby and then (unless autoConfigStandby is false) makes a transitionToStandby API call to the specified standby, expected to have been previously placed in STANDBY_CANDIDATE state via prepareForStandby.  After this call, the active and standby VCOs should be polled via getReplicationStatus until they  both reach STANDBY_RUNNING drState (or a configuration error is reported).  (Note: the drVCOPassword is not persisted.)\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_configure_active_for_replication",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "disaster_recovery_configure_active_for_replication",               "properties": {                 "standbyList": {                   "type": "array",                   "items": {                     "title": "standby_vco_designee",                     "type": "object",                     "properties": {                       "standbyAddress": {                         "type": "string"                       },                       "standbyReplicationAddress": {                         "type": "string"                       },                       "standbyUuid": {                         "type": "string"                       }                     },                     "required": [                       "standbyAddress",                       "standbyUuid"                     ]                   }                 },                 "autoConfigStandby": {                   "type": "boolean",                   "default": true                 },                 "drVCOUser": {                   "type": "string"                 },                 "drVCOPassword": {                   "type": "string"                 }               },               "required": [                 "standbyList",                 "drVCOUser",                 "drVCOPassword"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_configure_active_for_replication_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/demoteActive": {       "post": {         "summary": "Demote current server from active to zombie",         "tags": [           "all",           "disasterRecovery"         ],         "description": "No input parameters are required.  The active server is expected to be in the drState FAILURE_GET_STANDBY_STATUS or FAILURE_MYSQL_ACTIVE_STATUS, meaning that DR protection had been engaged (with the last successful replication status observed at lastDRProtectedTime) but that active failed a health check since that time.  If the active server is in the drState STANDBY_RUNNING, meaning that it has detected no problems in interacting with the standby server, the operator can force demotion of the active using the optional parameter force passed with value of true; in this case, the operator must ensure the standby server has already been successfully promoted.\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_demote_active",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "disaster_recovery_demote_active",               "properties": {                 "force": {                   "type": "boolean",                   "default": false                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_demote_active_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/getReplicationBlob": {       "post": {         "summary": "Get the blob needed to configure replication on the standby",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Get from the active Orchestrator the blob needed to configure replication on the standby. Only used when configureActiveForReplication was called with autoConfigStandby set to false [true by default].\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_get_replication_blob",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/disaster_recovery_get_replication_blob"             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_get_replication_blob_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/getReplicationStatus": {       "post": {         "summary": "Get disaster recovery status",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Get disaster recovery replication status, optionally with client contact, state transition history, and storage information.  No input parameters are required.  Can optionally specify 1 or more of the following with parameters: clientContact,clientCount,stateHistory,storageInfo.\n\nPrivileges required:\n\n`READ` `REPLICATION`",         "operationId": "disaster_recovery_get_replication_status",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "disaster_recovery_get_replication_status",               "properties": {                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "clientContact",                       "stateHistory",                       "clientCount",                       "storageInfo"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_get_replication_status_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/prepareForStandby": {       "post": {         "summary": "Prepare current Orchestrator to be configured as a standby system",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Transitions the current Orchestrator to a quiesced state, ready to be configured as a standby system. No input parameters are required.  After this call, the Orchestrator will be restarted in standby mode. The caller should subsequently poll `getReplicationStatus` until `drState` is `STANDBY_CANDIDATE`.  This is the first step in configuring Orchestrator disaster recovery.\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_prepare_for_standby",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/disaster_recovery_prepare_for_standby"             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_prepare_for_standby_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/promoteStandbyToActive": {       "post": {         "summary": "Promote the current server to take over as the single standalone VCO",         "tags": [           "all",           "disasterRecovery"         ],         "description": "The current server is expected to be a standby in the drState FAILURE_MYSQL_STANDBY_STATUS, meaning that DR protection had been engaged (with the last successful replication status observed at lastDRProtectedTime) but that standby has been unable to replicate since that time. If the standby server is in the drState STANDBY_RUNNING, meaning that it has detected no problems in replicating from the active server, the operator can force promotion of the standby using the optional parameter force passed with value of true; in this case, the standby server will call demoteActive/force on the active.  The operator should, if possible, ensure the formerly active server is demoted by running demoteServer directly on that server if the standby server was unable to do so successfully.\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_promote_standby_to_active",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "disaster_recovery_promote_standby_to_active",               "properties": {                 "force": {                   "type": "boolean",                   "default": false                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_promote_standby_to_active_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/removeStandby": {       "post": {         "summary": "Unconfigure disaster recovery on the current server",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Unconfigure disaster recovery on the current server.  Also, make a best-effort call to removeStandby on the paired DR server. No input parameters are required.\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_remove_standby",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/disaster_recovery_remove_standby"             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_remove_standby_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/disasterRecovery/transitionToStandby": {       "post": {         "summary": "Configure current Orchestrator to transition to standby in disaster recovery active/standby pair.",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Configure current Orchestrator to transition to standby in disaster recovery active/standby pair. Requires parameter activeAccessFromStandby, which contains the data needed to configure standby. This data is produced by configureActiveForReplication, which by default, automatically calls transitionToStandby; an explicit call is only needed, with a blob obtained from getReplicationBlob, if configureActiveForReplication is called with autoConfigStandby set false.\n\nPrivileges required:\n\n`CREATE` `REPLICATION`",         "operationId": "disaster_recovery_transition_to_standby",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "REPLICATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "disaster_recovery_transition_to_standby",               "properties": {                 "activeAccessFromStandby": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/disaster_recovery_transition_to_standby_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/deleteEdge": {       "post": {         "summary": "Delete an edge",         "description": "Delete an edge by id.\n\nPrivileges required:\n\n`DELETE` `EDGE`",         "tags": [           "all",           "edge"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "EDGE"             }           ]         },         "operationId": "edge_delete_edge",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_delete_edge",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "ids": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "ids"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "type": "array",               "items": {                 "$ref": "#/definitions/edge_delete_edge_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/deleteEdgeBgpNeighborRecords": {       "post": {         "summary": "Delete edge BGP neighbor records",         "description": "Deletes BGP record(s) matching the given record keys (neighborIp) on the edges with the given IDs, if they exist.\n\nPrivileges required:\n\n`DELETE` `NETWORK_SERVICE`",         "tags": [           "all",           "edge"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "NETWORK_SERVICE"             }           ]         },         "operationId": "edge_delete_edge_bgp_neighbor_records",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_delete_edge_bgp_neighbor_records",               "properties": {                 "records": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "edgeId": {                         "type": "integer"                       },                       "neighborIp": {                         "type": "string"                       }                     }                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_delete_edge_bgp_neighbor_records_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/edgeCancelReactivation": {       "post": {         "summary": "Cancel a pending edge reactivation request",         "tags": [           "edge",           "all"         ],         "description": "Cancel a pending reactivation edge reactivation request.\n\nPrivileges required:\n\n`CREATE` `EDGE`",         "operationId": "edge_edge_cancel_reactivation",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_edge_cancel_reactivation",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "edgeId": {                   "type": "integer"                 }               },               "required": [                 "enterpriseId",                 "edgeId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_edge_cancel_reactivation_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/edgeProvision": {       "post": {         "summary": "Provision an edge",         "description": "Provision an edge prior to activation.\n\nPrivileges required:\n\n`CREATE` `EDGE`",         "operationId": "edge_edge_provision",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "EDGE"             }           ]         },         "tags": [           "edge",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_edge_provision",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "configurationId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "serialNumber": {                   "type": "string"                 },                 "modelNumber": {                   "type": "string",                   "enum": [                     "edge500",                     "edge5X0",                     "edge510",                     "edge840",                     "edge1000",                     "edge1000qat",                     "virtual"                   ]                 },                 "description": {                   "type": "string"                 },                 "site": {                   "$ref": "#/definitions/site_object"                 },                 "haEnabled": {                   "type": "boolean"                 },                 "generateCertificate": {                   "type": "boolean"                 },                 "subjectCN": {                   "type": "string"                 },                 "subjectO": {                   "type": "string"                 },                 "subjectOU": {                   "type": "string"                 },                 "challengePassword": {                   "type": "string"                 },                 "privateKeyPassword": {                   "type": "string"                 }               },               "required": [                 "configurationId",                 "modelNumber"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_edge_provision_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/edgeRequestReactivation": {       "post": {         "summary": "Reactivate an edge",         "description": "Update activation state for an edge to REACTIVATION_PENDING.\n\nPrivileges required:\n\n`CREATE` `EDGE`",         "tags": [           "edge",           "all"         ],         "operationId": "edge_edge_request_reactivation",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_edge_request_reactivation",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "edgeId": {                   "type": "integer"                 }               },               "required": [                 "enterpriseId",                 "edgeId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_edge_request_reactivation_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/getClientVisibilityMode": {       "post": {         "summary": "Get an edge's client visibility mode",         "description": "Retrieve an edge's client visibility mode.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "operationId": "edge_get_client_visibility_mode",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "forceEnterpriseContext": true,           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "tags": [           "edge",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_get_client_visibility_mode",               "properties": {                 "edgeId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 }               },               "required": [                 "edgeId"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "edge_get_client_visibility_mode_result",               "type": "object",               "properties": {                 "edgeClientVisibilityMode": {                   "type": "string",                   "enum": [                     "MAC",                     "IP"                   ]                 }               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/getEdge": {       "post": {         "summary": "Get edge",         "tags": [           "edge",           "all"         ],         "description": "Gets the specified Edge with optional link, site, configuration, certificate, or enterprise details. Supports queries by Edge `id`, `deviceId`, `activationKey`, and `logicalId`.\n\nPrivileges required:\n\n`READ` `EDGE`",         "operationId": "edge_get_edge",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_get_edge",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "logicalId": {                   "type": "string"                 },                 "activationKey": {                   "type": "string"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "recentLinks",                       "links",                       "serviceGroups",                       "site",                       "enterprise",                       "configuration",                       "configurationWithModules"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_get_edge_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/getEdgeConfigurationStack": {       "post": {         "summary": "Get an edge's configuration stack",         "description": "Retrieve an edge's complete configuration profile, with all modules included.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`READ` `ENTERPRISE_PROFILE`",         "operationId": "edge_get_edge_configuration_stack",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "READ",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "tags": [           "edge",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_get_edge_configuration_stack",               "properties": {                 "edgeId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 }               },               "required": [                 "edgeId"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "edge_get_edge_configuration_stack_result",               "type": "array",               "items": {                 "$ref": "#/definitions/edge_get_edge_configuration_stack_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/setEdgeEnterpriseConfiguration": {       "post": {         "summary": "Apply an enterprise configuration to an Edge",         "tags": [           "all",           "edge"         ],         "description": "Sets the enterprise configuration for the specified Edge (by `edgeId`).\n\nPrivileges required:\n\n`UPDATE` `EDGE`\n\n`UPDATE` `ENTERPRISE_PROFILE`",         "operationId": "edge_set_edge_enterprise_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "EDGE"             },             {               "action": "UPDATE",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_set_edge_enterprise_configuration",               "properties": {                 "edgeId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "configurationId": {                   "type": "integer"                 },                 "guestVLANSegmentObjectId": {                   "type": "integer"                 }               },               "required": [                 "edgeId",                 "configurationId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_set_edge_enterprise_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/setEdgeHandOffGateways": {       "post": {         "summary": "Set an edge's on-premise hand off gateways",         "description": "Set an edge's on-premise hand off gateways. A primary and secondary gateway are defined, primary is required, secondary is optional. All existing edge-gateway hand off relationships are moved and are replaced by the the specified primary and secondary gateways.\n\nPrivileges required:\n\n`UPDATE` `EDGE`",         "tags": [           "all",           "edge"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "EDGE"             }           ]         },         "operationId": "edge_set_edge_hand_off_gateways",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_set_edge_hand_off_gateways",               "properties": {                 "edgeId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "gateways": {                   "type": "object",                   "properties": {                     "primary": {                       "type": "integer"                     },                     "primaryIpsecDetail": {                       "$ref": "#/definitions/gateway_handoff_ipsec_gateway_detail"                     },                     "secondary": {                       "type": "integer"                     },                     "secondaryIpsecDetail": {                       "$ref": "#/definitions/gateway_handoff_ipsec_gateway_detail"                     }                   },                   "required": [                     "primary"                   ]                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/edge_set_edge_hand_off_gateways_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/setEdgeOperatorConfiguration": {       "post": {         "summary": "Apply an operator configuration to an Edge",         "tags": [           "all",           "edge"         ],         "description": "Set an Edge's operator configuration. This overrides any enterprise-assigned operator configuration and the network default operator configuration.\n\nPrivileges required:\n\n`UPDATE` `EDGE`\n\n`READ` `OPERATOR_PROFILE`",         "operationId": "edge_set_edge_operator_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "EDGE"             },             {               "action": "READ",               "object": "OPERATOR_PROFILE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_set_edge_operator_configuration",               "properties": {                 "edgeId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "configurationId": {                   "type": "integer"                 }               },               "required": [                 "edgeId",                 "configurationId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/edge_set_edge_operator_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/updateEdgeAdminPassword": {       "post": {         "summary": "Update edge's local UI authentication credentials",         "description": "Request an update to the edge's local UI authentication credentials. On success, returns a JSON object with the ID of the action queued, status for which can be queried using the edgeAction/getEdgeAction API\n\nPrivileges required:\n\n`UPDATE` `EDGE`\n\n`UPDATE` `ENTERPRISE_KEYS`",         "tags": [           "edge",           "all"         ],         "operationId": "edge_update_edge_admin_password",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "EDGE"             },             {               "action": "UPDATE",               "object": "ENTERPRISE_KEYS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_update_edge_admin_password",               "properties": {                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 },                 "password": {                   "type": "string"                 }               },               "required": [                 "id",                 "password"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/edge_update_edge_admin_password_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/updateEdgeAttributes": {       "post": {         "summary": "Update edge attributes",         "description": "Update basic edge attributes, including edge name, description, site information, or serial number.\n\nPrivileges required:\n\n`UPDATE` `EDGE`",         "tags": [           "edge",           "all"         ],         "operationId": "edge_update_edge_attributes",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_update_edge_attributes",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "_update": {                   "type": "object",                   "properties": {                     "site": {                       "$ref": "#/definitions/site_object"                     },                     "name": {                       "type": "string"                     },                     "description": {                       "type": "string"                     },                     "serialNumber": {                       "type": "string"                     }                   }                 }               },               "required": [                 "_update"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/edge_update_edge_attributes_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/edge/updateEdgeCredentialsByConfiguration": {       "post": {         "summary": "Update edge UI credentials by configuration id",         "tags": [           "edge",           "all"         ],         "description": "Request an update to the edge-local UI authentication credentials for all edges belonging to a configuration profile. On success, returns a JSON object containing a list of each of the action IDs queued.\n\nPrivileges required:\n\n`UPDATE` `EDGE`\n\n`UPDATE` `ENTERPRISE_KEYS`",         "operationId": "edge_update_edge_credentials_by_configuration",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "EDGE"             },             {               "action": "UPDATE",               "object": "ENTERPRISE_KEYS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "edge_update_edge_credentials_by_configuration",               "properties": {                 "configurationId": {                   "type": "integer"                 },                 "credentials": {                   "type": "object",                   "properties": {                     "username": {                       "type": "string"                     },                     "password": {                       "type": "string"                     }                   }                 }               },               "required": [                 "id",                 "credentials"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/edge_update_edge_credentials_by_configuration_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/deleteEnterprise": {       "post": {         "summary": "Delete an enterprise",         "description": "Delete the enterprise specified by the given id parameter. enterpriseId is also a valid alias for id.\n\nPrivileges required:\n\n`DELETE` `ENTERPRISE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_delete_enterprise",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_delete_enterprise",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_delete_enterprise_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/deleteEnterpriseGatewayRecords": {       "post": {         "summary": "Delete enterprise gateway record(s)",         "description": "Delete the enterprise gateway record(s) matching the given gateway id(s) and neighbor IP addresses.\n\nPrivileges required:\n\n`DELETE` `NETWORK_SERVICE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "NETWORK_SERVICE"             }           ]         },         "operationId": "enterprise_delete_enterprise_gateway_records",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_delete_enterprise_gateway_records",               "properties": {                 "records": {                   "type": "array",                   "items": {                     "$ref": "#/definitions/enterprise_delete_enterprise_delete_enterprise_gateway_records_record"                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_delete_enterprise_gateway_records_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/deleteEnterpriseNetworkAllocation": {       "post": {         "summary": "Delete an enterprise network allocation",         "description": "Delete an enterprise network allocation, by id.\n\nPrivileges required:\n\n`DELETE` `NETWORK_ALLOCATION`",         "operationId": "enterprise_delete_enterprise_network_allocation",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "NETWORK_ALLOCATION"             }           ]         },         "tags": [           "all",           "enterprise"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_delete_enterprise_network_allocation",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_delete_enterprise_network_allocation_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/deleteEnterpriseService": {       "post": {         "summary": "Delete an enterprise service",         "description": "Delete an enterprise service, by id.\n\nPrivileges required:\n\n`DELETE` `NETWORK_SERVICE`",         "operationId": "enterprise_delete_enterprise_service",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "NETWORK_SERVICE"             }           ]         },         "tags": [           "all",           "enterprise"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_delete_enterprise_service",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_delete_enterprise_service_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterprise": {       "post": {         "summary": "Get enterprise",         "description": "Retrieve enterprise data, with optional proxy (partner) detail.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "operationId": "enterprise_get_enterprise",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "title": "enterprise_get_enterprise",               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "enterpriseProxy"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseAddresses": {       "post": {         "summary": "Get enterprise IP address information",         "description": "Retrieve the public IP address information for the management and control entities associated with this enterprise, including Orchestrator(s), Gateway(s), and datacenter(s).\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "all",           "enterprise"         ],         "operationId": "enterprise_get_enterprise_addresses",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_addresses",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               },               "required": [                 "enterpriseId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_addresses_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_addresses_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseAlertConfigurations": {       "post": {         "summary": "Get the enterprise alert configuration",         "description": "Get the alert configurations associated with an enterprise.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_ALERT`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_ALERT"             }           ]         },         "operationId": "enterprise_get_enterprise_alert_configurations",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_alert_configurations",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_alert_configurations_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_alert_configurations_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseAlerts": {       "post": {         "summary": "Get triggered enterprise alerts",         "description": "Gets past triggered alerts for the specified enterprise.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_ALERT`",         "operationId": "enterprise_get_enterprise_alerts",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_ALERT"             }           ]         },         "tags": [           "all",           "enterprise"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_alerts",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "filter": {                   "type": "object",                   "properties": {                     "limit": {                       "type": "integer"                     }                   }                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "notifications"                     ]                   }                 }               },               "required": [                 "enterpriseId",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_alerts_result",               "type": "object",               "properties": {                 "metaData": {                   "$ref": "#/definitions/list_metadata"                 },                 "data": {                   "type": "array",                   "items": {                     "$ref": "#/definitions/enterprise_get_enterprise_alerts_result_item"                   }                 }               },               "required": [                 "metaData",                 "data"               ]             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseAllAlertsRecipients": {       "post": {         "summary": "List recipients currently receiving ALL enterprise alerts",         "description": "List the recipients currently configured to receive all alerts for an enterprise.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_ALERT`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_ALERT"             }           ]         },         "operationId": "enterprise_get_enterprise_all_alert_recipients",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_all_alert_recipients",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_all_alert_recipients_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseCapabilities": {       "post": {         "summary": "Get enterprise capabilities",         "description": "Retrieve a list of the enterprise capabilities currently enabled/disabled on an enterprise (e.g. BGP, COS mapping, PKI, etc.)\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_get_enterprise_capabilities",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_capabilities",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_capabilities_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseConfigurations": {       "post": {         "summary": "Get enterprise configuration profiles",         "description": "Retrieve a list of configuration profiles existing on an enterprise, with optional edge and/or module detail.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_PROFILE`",         "tags": [           "all",           "enterprise"         ],         "operationId": "enterprise_get_enterprise_configurations",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_configurations",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "configurationType": {                   "type": "string",                   "enum": [                     "NETWORK_BASED",                     "SEGMENT_BASED"                   ]                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edges",                       "modules",                       "edgeCount",                       "refs",                       "deviceSettings"                     ]                   }                 }               },               "required": [                 "enterpriseId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_configurations_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_configurations_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseEdges": {       "post": {         "summary": "Get edges associated with an enterprise",         "tags": [           "enterprise",           "all"         ],         "description": "Gets all Edges associated with the specified enterprise, including optional site, link, and configuration details.\n\nPrivileges required:\n\n`READ` `EDGE`",         "operationId": "enterprise_get_enterprise_edges",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_edges",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "site",                       "links",                       "recentLinks",                       "configuration"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_edges_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_edges_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseGatewayHandoff": {       "post": {         "summary": "Get enterprise gateway handoff configuration",         "description": "Get enterprise gateway handoff configuration.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER",             "ENTERPRISE_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_get_enterprise_gateway_handoff",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "title": "enterprise_get_enterprise_gateway_handoff",               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               },               "required": [                 "enterpriseId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_gateway_handoff_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseNetworkAllocation": {       "post": {         "summary": "Get an enterprise network allocation",         "description": "Retrieve a network allocation object by id.\n\nPrivileges required:\n\n`READ` `NETWORK_ALLOCATION`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "NETWORK_ALLOCATION"             }           ]         },         "operationId": "enterprise_get_enterprise_network_allocation",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_network_allocation",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edges",                       "edgeCount",                       "profileCount"                     ]                   }                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_network_allocation_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseNetworkAllocations": {       "post": {         "summary": "Get all network allocation objects defined on an enterprise",         "description": "Retrieve a list of all of the network allocations defined onthe given enterprise.\n\nPrivileges required:\n\n`READ` `NETWORK_ALLOCATION`",         "operationId": "enterprise_get_enterprise_network_allocations",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "NETWORK_ALLOCATION"             }           ]         },         "tags": [           "all",           "enterprise"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_network_allocations",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edges",                       "edgeCount",                       "profileCount"                     ]                   }                 }               },               "required": [                 "enterpriseId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_network_allocations_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_network_allocations_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseNetworkSegments": {       "post": {         "summary": "Get all network segment objects defined on an enterprise",         "description": "Retrieve a list of all of the network segments defined forthe given enterprise.\n\nPrivileges required:\n\n`READ` `NETWORK_ALLOCATION`",         "operationId": "enterprise_get_enterprise_network_segments",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "NETWORK_ALLOCATION"             }           ]         },         "tags": [           "all",           "enterprise"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_network_segments",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "name": "string"                 },                 "type": {                   "name": "string"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "profileCount",                       "edgeUsage",                       "configuration",                       "handoffUsage",                       "mpgUsage"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_network_segments_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_network_segments_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseProperty": {       "post": {         "summary": "Get enterprise property",         "description": "Get a enterprise property by object id or other attribute.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "operationId": "enterprise_get_enterprise_property",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "tags": [           "enterprise",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_property",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "id": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_property_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseRouteConfiguration": {       "post": {         "summary": "Get route advertisement and routing preferences policy",         "description": "Get enterprise route advertisement, routing peferences and OSPF, BGP advertisement policy as configured in the Overlay Flow Control table.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_PROFILE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "operationId": "enterprise_get_enterprise_route_configuration",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "title": "enterprise_get_enterprise_route_configuration",               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_route_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseRouteTable": {       "post": {         "summary": "Get the enterprise route table",         "description": "Get composite enterprise route table, optionally scoped by profile(s). The returned routes include static routes, directly connected routes and learned routes.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_PROFILE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "operationId": "enterprise_get_enterprise_route_table",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_route_table",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "profiles": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "id": {                         "type": "integer"                       },                       "name": {                         "type": "string"                       },                       "description": {                         "type": "string"                       }                     }                   }                 },                 "subnets": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "subnet": {                         "type": "string"                       },                       "preferredExits": {                         "type": "array",                         "items": {                           "$ref": "#/definitions/enterprise_route"                         }                       },                       "eligableExits": {                         "type": "array",                         "items": {                           "$ref": "#/definitions/enterprise_route"                         }                       }                     }                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_get_enterprise_route_table_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseServices": {       "post": {         "summary": "Get enterprise network service detail",         "description": "Get the network service JSON objects defined for an enterprise.\n\nPrivileges required:\n\n`READ` `NETWORK_SERVICE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "NETWORK_SERVICE"             }           ]         },         "operationId": "enterprise_get_enterprise_services",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_services",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "type": {                   "type": "string"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "profileCount",                       "edgeUsage",                       "configuration"                     ]                   }                 },                 "name": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_get_enterprise_services_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_services_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/getEnterpriseUsers": {       "post": {         "tags": [           "userMaintenance",           "all"         ],         "summary": "Get list of enterprise users by enterprise id",         "operationId": "enterprise_get_enterprise_users",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             },             {               "action": "READ",               "object": "ENTERPRISE_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_get_enterprise_users",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_get_enterprise_users_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         },         "description": "undefined\n\nPrivileges required:\n\n`READ` `ENTERPRISE`\n\n`READ` `ENTERPRISE_USER`"       }     },     "/enterprise/insertEnterprise": {       "post": {         "summary": "Create enterprise",         "description": "Creates a new enterprise, which is owned by the operator.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "operationId": "enterprise_insert_enterprise",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/enterprise_insert_enterprise"             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_enterprise_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertEnterpriseNetworkAllocation": {       "post": {         "summary": "Insert an enterprise network allocation",         "description": "Insert a new enterprise network allocation.\n\nPrivileges required:\n\n`CREATE` `NETWORK_ALLOCATION`",         "tags": [           "enterprise",           "all"         ],         "operationId": "enterprise_insert_enterprise_network_allocation",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "NETWORK_ALLOCATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_enterprise_network_allocation",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "data": {                   "type": "object",                   "properties": {                     "spaces": {                       "type": "array",                       "items": {                         "$ref": "#/definitions/enterprise_network_space"                       }                     }                   }                 }               },               "required": [                 "name"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_enterprise_network_allocation_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertEnterpriseNetworkSegment": {       "post": {         "summary": "Insert an enterprise network segment",         "description": "Insert a new enterprise network segment.\n\nPrivileges required:\n\n`CREATE` `NETWORK_ALLOCATION`",         "tags": [           "enterprise",           "all"         ],         "operationId": "enterprise_insert_enterprise_network_segment",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "NETWORK_ALLOCATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_enterprise_network_segment",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "type": {                   "type": "string",                   "enum": [                     "REGULAR",                     "CDE"                   ]                 },                 "data": {                   "type": "object",                   "properties": {                     "delegateToEnterprise": {                       "type": "boolean"                     },                     "delegateToEnterpriseProxy": {                       "type": "boolean"                     },                     "serviceVlan": {                       "type": "integer"                     }                   }                 }               },               "required": [                 "name",                 "type",                 "data"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_enterprise_network_segment_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertEnterpriseService": {       "post": {         "summary": "Insert a new enterprise service",         "description": "Insert a new enterprise service.\n\nPrivileges required:\n\n`CREATE` `NETWORK_SERVICE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "NETWORK_SERVICE"             }           ]         },         "operationId": "enterprise_insert_enterprise_service",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_enterprise_service",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "type": {                   "type": "string"                 },                 "name": {                   "type": "string"                 },                 "data": {                   "type": "object"                 }               },               "required": [                 "type",                 "name",                 "data"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_enterprise_service_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertEnterpriseUser": {       "post": {         "summary": "Insert an enterprise user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE_USER"             }           ]         },         "tags": [           "userMaintenance",           "all"         ],         "description": "Insert an enterprise user.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE_USER`",         "operationId": "enterprise_insert_enterprise_user",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/new_enterprise_user"             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_insert_enterprise_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertOrUpdateEnterpriseAlertConfigurations": {       "post": {         "summary": "Insert, update, or delete enterprise alert configurations",         "description": "Insert, update, or delete enterprise alert configurations. Returns the array of alert configurations submitted, with ids added for the entries that have been successfully inserted. If an entry is not successfully inserted or updated, an `error` property is included in the .\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE_ALERT`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE_ALERT"             }           ]         },         "operationId": "enterprise_insert_or_update_enterprise_alert_configurations",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_or_update_enterprise_alert_configurations",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "enterpriseAlertConfigurations": {                   "type": "array",                   "items": {                     "$ref": "#/definitions/enterprise_alert_configuration"                   }                 }               },               "required": [                 "enterpriseAlertConfigurations"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_or_update_enterprise_alert_configurations_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertOrUpdateEnterpriseCapability": {       "post": {         "summary": "Insert or update an enterprise capability",         "description": "Insert or update an enterprise capability.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_insert_or_update_enterprise_capability",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_or_update_enterprise_capability",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string",                   "enum": [                     "enableOSPF",                     "enableBGP",                     "enablePKI",                     "enableFwLogs",                     "enableVQM",                     "enableServiceRateLimiting",                     "enableCosMapping",                     "enableSegmentation",                     "enableNetworks",                     "enableEnterpriseAuth",                     "enablePremium",                     "edgeVnfs.enable",                     "edgeVnfs.securityVnf.paloAlto"                   ]                 },                 "value": {                   "type": "boolean"                 }               },               "required": [                 "name",                 "value"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_or_update_enterprise_capability_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertOrUpdateEnterpriseGatewayHandoff": {       "post": {         "summary": "Insert or update an enterprise gateway handoff configuration",         "description": "Insert or update an enterprise gateway handoff configuration.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_insert_or_update_enterprise_gateway_handoff",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/enterprise_insert_or_update_enterprise_gateway_handoff"             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_insert_or_update_enterprise_gateway_handoff_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/insertOrUpdateEnterpriseProperty": {       "post": {         "summary": "Insert or update an enterprise property",         "description": "Insert a enterprise property. If property with the given name already exists, the property will be updated.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "operationId": "enterprise_insert_or_update_enterprise_property",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "tags": [           "enterprise",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_or_update_enterprise_property",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "value": {                   "type": "string"                 },                 "dataType": {                   "type": "string",                   "enum": [                     "STRING",                     "NUMBER",                     "BOOLEAN",                     "JSON",                     "DATE",                     "DATETIME"                   ]                 },                 "isPassword": {                   "type": "boolean"                 },                 "description": {                   "type": "string"                 }               },               "required": [                 "enterpriseId",                 "name",                 "value"               ],               "example": {                 "enterpriseId": 1532,                 "name": "vco.enterprise.authentication.twoFactor.enable",                 "dataType": "BOOLEAN",                 "value": "true"               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_insert_or_update_enterprise_property_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/setEnterpriseAllAlertsRecipients": {       "post": {         "summary": "Set the recipients who should receive all alerts for an enterprise",         "description": "Set the recipients who should receive all alerts for an enterprise.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_ALERT`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_ALERT"             }           ]         },         "operationId": "enterprise_set_enterprise_all_alert_recipients",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_set_enterprise_all_alert_recipients",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "enterpriseUsers": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "enterpriseUserId": {                         "type": "integer"                       },                       "enabled": {                         "type": "boolean"                       },                       "smsEnabled": {                         "type": "boolean"                       },                       "emailEnabled": {                         "type": "boolean"                       },                       "mobileEnabled": {                         "type": "boolean"                       }                     }                   }                 },                 "smsEnabled": {                   "type": "boolean"                 },                 "smsList": {                   "type": "array",                   "items": {                     "type": "array",                     "items": {                       "type": "object",                       "properties": {                         "username": {                           "type": "string"                         },                         "mobilePhone": {                           "type": "string"                         },                         "email": {                           "type": "string"                         }                       }                     }                   }                 },                 "emailEnabled": {                   "type": "boolean"                 },                 "emailList": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "mobileEnabled": {                   "type": "boolean"                 },                 "mobileList": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_set_enterprise_all_alert_recipients_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterprise": {       "post": {         "summary": "Update an enterprise",         "description": "Update an enterprise provided an object id or name, and an _update object with the names and values of columns to be updated.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE`",         "tags": [           "enterprise",           "all"         ],         "operationId": "enterprise_update_enterprise",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "title": "enterprise_update_enterprise",               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "_update": {                   "$ref": "#/definitions/enterprise_object"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterpriseNetworkAllocation": {       "post": {         "summary": "Update an enterprise network allocation",         "description": "Update an enterprise network allocation, provided an object id and an _update object with the names and values of columns to be updated.\n\nPrivileges required:\n\n`UPDATE` `NETWORK_ALLOCATION`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "NETWORK_ALLOCATION"             }           ]         },         "operationId": "enterprise_update_enterprise_network_allocation",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_update_enterprise_network_allocation",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "_update": {                   "type": "object"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_network_allocation_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterpriseNetworkSegment": {       "post": {         "summary": "Update an enterprise network segment",         "description": "Update an enterprise network segment.\n\nPrivileges required:\n\n`UPDATE` `NETWORK_ALLOCATION`",         "tags": [           "enterprise",           "all"         ],         "operationId": "enterprise_update_enterprise_network_segment",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "NETWORK_ALLOCATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_insert_enterprise_network_segment",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 },                 "_update": {                   "type": "object",                   "properties": {                     "name": {                       "type": "string"                     },                     "description": {                       "type": "string"                     },                     "type": {                       "type": "string",                       "enum": [                         "REGULAR",                         "CDE"                       ]                     },                     "data": {                       "type": "object",                       "properties": {                         "segmentId": {                           "type": "integer"                         },                         "delegateToEnterprise": {                           "type": "boolean"                         },                         "delegateToEnterpriseProxy": {                           "type": "boolean"                         },                         "serviceVlan": {                           "type": "integer"                         }                       },                       "required": [                         "segmentId"                       ]                     }                   }                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_network_segment_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterpriseRoute": {       "post": {         "summary": "Update an enterprise route",         "description": "Update an enterprise route, set advertisement and cost values. Required parameters include the original route, as returned by enterprise/getEnterpriseRouteTable and the updated route with modified advertisement and route preference ordering.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_PROFILE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "operationId": "enterprise_update_enterprise_route",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_update_enterprise_route",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "original": {                   "$ref": "#/definitions/enterprise_route_collection"                 },                 "updated": {                   "$ref": "#/definitions/enterprise_route_collection"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_route_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterpriseRouteConfiguration": {       "post": {         "summary": "Update enterprise routing configuration",         "description": "Update enterprise routing configuration, by configuration id or logicalId.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_PROFILE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "operationId": "enterprise_update_enterprise_route_configuration",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_update_enterprise_route_configuration",               "required": [                 "data"               ],               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 },                 "data": {                   "type": "object",                   "required": [                     "edge",                     "hub",                     "partnerGateway",                     "routingPreference"                   ],                   "properties": {                     "edge": {                       "type": "object",                       "required": [                         "ospf",                         "bgp",                         "assigned"                       ],                       "properties": {                         "ospf": {                           "type": "object",                           "required": [                             "advertiseExternal",                             "advertiseInterArea",                             "advertiseIntraArea"                           ],                           "properties": {                             "advertiseExternal": {                               "type": "boolean",                               "default": false                             },                             "advertiseInterArea": {                               "type": "boolean",                               "default": true                             },                             "advertiseIntraArea": {                               "type": "boolean",                               "default": true                             }                           }                         },                         "bgp": {                           "type": "object",                           "required": [                             "advertiseInternal",                             "advertiseExternal",                             "advertiseNeighborTags"                           ],                           "properties": {                             "advertiseInternal": {                               "type": "boolean",                               "default": true                             },                             "advertiseExternal": {                               "type": "boolean",                               "default": false                             },                             "advertiseNeighborTags": {                               "type": "object",                               "required": [                                 "UPLINK"                               ],                               "properties": {                                 "UPLINK": {                                   "type": "boolean"                                 }                               }                             }                           }                         },                         "assigned": {                           "type": "object",                           "required": [                             "advertiseStatic",                             "advertiseConnected"                           ],                           "properties": {                             "advertiseStatic": {                               "type": "boolean",                               "default": true                             },                             "advertiseConnected": {                               "type": "boolean",                               "default": true                             }                           }                         }                       }                     },                     "hub": {                       "type": "object",                       "required": [                         "ospf",                         "bgp",                         "assigned"                       ],                       "properties": {                         "ospf": {                           "type": "object",                           "required": [                             "advertiseExternal",                             "advertiseInterArea",                             "advertiseIntraArea"                           ],                           "properties": {                             "advertiseExternal": {                               "type": "boolean",                               "default": false                             },                             "advertiseInterArea": {                               "type": "boolean",                               "default": true                             },                             "advertiseIntraArea": {                               "type": "boolean",                               "default": true                             }                           }                         },                         "bgp": {                           "type": "object",                           "required": [                             "advertiseInternal",                             "advertiseExternal",                             "advertiseNeighborTags"                           ],                           "properties": {                             "advertiseInternal": {                               "type": "boolean",                               "default": true                             },                             "advertiseExternal": {                               "type": "boolean",                               "default": false                             },                             "advertiseNeighborTags": {                               "type": "object",                               "required": [                                 "UPLINK"                               ],                               "properties": {                                 "UPLINK": {                                   "type": "boolean"                                 }                               }                             }                           }                         },                         "assigned": {                           "type": "object",                           "required": [                             "advertiseStatic",                             "advertiseConnected"                           ],                           "properties": {                             "advertiseStatic": {                               "type": "boolean",                               "default": true                             },                             "advertiseConnected": {                               "type": "boolean",                               "default": true                             }                           }                         }                       }                     },                     "partnerGateway": {                       "type": "object",                       "required": [                         "bgp",                         "assigned"                       ],                       "properties": {                         "bgp": {                           "type": "object",                           "required": [                             "advertiseExternal"                           ],                           "properties": {                             "advertiseExternal": {                               "type": "boolean",                               "default": true                             }                           }                         },                         "assigned": {                           "type": "object",                           "required": [                             "advertiseStatic"                           ],                           "properties": {                             "advertiseStatic": {                               "type": "boolean",                               "default": true                             }                           }                         }                       }                     },                     "routingPreference": {                       "type": "array",                       "items": {                         "type": "object",                         "required": [                           "entity",                           "allow"                         ],                         "properties": {                           "entity": {                             "type": "string",                             "enum": [                               "EDGE",                               "HUB",                               "ROUTER",                               "PARTNER"                             ]                           },                           "allow": {                             "type": "boolean"                           }                         }                       }                     }                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_route_configuration_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterpriseSecurityPolicy": {       "post": {         "summary": "Update enterprise security policy",         "description": "Update enterprise security policy in accordance with to the passed ipsec settings.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_PROFILE`",         "tags": [           "enterprise",           "all"         ],         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_PROFILE"             }           ]         },         "operationId": "enterprise_update_enterprise_security_policy",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_update_enterprise_security_policy",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "ipsec": {                   "type": "object",                   "properties": {                     "hash": {                       "type": "string",                       "enum": [                         "MD5",                         "SHA_1",                         "SHA_256"                       ]                     },                     "encryption": {                       "type": "string",                       "enum": [                         "AES_128_CBC",                         "AES_256_CBC"                       ]                     },                     "diffieHellmanGroup": {                       "type": "string",                       "enum": [                         "GROUP_2",                         "GROUP_5",                         "GROUP_14"                       ]                     },                     "perfectForwardSecrecy": {                       "type": "string",                       "enum": [                         "DISABLED",                         "GROUP_2",                         "GROUP_5"                       ]                     }                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_security_policy_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterprise/updateEnterpriseService": {       "post": {         "summary": "Update an enterprise service",         "description": "Update the enterprise service with the given id according to the settings specified by the _update field.\n\nPrivileges required:\n\n`UPDATE` `NETWORK_SERVICE`",         "tags": [           "all",           "enterprise"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "NETWORK_SERVICE"             }           ]         },         "operationId": "enterprise_update_enterprise_service",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_update_enterprise_service",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 },                 "_update": {                   "type": "object",                   "properties": {                     "data": {                       "type": "object"                     }                   },                   "required": [                     "data"                   ]                 }               },               "required": [                 "id",                 "_udpate"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_update_enterprise_service_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/deleteEnterpriseProxyUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Delete an enterprise proxy admin user",         "description": "Delete an enterprise proxy user by id or username. Note that `enterpriseProxyId` is a required parameter when invoking this method as an operator or partner user.\n\nPrivileges required:\n\n`DELETE` `PROXY_USER`",         "operationId": "enterprise_proxy_delete_enterprise_proxy_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "PROXY_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_delete_enterprise_proxy_user",               "properties": {                 "enterpriseProxyId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_proxy_delete_enterprise_proxy_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/getEnterpriseProxyEdgeInventory": {       "post": {         "summary": "Get a list of all partner enterprises and edge inventory associated with each enterprise",         "description": "Get  partner enterprises and their edge inventory.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "all",           "enterpriseProxy"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_proxy_get_enterprise_proxy_edge_inventory",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_get_enterprise_proxy_edge_inventory",               "properties": {                 "enterpriseProxyId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "enterprise_proxy_get_enterprise_proxy_edge_inventory_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_proxy_get_enterprise_proxy_edge_inventory_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/getEnterpriseProxyEnterprises": {       "post": {         "summary": "Get a list of all partner enterprises",         "description": "Get all partner enterprises, optionally including all edges or edge counts.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "all",           "enterpriseProxy"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "operationId": "enterprise_proxy_get_enterprise_proxy_enterprises",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_get_enterprise_proxy_enterprises",               "properties": {                 "enterpriseProxyId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edges",                       "edgeCount"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "enterprise_proxy_get_enterprise_proxy_enterprises_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_proxy_get_enterprise_proxy_enterprises_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/getEnterpriseProxyGatewayPools": {       "post": {         "summary": "Get list of gateway pools",         "tags": [           "all",           "enterpriseProxy"         ],         "description": "Get list of gateway pools associated with an enterprise proxy, optionally with lists of gateways or enterprises belonging to each pool.\n\nPrivileges required:\n\n`READ` `GATEWAY`",         "operationId": "enterprise_proxy_get_enterprise_proxy_gateway_pools",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_get_enterprise_proxy_gateway_pools",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "gateways",                       "enterprises"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "enterprise_proxy_get_enterprise_proxy_gateway_pools_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_proxy_get_enterprise_proxy_gateway_pools_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/getEnterpriseProxyOperatorProfiles": {       "post": {         "summary": "Get the operator profiles associated with a partner",         "description": "Get the operator profiles associated with a proxy (MSP), as assigned by the operator.\n\nPrivileges required:\n\n`READ` `OPERATOR_PROFILE`",         "tags": [           "all",           "enterpriseProxy"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "OPERATOR_PROFILE"             }           ]         },         "operationId": "enterprise_proxy_get_enterprise_proxy_operator_profiles",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_get_enterprise_proxy_operator_profiles",               "properties": {                 "enterpriseProxyId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edges",                       "edgeCount",                       "modules",                       "enterprises"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "enterprise_proxy_get_enterprise_proxy_operator_profiles_result",               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_proxy_get_enterprise_proxy_operator_profiles_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/getEnterpriseProxyUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Get an enterprise proxy user",         "description": "Get an enterprise proxy user by id or username.\n\nPrivileges required:\n\n`READ` `PROXY_USER`\n\n`READ` `PROXY`",         "operationId": "enterprise_proxy_get_enterprise_proxy_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "PROXY_USER"             },             {               "action": "READ",               "object": "PROXY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_get_enterprise_proxy_user",               "properties": {                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_proxy_get_enterprise_proxy_user"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/getEnterpriseProxyUsers": {       "post": {         "tags": [           "userMaintenance",           "all"         ],         "summary": "Get all enterprise proxy admin users",         "operationId": "enterprise_proxy_get_enterprise_proxy_users",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             },             {               "action": "READ",               "object": "PROXY_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_get_enterprise_proxy_users",               "properties": {                 "enterpriseProxyId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_proxy_get_enterprise_proxy_users_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         },         "description": "undefined\n\nPrivileges required:\n\n`READ` `ENTERPRISE`\n\n`READ` `PROXY_USER`"       }     },     "/enterpriseProxy/insertEnterpriseProxyEnterprise": {       "post": {         "summary": "Insert a new enterprise owned by an MSP",         "description": "Insert an enterprise owned by an MSP. Whereas the `insertEnterprise` method will create an enterprise in the global or network context with no MSP association, this method will create one owned by an MSP, as determined by the credentials of the caller.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE`",         "tags": [           "enterpriseProxy",           "all"         ],         "operationId": "enterprise_proxy_insert_enterprise_proxy_enterprise",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/enterprise_proxy_insert_enterprise_proxy_enterprise"             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/enterprise_proxy_insert_enterprise_proxy_enterprise_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/insertEnterpriseProxyUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Create a new partner admin user",         "description": "Create a new partner admin user\n\nPrivileges required:\n\n`CREATE` `PROXY_USER`",         "operationId": "enterprise_proxy_insert_enterprise_proxy_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "MSP_USER",             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "PROXY_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/new_enterprise_proxy_user"             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_proxy_insert_enterprise_proxy_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseProxy/updateEnterpriseProxyUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Update an enterprise proxy admin user",         "description": "Update an enterprise proxy admin user\n\nPrivileges required:\n\n`UPDATE` `PROXY_USER`",         "operationId": "enterprise_proxy_update_enterprise_proxy_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "allowPrivilegeToSelf": "MSP_USER",           "requirePrivileges": [             {               "action": "UPDATE",               "object": "PROXY_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_proxy_update_enterprise_proxy_user",               "properties": {                 "_update": {                   "$ref": "#/definitions/enterprise_user_with_role_info"                 },                 "id": {                   "type": "integer"                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               },               "required": [                 "_update"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_proxy_update_enterprise_proxy_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseUser/deleteEnterpriseUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Delete an enterprise user.",         "description": "Delete an enterprise user by id or username. Note that `enterpriseId` is a required parameter when invoking this method as an operator or partner user.\n\nPrivileges required:\n\n`DELETE` `ENTERPRISE_USER`",         "operationId": "enterprise_user_delete_enterprise_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "ENTERPRISE_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_user_delete_enterprise_user",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_user_delete_enterprise_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseUser/getEnterpriseUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Get an enterprise user",         "description": "Get an enterprise user by id or username.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_USER`",         "operationId": "enterprise_user_get_enterprise_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "allowPrivilegeToSelf": "ENTERPRISE_USER",           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_user_get_enterprise_user",               "properties": {                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_user_get_enterprise_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/enterpriseUser/updateEnterpriseUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Update an enterprise user",         "description": "Update an enterprise user provided an object `id` or other identifying attributes, and an `_update` object with the names and values of columns to be updated.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_USER`, or\n\n`UPDATE` `OPERATOR_USER`",         "operationId": "enterprise_user_update_enterprise_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "allowPrivilegeToSelf": "ENTERPRISE_USER",           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_USER",               "sufficient": true             },             {               "action": "UPDATE",               "object": "OPERATOR_USER",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "enterprise_user_update_enterprise_user",               "properties": {                 "_update": {                   "$ref": "#/definitions/enterprise_user_with_role_info"                 },                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               },               "required": [                 "_update"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/enterprise_user_update_enterprise_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/event/getEnterpriseEvents": {       "post": {         "summary": "Get Edge events",         "description": "Gets Edge events in an enterprise or Edge context. Returns an array of Edge events sorted by `eventTime`.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_EVENT`",         "tags": [           "event",           "all"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_EVENT"             }           ]         },         "operationId": "event_get_enterprise_events",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "event_get_enterprise_events",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "filter": {                   "title": "filter",                   "type": "object",                   "properties": {                     "limit": {                       "type": "integer"                     }                   }                 },                 "edgeId": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/event_get_enterprise_events_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/event/getOperatorEvents": {       "post": {         "summary": "Get operator events",         "description": "Gets operator events by network ID (optional). If not specified, will be taken for the caller's security context. Optionally, use a filter object to limit the number of events returned. Additionally, specify a time interval with an interval object. If no end date is specified, then the default is the current date. Specify a `gatewayId` to filter events for the specified gateway.\n\nPrivileges required:\n\n`READ` `OPERATOR_EVENT`",         "tags": [           "event",           "all"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "OPERATOR_EVENT"             }           ]         },         "operationId": "event_get_operator_events",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "event_get_operator_events",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "filter": {                   "title": "filter",                   "type": "object",                   "properties": {                     "limit": {                       "type": "integer"                     }                   }                 },                 "gatewayId": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/event_get_operator_events_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/firewall/getEnterpriseFirewallLogs": {       "post": {         "summary": "Get enterprise firewall logs",         "description": "Gets firewall logs for the specified enterprise.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FIREWALL_LOGS` `undefined`",         "tags": [           "firewall",           "all"         ],         "operationId": "firewall_get_enterprise_firewall_logs",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FIREWALL_LOGS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "title": "firewall_get_enterprise_firewall_logs",               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "filter": {                   "type": "object",                   "properties": {                     "limit": {                       "type": "integer"                     }                   }                 },                 "rules": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "sourceIps": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "destIps": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "edges": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "rules"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/firewall_get_enterprise_firewall_logs_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/gateway/deleteGateway": {       "post": {         "summary": "Delete a gateway",         "description": "Delete a gateway by id.\n\nPrivileges required:\n\n`DELETE` `GATEWAY`",         "tags": [           "gateway",           "all"         ],         "operationId": "gateway_delete_gateway",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "gateway_delete_gateway",               "properties": {                 "id": {                   "type": "integer"                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/gateway_delete_gateway_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/gateway/gatewayProvision": {       "post": {         "summary": "Provision a gateway",         "description": "Provision a gateway into an operator network.\n\nPrivileges required:\n\n`CREATE` `GATEWAY`",         "tags": [           "gateway",           "all"         ],         "operationId": "gateway_gateway_provision",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "gateway_gateway_provision",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "ipAddress": {                   "type": "string"                 },                 "gatewayPoolId": {                   "type": "integer"                 },                 "dnsName": {                   "type": "string"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "isLoadBalanced": {                   "type": "boolean"                 },                 "privateIpAddress": {                   "type": "string"                 },                 "roles": {                   "$ref": "#/definitions/gateway_roles_object"                 },                 "site": {                   "$ref": "#/definitions/site_object"                 }               },               "required": [                 "networkId",                 "ipAddress"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/gateway_gateway_provision_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/gateway/getGatewayEdgeAssignments": {       "post": {         "summary": "Get edge assignments for a gateway",         "tags": [           "gateway",           "all"         ],         "description": "Get edge assignments for a gateway\n\nPrivileges required:\n\n`READ` `GATEWAY`",         "operationId": "gateway_get_gateway_edge_assignments",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "gateway_get_gateway_edge_assignments",               "properties": {                 "gatewayId": {                   "type": "integer"                 }               },               "required": [                 "gatewayId"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "gateway_get_gateway_edge_assignments_result",               "type": "array",               "items": {                 "$ref": "#/definitions/gateway_get_gateway_edge_assignments_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/gateway/updateGatewayAttributes": {       "post": {         "summary": "Update gateway attributes",         "description": "Update gateway attributes (name, ipAddress, on-premise parametrization and description) and associated site attributes\n\nPrivileges required:\n\n`UPDATE` `GATEWAY`",         "tags": [           "gateway",           "all"         ],         "operationId": "gateway_update_gateway_attributes",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "gateway_update_gateway_attributes",               "properties": {                 "id": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "site": {                   "$ref": "#/definitions/site_object"                 },                 "ipsecGatewayDetail": {                   "type": "object",                   "properties": {                     "ipsecGatewayAddress": {                       "type": "string"                     },                     "strictHostCheck": {                       "type": "boolean"                     },                     "strictHostCheckDN": {                       "type": "string"                     }                   }                 },                 "handOffDetail": {                   "$ref": "#/definitions/gateway_handoff_detail"                 },                 "roles": {                   "$ref": "#/definitions/gateway_roles_object"                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/gateway_update_gateway_attributes_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/linkQualityEvent/getLinkQualityEvents": {       "post": {         "summary": "Get link quality data",         "description": "Returns link quality scores per link for a particular edge within a time interval. Rolls up link quality events to provide an aggregate score for the edge. Returns an empty array if no link quality events are available in the given timeframe.\n\nPrivileges required:\n\n`READ` `EDGE`",         "tags": [           "linkQualityEvent",           "all"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             }           ]         },         "operationId": "link_quality_event_get_link_quality_events",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "link_quality_event_get_link_quality_events",               "properties": {                 "edgeId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "maxSamples": {                   "type": "integer"                 },                 "individualScores": {                   "type": "boolean"                 },                 "minutesPerSample": {                   "type": "integer"                 },                 "debug": {                   "type": "boolean"                 }               },               "required": [                 "edgeId",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/link_quality_event_get_link_quality_events_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeAppLinkMetrics": {       "post": {         "summary": "Get flow metric aggregate data by link",         "description": "Fetch flow metric summaries for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_app_link_metrics",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_app_link_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_app_link_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_app_link_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeAppLinkSeries": {       "post": {         "summary": "Get flow metric time series data by link",         "description": "Fetch flow metric time series for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_app_link_series",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_app_link_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "links": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_app_link_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_app_link_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeAppMetrics": {       "post": {         "summary": "Get flow metric aggregate data by application",         "description": "Fetch flow metric summaries for the given time interval by application. On success, this method returns an array of flow data where each entry corresponds to a single application. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_app_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_app_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "applications": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "with": {                   "type": "string",                   "enum": [                     "category",                     "linkId"                   ]                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_app_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_app_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeAppSeries": {       "post": {         "summary": "Get flow metric time series data by application",         "description": "Fetch flow metric time series for the given time interval by application. On success, this method returns an array of flow data where each entry corresponds to a single application. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_app_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_app_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "maxSamples": {                   "type": "integer"                 },                 "applications": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_app_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_app_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeCategoryMetrics": {       "post": {         "summary": "Get flow metric aggregate data by application category",         "description": "Fetch flow metric summaries for the given time interval by application category. On success, this method returns an array of flow data where each entry corresponds to a category of application traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_category_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_category_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "categories": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_category_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_category_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeCategorySeries": {       "post": {         "summary": "Get flow metric time series data by application category",         "description": "Fetch flow metric time series for the given time interval by application category. On success, this method returns an array of flow data where each entry corresponds to a category of application traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_category_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_category_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "maxSamples": {                   "type": "integer"                 },                 "categories": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_category_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_category_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeDestMetrics": {       "post": {         "summary": "Get flow metric aggregate data by destination",         "description": "Fetch flow metric summaries for the given time interval by destination. On success, this method returns an array of flow data where each entry corresponds to a distinct traffic destination. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_dest_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_dest_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "attribute": {                   "type": "string",                   "enum": [                     "destDomain",                     "destIp",                     "destFQDN"                   ]                 },                 "destinations": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_dest_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_dest_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeDestSeries": {       "post": {         "summary": "Get flow metric time series data by destination",         "description": "Fetch flow metric time series for the given time interval by destination. On success, this method returns an array of flow data where each entry corresponds to a distinct traffic destination. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_dest_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_dest_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "attribute": {                   "type": "string",                   "enum": [                     "destDomain",                     "destIp",                     "destFQDN"                   ]                 },                 "destinations": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_dest_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_dest_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeDeviceMetrics": {       "post": {         "summary": "Get flow metric aggregate data by client device",         "description": "Fetch flow metric summaries for the given time interval by client device. On success, this method returns an array of flow data where each entry corresponds to a distinct device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_USER_IDENTIFIABLE_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_device_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_USER_IDENTIFIABLE_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_device_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "devices": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_device_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_device_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeDeviceSeries": {       "post": {         "summary": "Get flow metric time series data by client device",         "description": "Fetch flow metric time series for the given time interval by client device. On success, this method returns an array of flow data where each entry corresponds to a distinct device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_USER_IDENTIFIABLE_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_device_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_USER_IDENTIFIABLE_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_device_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "maxSamples": {                   "type": "integer"                 },                 "devices": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_device_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_device_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeLinkMetrics": {       "post": {         "summary": "Get advanced flow metric aggregate data by link",         "description": "Fetch advanced flow metric summaries for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_link_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_link_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "type": "array",                   "items": {                     "$ref": "#/definitions/edge_link_metric"                   }                 },                 "sort": {                   "$ref": "#/definitions/edge_link_metric"                 },                 "limit": {                   "type": "integer"                 },                 "links": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_link_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_link_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeLinkSeries": {       "post": {         "summary": "Get advanced flow metric time series data by link",         "description": "Fetch advanced flow metric time series for the given time interval by link. On success, this method returns an array of flow data where each entry corresponds to a link on the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_link_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_link_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "type": "array",                   "items": {                     "$ref": "#/definitions/edge_link_metric"                   }                 },                 "sort": {                   "$ref": "#/definitions/edge_link_metric"                 },                 "limit": {                   "type": "integer"                 },                 "links": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_link_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_link_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeOsMetrics": {       "post": {         "summary": "Get flow metric aggregate data by client OS",         "description": "Fetch flow metric summaries for the given time interval by client OS. On success, this method returns an array of flow data where each entry corresponds to a distinct OS on a client device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_os_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_os_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "os": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_os_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_os_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeOsSeries": {       "post": {         "summary": "Get flow metric time series data by client OS",         "description": "Fetch flow metric time series for the given time interval by client OS. On success, this method returns an array of flow data where each entry corresponds to a distinct OS on a client device. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_os_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_os_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "maxSamples": {                   "type": "integer"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "os": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_os_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_os_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeSegmentMetrics": {       "post": {         "summary": "Get flow metric aggregate data by segment Id",         "description": "Fetch flow metric summaries for the given time interval by segment id. On success, this method returns an array of flow data where each entry corresponds to a segment id traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_segment_metrics",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_segment_metrics",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "segments": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_segment_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_segment_metrics_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/metrics/getEdgeSegmentSeries": {       "post": {         "summary": "Get flow metric time series data by segment id",         "description": "Fetch flow metric time series for the given time interval by segment id. On success, this method returns an array of flow data where each entry corresponds to a segment id of traffic that has traversed the given edge. In the request body, the `id` and `edgeId` property names are interchangeable. The `enterpriseId` property is required when this method is invoked in the operator context.\n\nPrivileges required:\n\n`READ` `EDGE`\n\n`VIEW_FLOW_STATS` `undefined`",         "tags": [           "all",           "metrics"         ],         "operationId": "metrics_get_edge_segment_series",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             },             {               "action": "VIEW_FLOW_STATS"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "metrics_get_edge_segment_series",               "properties": {                 "id": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "interval": {                   "$ref": "#/definitions/interval"                 },                 "metrics": {                   "$ref": "#/definitions/basic_metrics"                 },                 "sort": {                   "$ref": "#/definitions/basic_metric"                 },                 "limit": {                   "type": "integer"                 },                 "maxSamples": {                   "type": "integer"                 },                 "segments": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               },               "required": [                 "id",                 "interval"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "metrics_get_edge_segment_series_result",               "type": "array",               "items": {                 "$ref": "#/definitions/metrics_get_edge_segment_series_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/monitoring/getAggregateEdgeLinkMetrics": {       "post": {         "summary": "Get aggregate Edge link metrics across enterprises",         "tags": [           "all",           "monitoring"         ],         "description": "Gets aggregate link metrics for the request interval for all active links across all enterprises, where a link is considered to be active if an Edge has reported any activity for it in the last 24 hours. On success, returns an array of network utilization metrics, one per link.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`\n\n`READ` `EDGE`",         "operationId": "monitoring_get_aggregate_edge_link_metrics",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER",             "ENTERPRISE_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             },             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "monitoring_get_aggregate_edge_link_metrics",               "properties": {                 "enterprises": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 },                 "metrics": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "interval": {                   "$ref": "#/definitions/interval"                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "title": "monitoring_get_aggregate_edge_link_metrics_result",               "type": "array",               "items": {                 "$ref": "#/definitions/monitoring_get_aggregate_edge_link_metrics_result_item"               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/monitoring/getAggregateEnterpriseEvents": {       "post": {         "summary": "Get events across all enterprises",         "tags": [           "all",           "monitoring"         ],         "description": "Gets events across all enterprises in a paginated list. When called in the MSP/Partner context, queries only enterprises managed by the MSP.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`\n\n`READ` `EDGE`",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             },             {               "action": "READ",               "object": "EDGE"             }           ]         },         "operationId": "monitoring_get_aggregate_enterprise_events",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "monitoring_get_aggregate_enterprise_events",               "properties": {                 "detail": {                   "type": "boolean"                 },                 "interval": {                   "type": "object",                   "required": [                     "start"                   ],                   "properties": {                     "start": {                       "type": "string",                       "format": "date"                     },                     "end": {                       "type": "string",                       "format": "date"                     }                   }                 },                 "filter": {                   "type": "object",                   "required": [                     "limit"                   ],                   "properties": {                     "limit": {                       "type": "integer"                     }                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/monitoring_get_aggregate_enterprise_events_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/monitoring/getAggregates": {       "post": {         "summary": "Get aggregate enterprise and edge information",         "description": "Retrieve a comprehensive listing of all enterprises and edges on a network. Returns an object containing an aggregate `edgeCount`, a list (`enterprises`) containing enterprise objects, and a map (`edges`) which gives edge counts per enterprise.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`\n\n`READ` `EDGE`",         "tags": [           "all",           "monitoring"         ],         "operationId": "monitoring_get_aggregates",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             },             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "monitoring_get_aggregates",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/monitoring_get_aggregates_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/monitoring/getEnterpriseBgpPeerStatus": {       "post": {         "summary": "Get gateway BGP peer status for all enterprise gateways",         "tags": [           "all",           "monitoring"         ],         "description": "Returns an array where each entry corresponds to a gateway and contains an associated set of BGP peers with state records.\n\nPrivileges required:\n\n`READ` `NETWORK_SERVICE`",         "operationId": "monitoring_get_enterprise_bgp_peer_status",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "NETWORK_SERVICE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "monitoring_get_enterprise_bgp_peer_status_result",               "type": "array",               "items": {                 "$ref": "#/definitions/monitoring_get_enterprise_bgp_peer_status_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/monitoring/getEnterpriseEdgeBgpPeerStatus": {       "post": {         "summary": "Get edge BGP peer status for all enterprise edges",         "tags": [           "all",           "monitoring"         ],         "description": "Returns an array where each entry corresponds to an edge and contains an associated set of BGP peers and state records.\n\nPrivileges required:\n\n`READ` `EDGE`",         "operationId": "monitoring_get_enterprise_edge_bgp_peer_status",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "EDGE"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "monitoring_get_enterprise_edge_bgp_peer_status_result",               "type": "array",               "items": {                 "$ref": "#/definitions/monitoring_get_enterprise_edge_bgp_peer_status_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/monitoring/getEnterpriseEdgeLinkStatus": {       "post": {         "summary": "Get edge and link status data",         "tags": [           "all",           "monitoring"         ],         "description": "Get current edge and edge-link status for all enterprise edges.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`\n\n`READ` `EDGE`",         "operationId": "monitoring_get_enterprise_edge_link_status",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             },             {               "action": "READ",               "object": "EDGE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "enterprises": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "networkId": {                   "type": "integer"                 },                 "links": {                   "type": "boolean",                   "default": true                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "type": "array",               "items": {                 "$ref": "#/definitions/monitoring_get_enterprise_edge_link_status_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/deleteNetworkGatewayPool": {       "post": {         "summary": "Delete gateway pool",         "description": "Deletes the specified gateway pool (by `id`).\n\nPrivileges required:\n\n`DELETE` `GATEWAY`",         "operationId": "network_delete_network_gateway_pool",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "GATEWAY"             }           ]         },         "tags": [           "network",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_delete_network_gateway_pool",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "id": {                   "type": "integer",                   "description": "alias for `gatewayPoolId`"                 },                 "gatewayPoolId": {                   "type": "integer"                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/network_delete_network_gateway_pool_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/getNetworkConfigurations": {       "post": {         "summary": "Get operator configuration profiles",         "tags": [           "all",           "network"         ],         "description": "Gets all operator configuration profiles associated with an operator's network. Optionally includes the modules associated with each profile. This call does not return templates.\n\nPrivileges required:\n\n`READ` `OPERATOR_PROFILE`",         "operationId": "network_get_network_configurations",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "OPERATOR_PROFILE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_get_network_configurations",               "properties": {                 "id": {                   "type": "integer"                 },                 "networkId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "modules",                       "counts"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "network_get_network_configurations_result",               "type": "array",               "items": {                 "$ref": "#/definitions/network_get_network_configurations_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/getNetworkEnterprises": {       "post": {         "summary": "Get a list of the enterprises on a network",         "description": "Get the enterprises existing on a network, optionally including all edges or edge counts. The `edgeConfigUpdate` \"with\" option may also be passed to check whether application of configuration updates to edges is enabled for each enterprise.\n\nPrivileges required:\n\n`READ` `ENTERPRISE`",         "tags": [           "all",           "network"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE"             }           ]         },         "operationId": "network_get_network_enterprises",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_get_network_enterprises",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "id": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edges",                       "edgeCount",                       "edgeConfigUpdate"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "network_get_network_enterprises_result",               "type": "array",               "items": {                 "$ref": "#/definitions/network_get_network_enterprises_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/getNetworkGatewayPools": {       "post": {         "summary": "Get list of gateway pools",         "tags": [           "all",           "network"         ],         "description": "Get list of gateway pools associated with a network, optionally with the gateways or enterprises belonging to each pool.\n\nPrivileges required:\n\n`READ` `GATEWAY`",         "operationId": "network_get_network_gateway_pools",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_get_network_gateway_pools",               "properties": {                 "id": {                   "type": "integer"                 },                 "networkId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "gateways",                       "enterprises"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "network_get_network_gateway_pools_result",               "type": "array",               "items": {                 "$ref": "#/definitions/network_get_network_gateway_pools_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/getNetworkGateways": {       "post": {         "summary": "Get list of gateways",         "description": "Get list of gateways associated with a network.\n\nPrivileges required:\n\n`READ` `GATEWAY`",         "tags": [           "network",           "all"         ],         "operationId": "network_get_network_gateways",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_get_network_gateways",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "site",                       "pools",                       "enterprises",                       "enterpriseAssociations",                       "datacenters",                       "certificates",                       "handOffEdges",                       "roles"                     ]                   }                 }               },               "required": [                 "networkId"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "network_get_network_gateways_result",               "type": "array",               "items": {                 "$ref": "#/definitions/network_get_network_gateways_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/getNetworkOperatorUsers": {       "post": {         "summary": "Get list of operator users for a network",         "description": "Get a list of all of the operator users associated with a network\n\nPrivileges required:\n\n`READ` `OPERATOR_USER`",         "tags": [           "all",           "network"         ],         "operationId": "network_get_network_operator_users",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "OPERATOR_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_get_network_operator_users",               "properties": {                 "networkId": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "title": "network_get_network_operator_users_result",               "type": "array",               "items": {                 "$ref": "#/definitions/network_get_network_operator_users_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/insertNetworkGatewayPool": {       "post": {         "summary": "Insert a gateway pool",         "description": "Insert a gateway pool, associated with a network.\n\nPrivileges required:\n\n`CREATE` `GATEWAY`",         "tags": [           "network",           "all"         ],         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "GATEWAY"             }           ]         },         "operationId": "network_insert_network_gateway_pool",         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_insert_network_gateway_pool",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "handOffType": {                   "type": "string",                   "enum": [                     "NONE",                     "ALLOW",                     "ONLY"                   ]                 }               },               "required": [                 "name",                 "networkId"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/network_insert_network_gateway_pool_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/network/updateNetworkGatwayPoolAttributes": {       "post": {         "summary": "Update gateway pool attributes",         "description": "Update the configurable attributes of a Gateway Pool. Configurarable attributes are `name`, `description`, and `handOffType`.\n\nPrivileges required:\n\n`UPDATE` `GATEWAY`",         "tags": [           "network",           "all"         ],         "operationId": "network_update_network_gateway_pool_attributes",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "GATEWAY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "network_update_network_gateway_pool_attributes",               "properties": {                 "networkId": {                   "type": "integer"                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "id": {                   "type": "integer",                   "description": "alias for `gatewayPoolId`"                 },                 "gatewayPoolId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "handOffType": {                   "type": "string",                   "enum": [                     "NONE",                     "ALLOW",                     "ONLY"                   ]                 }               },               "required": [                 "id"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/network_update_network_gateway_pool_attributes_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/operatorUser/deleteOperatorUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Delete an operator user",         "description": "Delete an operator user object by `id` or `username`.\n\nPrivileges required:\n\n`DELETE` `OPERATOR_USER`",         "operationId": "operator_user_delete_operator_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "DELETE",               "object": "OPERATOR_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "operator_user_delete_operator_user",               "properties": {                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/operator_user_delete_operator_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/operatorUser/getOperatorUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Get an operator user",         "description": "Get an operator user object by `id` or `username`.\n\nPrivileges required:\n\n`READ` `OPERATOR_USER`",         "operationId": "operator_user_get_operator_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "allowPrivilegeToSelf": "OPERATOR_USER",           "requirePrivileges": [             {               "action": "READ",               "object": "OPERATOR_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "operator_user_get_operator_user",               "properties": {                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/operator_user_get_operator_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/operatorUser/insertOperatorUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Insert an operator user",         "description": "Insert an operator user and associate with an operator's network.\n\nPrivileges required:\n\n`CREATE` `OPERATOR_USER`",         "operationId": "operator_user_insert_operator_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "OPERATOR_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "$ref": "#/definitions/operator_user_insert_operator_user"             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/operator_user_get_operator_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/operatorUser/updateOperatorUser": {       "post": {         "tags": [           "all",           "userMaintenance"         ],         "summary": "Update an operator user",         "description": "Update an operator user provided an object `id` or `username`, and an `_update` object containing the names and values, of columns to be updated.\n\nPrivileges required:\n\n`UPDATE` `OPERATOR_USER`",         "operationId": "operator_user_update_operator_user",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "allowPrivilegeToSelf": "OPERATOR_USER",           "requirePrivileges": [             {               "action": "UPDATE",               "object": "OPERATOR_USER"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "operator_user_update_operator_user",               "properties": {                 "_update": {                   "$ref": "#/definitions/operator_user_with_role_info"                 },                 "id": {                   "type": "integer"                 },                 "username": {                   "type": "string"                 }               },               "required": [                 "_update"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/operator_user_update_operator_user_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/createRoleCustomization": {       "post": {         "summary": "Create a role customization",         "tags": [           "all",           "role"         ],         "description": "Create a role customization given a roleId and an array of privilegeIds.\n\nPrivileges required:\n\n`UPDATE` `NETWORK`",         "operationId": "role_create_role_customization",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "NETWORK"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "role_create_role_customization",               "properties": {                 "forRoleId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "userId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "operatorId": {                   "type": "integer"                 },                 "networkId": {                   "type": "integer"                 },                 "privilegeIds": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               },               "required": [                 "forRoleId",                 "privilegeIds"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/role_create_role_customization_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/deleteRoleCustomization": {       "post": {         "summary": "Delete a role customization",         "tags": [           "all",           "role"         ],         "description": "Delete a role customization, given a role customization name or forRoleId.\n\nPrivileges required:\n\n`UPDATE` `NETWORK`",         "operationId": "role_delete_role_customization",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "NETWORK"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "role_delete_role_customization",               "properties": {                 "forRoleId": {                   "type": "integer"                 },                 "name": {                   "type": "string"                 },                 "userId": {                   "type": "integer"                 },                 "enterpriseId": {                   "type": "integer"                 },                 "operatorId": {                   "type": "integer"                 },                 "networkId": {                   "type": "integer"                 }               },               "required": [                 "forRoleId"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/role_delete_role_customization_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/getUserTypeRoles": {       "post": {         "summary": "Get the roles defined for a user type",         "tags": [           "all",           "role"         ],         "description": "Return the defined roles for a specified user type.\n\nPrivileges required:\n\n`READ` `ENTERPRISE_USER`, or\n\n`READ` `PROXY_USER`, or\n\n`READ` `OPERATOR_USER`",         "operationId": "role_get_user_type_roles",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "ENTERPRISE_USER",               "sufficient": true             },             {               "action": "READ",               "object": "PROXY_USER",               "sufficient": true             },             {               "action": "READ",               "object": "OPERATOR_USER",               "sufficient": true             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "role_get_user_type_roles",               "properties": {                 "userType": {                   "type": "string",                   "enum": [                     "OPERATOR",                     "MSP",                     "PARTNER",                     "ENTERPRISE",                     "END_USER",                     "CUSTOM"                   ]                 },                 "networkId": {                   "type": "integer"                 }               },               "required": [                 "userType"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "title": "role_get_user_type_roles_result",               "type": "array",               "items": {                 "$ref": "#/definitions/role_get_user_type_roles_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/setEnterpriseDelegatedToEnterpriseProxy": {       "post": {         "summary": "Grant enterprise access to partner",         "description": "Grants enterprise access to the specified enterprise proxy (partner). When an enterprise is delegated to a proxy, proxy users are granted access to view, configure, and troubleshoot Edges owned by the enterprise. As a security consideration, proxy Support users cannot view personally identifiable information.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_DELEGATION`",         "tags": [           "role",           "all"         ],         "operationId": "role_set_enterprise_delegated_to_enterprise_proxy",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_DELEGATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "enterpriseId": {                   "type": "integer"                 },                 "enterpriseProxyId": {                   "type": "integer"                 },                 "isDelegated": {                   "type": "boolean"                 }               },               "required": [                 "isDelegated"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/role_set_enterprise_delegated_to_enterprise_proxy_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/setEnterpriseDelegatedToOperator": {       "post": {         "summary": "Grant enterprise access to network operator",         "description": "Grants enterprise access to the network operator. When an enterprise is delegated to the operator, operator users are permitted to view, configure, and troubleshoot Edges owned by the enterprise. As a security consideration, operator users cannot view personally identifiable information.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_DELEGATION`",         "tags": [           "role",           "all"         ],         "operationId": "role_set_enterprise_delegated_to_operator",         "x-privileges": {           "forceEnterpriseContext": true,           "excludeAuthTypes": [],           "allowAuthTypes": [             "ANY"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_DELEGATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "isDelegated": {                   "type": "boolean"                 }               },               "required": [                 "isDelegated"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/role_set_enterprise_delegated_to_operator_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/setEnterpriseProxyDelegatedToOperator": {       "post": {         "summary": "Grant enterprise proxy access to network operator",         "description": "Grants enterprise proxy access to the network operator. When an enterprise proxy is delegated to the operator, operator users are granted access to view, configure and troubleshoot objects owned by the proxy.\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_PROXY_DELEGATION`",         "tags": [           "role",           "all"         ],         "operationId": "role_set_enterprise_proxy_delegated_to_operator",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_PROXY_DELEGATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "enterpriseProxyId": {                   "type": "integer"                 },                 "isDelegated": {                   "type": "boolean"                 }               },               "required": [                 "isDelegated"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/role_set_enterprise_proxy_delegated_to_operator_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/role/setEnterpriseUserManagementDelegatedToOperator": {       "post": {         "summary": "Grant enterprise user access to the network operator",         "description": "When enterprise user management is delegated to the operator, operator users are granted enterprise-level user management capabilities (user creation, password resets, etc.).\n\nPrivileges required:\n\n`UPDATE` `ENTERPRISE_DELEGATION`",         "tags": [           "role",           "all"         ],         "operationId": "role_set_enterprise_user_management_delegated_to_operator",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "MSP_USER",             "ENTERPRISE_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "ENTERPRISE_DELEGATION"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "properties": {                 "isDelegated": {                   "type": "boolean"                 }               },               "required": [                 "isDelegated"               ]             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/role_set_enterprise_user_management_delegated_to_operator_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/systemProperty/getSystemProperties": {       "post": {         "summary": "Get all system properties",         "description": "Get a list of all configured system properties.\n\nPrivileges required:\n\n`READ` `SYSTEM_PROPERTY`",         "operationId": "system_property_get_system_properties",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "SYSTEM_PROPERTY"             }           ]         },         "tags": [           "systemProperty",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "system_property_get_system_properties",               "properties": {                 "group": {                   "type": "string",                   "description": "Filter for properties matching a given group prefix"                 },                 "normalize": {                   "type": "boolean"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "type": "array",               "items": {                 "$ref": "#/definitions/system_property_get_system_properties_result_item"               }             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/systemProperty/getSystemProperty": {       "post": {         "summary": "Get system property",         "description": "Get a system property by object id or other attribute.\n\nPrivileges required:\n\n`READ` `SYSTEM_PROPERTY`",         "operationId": "system_property_get_system_property",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "SYSTEM_PROPERTY"             }           ]         },         "tags": [           "systemProperty",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "system_property_get_system_property",               "properties": {                 "name": {                   "type": "string"                 },                 "id": {                   "type": "integer"                 }               }             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/system_property_get_system_property_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/systemProperty/insertOrUpdateSystemProperty": {       "post": {         "summary": "Insert or update a system property",         "description": "Insert a system property. If property with the given name already exists, the property will be updated.\n\nPrivileges required:\n\n`CREATE` `SYSTEM_PROPERTY`",         "operationId": "system_property_insert_or_update_system_property",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "SYSTEM_PROPERTY"             }           ]         },         "tags": [           "systemProperty",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "system_property_insert_or_update_system_property",               "properties": {                 "name": {                   "type": "string"                 },                 "value": {                   "type": "string"                 },                 "defaultValue": {                   "type": "string"                 },                 "isPassword": {                   "type": "boolean"                 },                 "isReadOnly": {                   "type": "boolean"                 },                 "dataType": {                   "type": "string"                 },                 "description": {                   "type": "string"                 }               },               "required": [                 "name",                 "value"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/system_property_insert_or_update_system_property_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/systemProperty/insertSystemProperty": {       "post": {         "summary": "Insert a system property",         "description": "Insert a new system property.\n\nPrivileges required:\n\n`CREATE` `SYSTEM_PROPERTY`",         "operationId": "system_property_insert_system_property",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "SYSTEM_PROPERTY"             }           ]         },         "tags": [           "systemProperty",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "system_property_insert_system_property",               "properties": {                 "name": {                   "type": "string"                 },                 "value": {                   "type": "string"                 },                 "defaultValue": {                   "type": "string"                 },                 "dataType": {                   "type": "string"                 },                 "description": {                   "type": "string"                 },                 "isPassword": {                   "type": "boolean"                 },                 "isReadOnly": {                   "type": "boolean"                 }               },               "required": [                 "name",                 "value"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/system_property_insert_system_property_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/systemProperty/updateSystemProperty": {       "post": {         "summary": "Update a system property",         "description": "Update an existing system property, provided an object `id` or other identifying attributes\n\nPrivileges required:\n\n`UPDATE` `SYSTEM_PROPERTY`",         "operationId": "system_property_update_system_property",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "UPDATE",               "object": "SYSTEM_PROPERTY"             }           ]         },         "tags": [           "systemProperty",           "all"         ],         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "system_property_update_system_property",               "properties": {                 "name": {                   "type": "string"                 },                 "id": {                   "type": "integer"                 },                 "_update": {                   "type": "object",                   "properties": {                     "name": {                       "type": "string"                     },                     "value": {                       "type": "string"                     },                     "defaultValue": {                       "type": "string"                     },                     "isPassword": {                       "type": "boolean"                     },                     "isReadOnly": {                       "type": "boolean"                     },                     "dataType": {                       "type": "string"                     },                     "description": {                       "type": "string"                     }                   }                 }               },               "required": [                 "_update"               ]             }           }         ],         "responses": {           "200": {             "schema": {               "$ref": "#/definitions/system_property_update_system_property_result"             },             "description": "Request was successfully processed"           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/vcoInventory/associateEdge": {       "post": {         "summary": "Return inventory items available at this VCO",         "tags": [           "all",           "disasterRecovery"         ],         "description": "Assigns an edge in the inventory to an Enterprise. To perform the action, the edge should already be in a STAGING state. The assignment can be done at an enterprise level, without selecting a destination Edge profile. In such a case, the inventory edge is assigned to a staging profile within the Enterprise. Optionally a profile or destination edge can be assigned to this inventory edge. The edge in the inventory can be assigned to any profile. The inventory edge can be assigned to an Enterprise edge only if it is in a PENDING/REACTIVATION_PENDING state.\n\nPrivileges required:\n\n`CREATE` `ENTERPRISE`",         "operationId": "vco_inventory_associate_edge",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "CREATE",               "object": "ENTERPRISE"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "vco_inventory_associate_edge",               "properties": {                 "edgeInventoryId": {                   "type": "integer",                   "required": false                 },                 "enterpriseId": {                   "type": "integer",                   "required": false                 },                 "edgeId": {                   "type": "integer",                   "required": false                 },                 "deviceSerialNumber": {                   "type": "string",                   "required": false                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "type": "object",               "properties": {                 "id": {                   "type": "integer"                 },                 "deviceSerialNumber": {                   "type": "string"                 }               }             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     },     "/vcoInventory/getInventoryItems": {       "post": {         "summary": "Return inventory items available at this VCO",         "tags": [           "all",           "inventoryManagement"         ],         "description": "Retrieve all the inventory information available with this VCO. This method does not have required parameters. The optional parameters are \nenterpriseId - Return inventory items belonging to that enterprise. If the caller context is an enterprise, this value will be taken from token itself.\nmodifiedSince - Used to retrieve inventory items that have been modified in the last modifiedSince hours.\nwith - an array containing the string \"edge\" to get details about details about the provisioned edge if any.\n\nPrivileges required:\n\n`READ` `INVENTORY`",         "operationId": "vco_inventory_get_inventory_items",         "x-privileges": {           "excludeAuthTypes": [],           "allowAuthTypes": [             "OPERATOR_USER",             "ENTERPRISE_USER"           ],           "allowPrincipleTypes": [],           "excludePrincipleTypes": [             "EDGE",             "GATEWAY"           ],           "requirePrivileges": [             {               "action": "READ",               "object": "INVENTORY"             }           ]         },         "parameters": [           {             "name": "body",             "in": "body",             "required": true,             "schema": {               "type": "object",               "title": "vco_inventory_get_inventory_items",               "properties": {                 "enterpriseId": {                   "type": "integer",                   "required": false                 },                 "modifiedSince": {                   "type": "integer",                   "required": false                 },                 "with": {                   "type": "array",                   "items": {                     "type": "string",                     "enum": [                       "edge",                       "vcoOwner"                     ]                   }                 }               }             }           }         ],         "responses": {           "200": {             "description": "Request was successfully processed",             "schema": {               "$ref": "#/definitions/vco_inventory_get_inventory_items_result"             }           },           "400": {             "$ref": "#/responses/generic_400"           },           "500": {             "$ref": "#/responses/generic_500"           }         }       }     }   },   "definitions": {     "error": {       "type": "object",       "properties": {         "error": {           "type": "object",           "properties": {             "code": {               "type": "integer",               "description": "A JSON-RPC error code (see http://www.jsonrpc.org/specification#error_object for details)",               "example": -32600             },             "message": {               "type": "string",               "example": "An error occurred while processing your request"             }           },           "required": [             "code",             "message"           ]         }       },       "required": [         "error"       ]     },     "enterprise": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "networkId": {           "type": "integer"         },         "gatewayPoolId": {           "type": "integer"         },         "alertsEnabled": {           "type": "boolean"         },         "operatorAlertsEnabled": {           "type": "boolean"         },         "endpointPkiMode": {           "type": "string",           "enum": [             "CERTIFICATE_DISABLED",             "CERTIFICATE_OPTIONAL",             "CERTIFICATE_REQUIRED"           ]         },         "name": {           "type": "string"         },         "domain": {           "type": "string"         },         "prefix": {           "type": "string"         },         "logicalId": {           "type": "string"         },         "accountNumber": {           "type": "string"         },         "description": {           "type": "string"         },         "contactName": {           "type": "string"         },         "contactPhone": {           "type": "string"         },         "contactMobile": {           "type": "string"         },         "contactEmail": {           "type": "string"         },         "streetAddress": {           "type": "string"         },         "streetAddress2": {           "type": "string"         },         "city": {           "type": "string"         },         "state": {           "type": "string"         },         "postalCode": {           "type": "string"         },         "country": {           "type": "string"         },         "lat": {           "type": "number"         },         "lon": {           "type": "number"         },         "timezone": {           "type": "string"         },         "locale": {           "type": "string"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "configuration_enterprise": {       "allOf": [         {           "$ref": "#/definitions/enterprise"         },         {           "type": "object",           "properties": {             "configurationAssociationId": {               "type": "integer"             }           }         }       ]     },     "enterprise_with_proxy_attributes": {       "allOf": [         {           "$ref": "#/definitions/enterprise"         },         {           "properties": {             "enterpriseProxyId": {               "type": "integer"             },             "enterpriseProxyName": {               "type": "string"             }           },           "required": [             "id",             "created",             "networkId",             "gatewayPoolId",             "alertsEnabled",             "operatorAlertsEnabled",             "endpointPkiMode",             "name",             "domain",             "prefix",             "logicalId",             "accountNumber",             "description",             "contactName",             "contactPhone",             "contactMobile",             "contactEmail",             "streetAddress",             "streetAddress2",             "city",             "state",             "postalCode",             "country",             "lat",             "lon",             "timezone",             "locale",             "modified"           ]         }       ]     },     "enterprise_proxy": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "networkId": {           "type": "integer"         },         "proxyType": {           "type": "string",           "enum": [             "PARTNER",             "MSP"           ]         },         "operateGateways": {           "type": "boolean"         },         "logicalId": {           "type": "string"         },         "name": {           "type": "string"         },         "domain": {           "type": "string"         },         "prefix": {           "type": "string"         },         "description": {           "type": "string"         },         "contactName": {           "type": "string"         },         "contactPhone": {           "type": "string"         },         "contactMobile": {           "type": "string"         },         "contactEmail": {           "type": "string"         },         "streetAddress": {           "type": "string"         },         "streetAddress2": {           "type": "string"         },         "city": {           "type": "string"         },         "state": {           "type": "string"         },         "postalCode": {           "type": "string"         },         "country": {           "type": "string"         },         "lat": {           "type": "number"         },         "lon": {           "type": "number"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "enterprise_alert_configuration": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "alertDefinitionId": {           "type": "integer"         },         "enterpriseId": {           "type": "integer"         },         "enabled": {           "type": "boolean"         },         "name": {           "type": "string",           "enum": [             "EDGE_DOWN",             "EDGE_UP",             "LINK_DOWN",             "LINK_UP",             "VPN_TUNNEL_DOWN",             "EDGE_HA_FAILOVER",             "EDGE_SERVICE_DOWN",             "GATEWAY_SERVICE_DOWN",             "VNF_VM_EVENT",             "VNF_VM_DEPLOYED",             "VNF_VM_POWERED_ON",             "VNF_VM_POWERED_OFF",             "VNF_VM_DELETED",             "VNF_VM_ERROR",             "VNF_INSERTION_EVENT",             "VNF_INSERTION_ENABLED",             "VNF_INSERTION_DISABLED",             "TEST_ALERT"           ]         },         "description": {           "type": "string"         },         "type": {           "type": "string",           "enum": [             "EDGE_DOWN",             "EDGE_UP",             "LINK_DOWN",             "LINK_UP",             "VPN_TUNNEL_DOWN",             "EDGE_HA_FAILOVER",             "EDGE_SERVICE_DOWN",             "GATEWAY_SERVICE_DOWN",             "VNF_VM_EVENT",             "VNF_VM_DEPLOYED",             "VNF_VM_POWERED_ON",             "VNF_VM_POWERED_OFF",             "VNF_VM_DELETED",             "VNF_VM_ERROR",             "VNF_INSERTION_EVENT",             "VNF_INSERTION_ENABLED",             "VNF_INSERTION_DISABLED",             "TEST_ALERT"           ]         },         "definition": {           "$ref": "#/definitions/enterprise_alert_definition"         },         "firstNotificationSeconds": {           "type": "integer"         },         "maxNotifications": {           "type": "integer"         },         "notificationIntervalSeconds": {           "type": "integer"         },         "resetIntervalSeconds": {           "type": "integer"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "enterprise_alert_definition": {       "type": "object",       "properties": {         "isSystemOnly": {           "type": "boolean"         },         "isOperatorOnly": {           "type": "boolean"         }       }     },     "enterprise_alert_trigger": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "triggerTime": {           "type": "string",           "format": "date-time"         },         "enterpriseAlertConfigurationId": {           "type": "integer"         },         "enterpriseId": {           "type": "integer"         },         "edgeId": {           "type": "integer"         },         "edgeName": {           "type": "string"         },         "linkId": {           "type": "integer"         },         "linkName": {           "type": "string"         },         "enterpriseObjectId": {           "type": "integer"         },         "enterpriseObjectName": {           "type": "string"         },         "name": {           "type": "string",           "enum": [             "EDGE_DOWN",             "EDGE_UP",             "LINK_DOWN",             "LINK_UP",             "VPN_TUNNEL_DOWN",             "EDGE_HA_FAILOVER",             "EDGE_SERVICE_DOWN",             "GATEWAY_SERVICE_DOWN",             "VNF_VM_EVENT",             "VNF_VM_DEPLOYED",             "VNF_VM_POWERED_ON",             "VNF_VM_POWERED_OFF",             "VNF_VM_DELETED",             "VNF_VM_ERROR",             "VNF_INSERTION_EVENT",             "VNF_INSERTION_ENABLED",             "VNF_INSERTION_DISABLED",             "TEST_ALERT"           ]         },         "type": {           "type": "string",           "enum": [             "EDGE_DOWN",             "EDGE_UP",             "LINK_DOWN",             "LINK_UP",             "VPN_TUNNEL_DOWN",             "EDGE_HA_FAILOVER",             "EDGE_SERVICE_DOWN",             "GATEWAY_SERVICE_DOWN",             "VNF_VM_EVENT",             "VNF_VM_DEPLOYED",             "VNF_VM_POWERED_ON",             "VNF_VM_POWERED_OFF",             "VNF_VM_DELETED",             "VNF_VM_ERROR",             "VNF_INSERTION_EVENT",             "VNF_INSERTION_ENABLED",             "VNF_INSERTION_DISABLED",             "TEST_ALERT"           ]         },         "state": {           "type": "string",           "enum": [             "PENDING",             "ACTIVE",             "CLOSED"           ]         },         "stateSetTime": {           "type": "string",           "format": "date-time"         },         "lastContact": {           "type": "string",           "format": "date-time"         },         "firstNotificationSeconds": {           "type": "integer"         },         "maxNotifications": {           "type": "integer"         },         "notificationIntervalSeconds": {           "type": "integer"         },         "resetIntervalSeconds": {           "type": "integer"         },         "comment": {           "type": "string"         },         "nextNotificationTime": {           "type": "string",           "format": "date-time"         },         "remainingNotifications": {           "type": "integer"         },         "timezone": {           "type": "string"         },         "locale": {           "type": "string"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "enterprise_object_base": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "operatorId": {           "type": "integer"         },         "networkId": {           "type": "integer"         },         "enterpriseId": {           "type": "integer"         },         "edgeId": {           "type": "integer"         },         "gatewayId": {           "type": "integer"         },         "parentGroupId": {           "type": "integer"         },         "description": {           "type": "string"         },         "object": {           "type": "string"         },         "name": {           "type": "string"         },         "type": {           "type": "string"         },         "logicalId": {           "type": "string"         },         "alertsEnabled": {           "type": "boolean"         },         "operatorAlertsEnabled": {           "type": "boolean"         },         "status": {           "type": "string"         },         "statusModified": {           "type": "string",           "format": "date-time"         },         "previousData": {           "type": "string"         },         "previousCreated": {           "type": "string",           "format": "date-time"         },         "draftData": {           "type": "string"         },         "draftCreated": {           "type": "string",           "format": "date-time"         },         "draftComment": {           "type": "string"         },         "data": {           "type": "object"         },         "lastContact": {           "type": "string",           "format": "date-time"         },         "version": {           "type": "string"         },         "modified": {           "type": "string",           "format": "date-time"         }       },       "required": [         "id",         "created",         "operatorId",         "networkId",         "enterpriseId",         "edgeId",         "gatewayId",         "parentGroupId",         "description",         "object",         "name",         "type",         "logicalId",         "alertsEnabled",         "operatorAlertsEnabled",         "status",         "statusModified",         "previousData",         "previousCreated",         "draftData",         "draftCreated",         "draftComment",         "data",         "lastContact",         "version",         "modified"       ]     },     "event_base": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "eventTime": {           "type": "string",           "format": "date-time"         },         "event": {           "type": "string",           "enum": [             "EDGE_HEARTBEAT",             "GATEWAY_HEARTBEAT",             "USER_LOGIN",             "EDGE_ACTIVATION",             "GATEWAY_ACTIVATION",             "EDGE_FLOW_STATS",             "EDGE_PATHLINK_STATS",             "EDGE_PROVISION",             "CREATE_USER",             "CREATE_PROFILE",             "SOFTWARE_UPLOAD",             "OPERATOR_LOGIN",             "CREATE_SYSTEM_PROPERTY",             "UPDATE_SYSTEM_PROPERTY",             "DELETE_SYSTEM_PROPERTY",             "CREATE_ENTERPRISE",             "DELETE_ENTERPRISE",             "GATEWAY_PROVISION",             "DELETE_GATEWAY",             "EDGE_NEW_DEVICE",             "EDGE_NEW_USER",             "DISABLE_GATEWAY",             "ENABLE_GATEWAY",             "DEACTIVATE_GATEWAY",             "ACTIVATION_EMAIL",             "DELETE_PROFILE",             "SOFTWARE_PKG_DELETE",             "EDGE_REACTIVATION_REQ",             "EDGE_CANCEL_REACTIVATION_REQ",             "VPN_DATACENTER_STATUS",             "EDGE_RADIO_SETTINGS",             "VPN_ENABLE",             "VPN_DISABLE",             "VPN_UPDATE",             "USER_LOCKOUT",             "FIREWALL_ENABLE",             "FIREWALL_DISABLE",             "CREATE_ENTERPRISE_NETWORK_SERVICE",             "EDIT_ENTERPRISE_NETWORK_SERVICE",             "DELETE_ENTERPRISE_NETWORK_SERVICE",             "CREATE_ENTERPRISE_NETWORK",             "EDIT_ENTERPRISE_NETWORK",             "DELETE_ENTERPRISE_NETWORK",             "EDIT_PROFILE",             "SUPPORT_EMAIL",             "META_DATA_UPLOAD",             "META_DATA_DELETE",             "HA_STANDBY_ACTIVATED",             "HA_READY",             "HA_FAILED",             "HA_GOING_ACTIVE",             "HA_TERMINATED",             "EDGE_DOWN",             "EDGE_UP",             "GATEWAY_DOWN",             "CREATE_ENTERPRISE_PROXY",             "DELETE_ENTERPRISE_PROXY",             "DIAGNOSTIC_CLEANUP",             "GATEWAY_ACTIVATION_FAILURE",             "EDGE_ACTIVATION_FAILURE",             "DELETE_EDGE",             "PASSWORD_RESET",             "CRL_GENERATION",             "EDGE_CERTIFICATE_GENERATION",             "GATEWAY_CERTIFICATE_GENERATION",             "EDGE_DEACTIVATION",             "CLEAR_EDGE_HISTORY",             "PATCH_APPLICATION_SUCCESS",             "PATCH_APPLICATION_FAILURE",             "OPERATOR_LOGIN_FAILURE",             "USER_LOGIN_FAILURE",             "REMOTE_ACTION",             "CLONE_APPLICATION_MAP",             "UPDATE_APPLICATION_MAP",             "ROUTE_UPDATE",             "ROUTE_DELETE",             "HA_ACTIVATION_FAILURE",             "DR_CONFIGURATION_STARTED",             "DR_CONFIGURATION_SUCCESS",             "DR_CONFIGURATION_FAILURE",             "DR_CONFIGURATION_ABORTED",             "STORE_FLOW_STATS",             "ENTERPRISE_ENABLE_OPERATOR_USER_MGMT",             "ENTERPRISE_DISABLE_OPERATOR_USER_MGMT",             "ENTERPRISE_ENABLE_OPERATOR_ACCESS",             "ENTERPRISE_DISABLE_OPERATOR_ACCESS",             "ENTERPRISE_ENABLE_PROXY_ACCESS",             "ENTERPRISE_DISABLE_PROXY_ACCESS",             "PROXY_ENABLE_OPERATOR_ACCESS",             "PROXY_DISABLE_OPERATOR_ACCESS",             "EDGE_BGP_NEIGHBOR_UP",             "EDGE_BGP_NEIGHBOR_DOWN",             "GATEWAY_BGP_NEIGHBOR_UP",             "GATEWAY_BGP_NEIGHBOR_DOWN",             "CREATE_NETWORK_SEGMENT",             "UPDATE_NETWORK_SEGMENT",             "DELETE_NETWORK_SEGMENT",             "ADD_PROFILE_NETWORK_SEGMENT",             "REMOVE_PROFILE_NETWORK_SEGMENT",             "EDGE_TO_EDGE_VPN_ENABLE",             "EDGE_TO_EDGE_VPN_DISABLE",             "FIREWALL_LOG_ENABLE",             "FIREWALL_LOG_DISABLE",             "ADD_EDGE_NETWORK_SEGMENT",             "REMOVE_EDGE_NETWORK_SEGMENT",             "ENTERPRISE_SET_TEMPLATE_PROFILE",             "INVENTORY_EDGE_UNASSIGNED",             "INVENTORY_EDGE_IN_STAGING",             "INVENTORY_EDGE_STATE_CHANGE",             "DELETE_USER",             "CREATE_OPERATOR_USER",             "DELETE_OPERATOR_USER",             "EDGE_UPDATE_ATTRIBUTES",             "CREATE_PRIVATE_NETWORK",             "UPDATE_PRIVATE_NETWORK",             "DELETE_PRIVATE_NETWORK",             "CLOUD_SECURITY_ENABLE",             "CLOUD_SECURITY_DISABLE",             "CLOUD_SECURITY_ERROR",             "EDGE_NVS_TUNNEL_UP",             "EDGE_NVS_TUNNEL_DOWN",             "EXTERNAL_API_CALL",             "VRRP_INTO_MASTER_STATE",             "VRRP_OUT_OF_MASTER_STATE",             "VRRP_FAIL_INFO",             "VNF_VM_DEPLOY",             "VNF_VM_DELETE",             "VNF_VM_ERROR",             "VNF_VM_EVENT",             "VNF_INSERTION_ENABLED",             "VNF_INSERTION_DISABLED",             "EDGE_MULTICAST_ROUTES",             "EDGE_NEW_CONFIGURATION_ASSIGNED"           ]         },         "category": {           "type": "string",           "enum": [             "SYSTEM",             "NETWORK",             "APPLICATION",             "USER",             "SECURITY",             "EDGE",             "GATEWAY",             "CONFIGURATION",             "ENTERPRISE"           ]         },         "severity": {           "type": "string",           "enum": [             "EMERGENCY",             "ALERT",             "CRITICAL",             "ERROR",             "WARNING",             "NOTICE",             "INFO",             "DEBUG"           ]         },         "message": {           "type": "string"         }       }     },     "enterprise_event": {       "allOf": [         {           "$ref": "#/definitions/event_base"         },         {           "properties": {             "detail": {               "type": "string"             },             "enterpriseUsername": {               "type": "string"             },             "edgeName": {               "type": "string"             }           },           "required": [             "id",             "eventTime",             "event",             "category",             "severity",             "message",             "detail",             "enterpriseUsername",             "edgeName"           ]         }       ]     },     "operator_event": {       "allOf": [         {           "$ref": "#/definitions/event_base"         },         {           "properties": {             "detail": {               "type": "string"             },             "operatorUsername": {               "type": "string"             },             "networkName": {               "type": "string"             },             "gatewayName": {               "type": "string"             }           },           "required": [             "id",             "eventTime",             "event",             "category",             "severity",             "message",             "detail",             "operatorUsername",             "networkName",             "gatewayName"           ]         }       ]     },     "aggregate_enterprise_event": {       "allOf": [         {           "$ref": "#/definitions/event_base"         },         {           "properties": {             "enterpriseId": {               "type": "integer"             },             "enterpriseName": {               "type": "string"             },             "enterpriseUsername": {               "type": "string"             },             "edgeName": {               "type": "string"             },             "detail": {               "type": "string"             }           },           "required": [             "id",             "eventTime",             "event",             "category",             "severity",             "message",             "enterpriseId",             "enterpriseName",             "enterpriseUsername",             "edgeName",             "detail"           ]         }       ]     },     "gateway_pool_gateway": {       "type": "object",       "properties": {         "gatewayPoolAssocId": {           "type": "integer"         },         "poolName": {           "type": "string"         },         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "networkId": {           "type": "integer"         },         "enterpriseProxyId": {           "type": "integer"         },         "siteId": {           "type": "integer"         },         "activationKey": {           "type": "string"         },         "activationState": {           "type": "string"         },         "activationTime": {           "type": "string",           "format": "date-time"         },         "softwareVersion": {           "type": "string"         },         "buildNumber": {           "type": "string"         },         "utilization": {           "type": "number"         },         "utilizationDetail": {           "type": "object",           "properties": {             "load": {               "type": "number"             },             "overall": {               "type": "number"             },             "cpu": {               "type": "number"             },             "memory": {               "type": "number"             }           }         },         "connectedEdges": {           "type": "integer"         },         "connectedEdgeList": {           "type": "array",           "items": {             "type": "object",             "properties": {               "vceid": {                 "type": "string"               }             }           }         },         "deviceId": {           "type": "string"         },         "logicalId": {           "type": "string"         },         "name": {           "type": "string"         },         "gatewayState": {           "type": "string"         },         "alertsEnabled": {           "type": "integer"         },         "description": {           "type": "string"         },         "dnsName": {           "type": "string"         },         "isLoadBalanced": {           "type": "integer"         },         "privateIpAddress": {           "type": "string"         },         "ipAddress": {           "type": "string"         },         "lastContact": {           "type": "string",           "format": "date-time"         },         "systemUpSince": {           "type": "string",           "format": "date-time"         },         "serviceUpSince": {           "type": "string",           "format": "date-time"         },         "serviceState": {           "type": "string"         },         "endpointPkiMode": {           "type": "string"         },         "handOffDetail": {           "$ref": "#/definitions/gateway_handoff_detail"         },         "ipsecGatewayDetail": {           "type": "object",           "properties": {             "strictHostCheck": {               "type": "boolean"             },             "strictHostCheckDN": {               "type": "string"             }           }         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "gateway_handoff_detail": {       "type": "object",       "properties": {         "type": {           "type": "string"         },         "subnets": {           "type": "array",           "items": {             "type": "object",             "properties": {               "name": {                 "type": "string"               },               "routeCost": {                 "type": "integer"               },               "cidrIp": {                 "type": "string"               },               "cidrPrefix": {                 "type": "integer"               },               "encrypt": {                 "type": "boolean"               },               "handOffType": {                 "type": "string",                 "enum": [                   "NAT",                   "VLAN"                 ]               }             }           }         },         "icmpProbe": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "probeType": {               "type": "string"             },             "cTag": {               "type": "integer"             },             "sTag": {               "type": "integer"             },             "destinationIp": {               "type": "string"             },             "frequencySeconds": {               "type": "integer"             },             "threshold": {               "type": "integer"             }           }         },         "icmpResponder": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "ipAddress": {               "type": "string"             },             "mode": {               "type": "string"             }           }         }       }     },     "gateway_handoff_ipsec_gateway_detail": {       "type": "object",       "properties": {         "ipsecGatewayAddress": {           "type": "string"         },         "strictHostCheck": {           "type": "boolean"         },         "strictHostCheckDN": {           "type": "string"         }       },       "required": [         "ipsecGatewayAddress"       ]     },     "gateway_pool": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "networkId": {           "type": "integer"         },         "enterpriseProxyId": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "name": {           "type": "string"         },         "description": {           "type": "string"         },         "isDefault": {           "type": "boolean"         },         "handOffType": {           "type": "string",           "enum": [             "NONE",             "ALLOW",             "ONLY"           ]         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "link": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "edgeId": {           "type": "integer"         },         "logicalId": {           "type": "string"         },         "internalId": {           "type": "string"         },         "interface": {           "type": "string"         },         "macAddress": {           "type": "string"         },         "ipAddress": {           "type": "string"         },         "netmask": {           "type": "string"         },         "networkSide": {           "type": "string",           "enum": [             "UNKOWN",             "WAN",             "LAN"           ]         },         "networkType": {           "type": "string",           "enum": [             "UNKNOWN",             "WIRELESS",             "ETHERNET",             "WIFI"           ]         },         "displayName": {           "type": "string"         },         "isp": {           "type": "string"         },         "org": {           "type": "string"         },         "lat": {           "type": "number"         },         "lon": {           "type": "number"         },         "lastActive": {           "type": "string",           "format": "date-time"         },         "state": {           "type": "string",           "enum": [             "UNKNOWN",             "STABLE",             "UNSTABLE",             "DISCONNECTED",             "QUIET",             "INITIAL",             "STANDBY"           ]         },         "backupState": {           "type": "string",           "enum": [             "UNCONFIGURED",             "STANDBY",             "ACTIVE"           ]         },         "vpnState": {           "type": "string",           "enum": [             "UNKNOWN",             "STABLE",             "UNSTABLE",             "DEAD",             "STANDBY"           ]         },         "lastEvent": {           "type": "string",           "format": "date-time"         },         "lastEventState": {           "type": "string",           "enum": [             "UNKNOWN",             "STABLE",             "UNSTABLE",             "DISCONNECTED",             "QUIET",             "INITIAL",             "STANDBY"           ]         },         "alertsEnabled": {           "type": "integer"         },         "operatorAlertsEnabled": {           "type": "integer"         },         "serviceState": {           "type": "string",           "enum": [             "IN_SERVICE",             "OUT_OF_SERVICE",             "HISTORICAL"           ]         },         "modified": {           "type": "string",           "format": "date-time"         },         "serviceGroups": {           "$ref": "#/definitions/link_service_groups"         }       },       "required": [         "id",         "created",         "edgeId",         "logicalId",         "internalId",         "interface",         "macAddress",         "ipAddress",         "netmask",         "networkSide",         "networkType",         "displayName",         "isp",         "org",         "lat",         "lon",         "lastActive",         "state",         "backupState",         "vpnState",         "lastEvent",         "lastEventState",         "alertsEnabled",         "operatorAlertsEnabled",         "serviceState",         "modified"       ]     },     "client_device": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "enterpriseId": {           "type": "integer"         },         "macAddress": {           "type": "string"         },         "hostName": {           "type": "string"         },         "ipAddress": {           "type": "string"         },         "os": {           "type": "integer"         },         "osName": {           "type": "string"         },         "osVersion": {           "type": "string"         },         "deviceType": {           "type": "string"         },         "deviceModel": {           "type": "string"         },         "lastContact": {           "type": "string",           "format": "date-time"         },         "modified": {           "type": "string",           "format": "date-time"         }       },       "required": [         "id",         "created",         "enterpriseId",         "macAddress",         "hostName",         "ipAddress",         "os",         "osName",         "osVersion",         "deviceType",         "deviceModel",         "lastContact",         "modified"       ]     },     "link_quality_object": {       "type": "object",       "properties": {         "distribution": {           "$ref": "#/definitions/link_quality_object_distribution"         },         "sampleCount": {           "type": "integer"         },         "sampleLength": {           "type": "integer"         },         "score": {           "type": "object",           "additionalProperties": {             "type": "number"           }         },         "timeseries": {           "type": "array",           "items": {             "$ref": "#/definitions/link_quality_object_timeseries_data"           }         },         "totalScore": {           "type": "number"         }       },       "required": [         "distribution",         "sampleCount",         "sampleLength",         "score",         "timeseries",         "totalScore"       ]     },     "link_quality_object_distribution": {       "type": "object",       "additionalProperties": {         "type": "object",         "additionalProperties": {           "type": "number"         }       }     },     "link_quality_object_timeseries_data": {       "type": "object",       "properties": {         "before": {           "type": "object",           "additionalProperties": {             "type": "integer"           }         },         "after": {           "type": "object",           "additionalProperties": {             "type": "integer"           }         },         "metadata": {           "type": "object",           "properties": {             "detail": {               "type": "object",               "properties": {                 "latencyMsRx": {                   "type": "integer"                 },                 "latencyMsTx": {                   "type": "integer"                 },                 "lossPctRx": {                   "type": "integer"                 },                 "lossPctTx": {                   "type": "integer"                 },                 "jitterMsRx": {                   "type": "integer"                 },                 "jitterMsTx": {                   "type": "integer"                 }               }             },             "metrics": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "trafficType": {                     "type": "integer",                     "enum": [                       0,                       1,                       2                     ]                   },                   "action": {                     "type": "integer",                     "enum": [                       0,                       1,                       2,                       3,                       4                     ]                   },                   "metric": {                     "type": "integer",                     "enum": [                       0,                       1,                       2,                       3,                       4,                       5                     ]                   },                   "beforeState": {                     "type": "integer",                     "enum": [                       0,                       1,                       2,                       3,                       4                     ]                   },                   "afterState": {                     "type": "integer",                     "enum": [                       0,                       1,                       2,                       3,                       4                     ]                   }                 }               }             },             "stateMap": {               "type": "object",               "additionalProperties": {                 "type": "object",                 "additionalProperties": {                   "type": "object",                   "properties": {                     "before": {                       "type": "integer"                     },                     "after": {                       "type": "integer"                     },                     "action": {                       "type": "integer"                     }                   }                 }               }             }           }         },         "timestamp": {           "type": "integer"         }       },       "required": [         "after",         "metadata",         "timestamp"       ]     },     "enterprise_route": {       "type": "object",       "properties": {         "type": {           "type": "string"         },         "exitType": {           "type": "string"         },         "edgeId": {           "type": "integer"         },         "edgeName": {           "type": "string"         },         "profileId": {           "type": "integer"         },         "cidrIp": {           "type": "string"         },         "cost": {           "type": "integer"         },         "advertise": {           "type": "boolean"         }       }     },     "vlan": {       "type": "object",       "properties": {         "name": {           "type": "string"         },         "vlanId": {           "type": "integer"         },         "staticReserved": {           "type": "integer"         }       }     },     "enterprise_network_space": {       "type": "object",       "properties": {         "name": {           "type": "string"         },         "mode": {           "type": "string",           "enum": [             "static",             "dynamic"           ]         },         "cidrIp": {           "type": "string"         },         "cidrPrefix": {           "type": "integer"         },         "maxVlans": {           "type": "integer"         },         "vlans": {           "type": "array",           "items": {             "$ref": "#/definitions/vlan"           }         }       }     },     "enterprise_service": {       "type": "object",       "discriminator": "type",       "properties": {         "id": {           "type": "integer"         },         "enterpriseObjectId": {           "type": "integer"         },         "configurationId": {           "type": "integer"         },         "moduleId": {           "type": "integer"         },         "ref": {           "type": "string"         },         "data": {           "type": "object"         },         "version": {           "type": "string"         },         "object": {           "type": "string"         },         "name": {           "type": "string"         },         "type": {           "type": "string"         },         "logicalId": {           "type": "string"         }       },       "required": [         "type"       ]     },     "dns": {       "allOf": [         {           "$ref": "#/definitions/enterprise_service"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/dns_data"             }           }         }       ]     },     "dns_data": {       "type": "object",       "properties": {         "primary": {           "type": "string"         },         "secondary": {           "type": "string"         },         "isPrivate": {           "type": "boolean"         },         "domains": {           "type": "array",           "items": {             "type": "object",             "properties": {               "rule": {                 "type": "string"               },               "description": {                 "type": "string"               }             }           }         }       }     },     "segment": {       "allOf": [         {           "$ref": "#/definitions/enterprise_service"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/segment_data"             }           }         }       ]     },     "segment_data": {       "type": "object",       "properties": {         "segmentId": {           "type": "integer"         },         "delegateToEnterprise": {           "type": "boolean"         },         "delegateToEnterpriseProxy": {           "type": "boolean"         }       }     },     "enterprise_service_network": {       "allOf": [         {           "$ref": "#/definitions/enterprise_service"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/enterprise_service_network_data"             }           }         }       ]     },     "enterprise_service_network_data": {       "type": "object",       "properties": {         "zone": {           "type": "string"         },         "spaces": {           "type": "array",           "items": {             "type": "object",             "properties": {               "cidrIp": {                 "type": "string"               },               "cidrPrefix": {                 "type": "integer"               },               "maxVlans": {                 "type": "integer"               },               "mode": {                 "type": "string"               },               "name": {                 "type": "string"               },               "branchCidrPrefix": {                 "type": "integer"               },               "guest": {                 "type": "boolean"               },               "vlans": {                 "type": "array",                 "items": {                   "type": "object",                   "properties": {                     "name": {                       "type": "string"                     },                     "vlanId": {                       "type": "integer"                     },                     "advertise": {                       "type": "boolean"                     },                     "cost": {                       "type": "integer"                     },                     "staticReserved": {                       "type": "integer"                     },                     "dhcp": {                       "type": "object",                       "properties": {                         "enabled": {                           "type": "boolean"                         },                         "leaseTimeSeconds": {                           "type": "integer"                         }                       }                     }                   }                 }               }             }           }         }       }     },     "configuration_module": {       "type": "object",       "required": [         "name"       ],       "properties": {         "id": {           "type": "integer"         },         "name": {           "type": "string",           "enum": [             "imageUpdate",             "controlPlane",             "managementPlane",             "firewall",             "QOS",             "deviceSettings",             "WAN",             "metaData",             "properties"           ]         },         "type": {           "type": "string",           "enum": [             "ENTERPRISE",             "OPERATOR",             "GATEWAY"           ]         },         "description": {           "type": "string"         },         "configurationId": {           "type": "integer"         },         "data": {           "type": "object"         },         "refs": {           "type": "object"         }       },       "discriminator": "name"     },     "genericRefs": {       "type": "object",       "additionalProperties": {         "$ref": "#/definitions/enterprise_service"       }     },     "imageUpdate": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/image_update_data"             }           },           "required": [             "name",             "data"           ]         }       ]     },     "image_update_data": {       "type": "object",       "properties": {         "buildNumber": {           "type": "string"         },         "profileDeviceFamily": {           "type": "string"         },         "profileVersion": {           "type": "string"         },         "softwarePackageId": {           "type": "integer"         },         "softwarePackageName": {           "type": "string"         },         "version": {           "type": "string"         },         "windowDurationMins": {           "type": "integer"         },         "windowed": {           "type": "boolean"         }       }     },     "controlPlane": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/control_plane_data"             }           },           "required": [             "name",             "data"           ]         }       ]     },     "control_plane_data": {       "type": "object",       "properties": {         "gatewaySelection": {           "type": "object",           "properties": {             "mode": {               "type": "string"             },             "primary": {               "type": "string"             },             "primaryDetail": {               "type": "object",               "properties": {                 "ipAddress": {                   "type": "string"                 },                 "logicalId": {                   "type": "string"                 },                 "name": {                   "type": "string"                 }               }             },             "secondary": {               "type": "string"             },             "secondaryDetail": {               "type": "object",               "properties": {                 "ipAddress": {                   "type": "string"                 },                 "logicalId": {                   "type": "string"                 },                 "name": {                   "type": "string"                 }               }             },             "super": {               "type": "string"             },             "superDetail": {               "type": "object",               "properties": {                 "ipAddress": {                   "type": "string"                 },                 "logicalId": {                   "type": "string"                 },                 "name": {                   "type": "string"                 }               }             }           }         },         "vpn": {           "type": "object",           "properties": {             "dataCenterEdges": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "logicalId": {                     "type": "string"                   },                   "name": {                     "type": "string"                   }                 }               }             },             "edgeToDataCenter": {               "type": "boolean"             },             "edgeToEdge": {               "type": "boolean"             },             "edgeToEdgeDetail": {               "type": "object",               "properties": {                 "dynamic": {                   "type": "object",                   "properties": {                     "enabled": {                       "type": "boolean"                     },                     "timeout": {                       "type": "integer"                     },                     "type": {                       "type": "string"                     }                   }                 },                 "encryptionProtocol": {                   "type": "string"                 },                 "profileIsolation": {                   "type": "object",                   "properties": {                     "enabled": {                       "type": "boolean"                     },                     "isolateDynamic": {                       "type": "boolean"                     }                   }                 },                 "useCloudGateway": {                   "type": "boolean"                 },                 "vpnHubs": {                   "type": "array",                   "items": {                     "type": "object"                   }                 },                 "autoSelectVpnHubs": {                   "type": "boolean"                 }               }             },             "edgeToEdgeList": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "isolateDynamic": {                     "type": "integer"                   },                   "logicalId": {                     "type": "string"                   },                   "name": {                     "type": "string"                   },                   "profileLogicalId": {                     "type": "string"                   }                 }               }             }           }         },         "ipsecGatewayDetail": {           "type": "object",           "additionalProperties": {             "type": "object",             "properties": {               "strictHostCheck": {                 "type": "boolean"               },               "strictHostCheckDN": {                 "type": "string"               }             }           }         }       }     },     "managementPlane": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/management_plane_data"             }           },           "required": [             "name",             "data"           ]         }       ]     },     "management_plane_data": {       "type": "object",       "properties": {         "heartBeatSeconds": {           "type": "integer"         },         "managementPlaneProxy": {           "type": "object",           "properties": {             "primary": {               "type": "string"             },             "secondary": {               "type": "string"             }           }         },         "statsUploadSeconds": {           "type": "integer"         },         "timeSliceSeconds": {           "type": "integer"         }       }     },     "firewall": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/firewall_data"             }           },           "required": [             "name",             "data"           ]         }       ]     },     "firewall_data": {       "type": "object",       "properties": {         "firewall_enabled": {           "type": "boolean"         },         "firewall_logging_enabled": {           "type": "boolean"         },         "inbound": {           "type": "array",           "items": {             "$ref": "#/definitions/firewall_inbound_rule"           }         },         "outbound": {           "type": "array",           "items": {             "$ref": "#/definitions/firewall_outbound_rule"           }         },         "services": {           "type": "object",           "properties": {             "loggingEnabled": {               "type": "boolean"             },             "ssh": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "allowSelectedIp": {                   "type": "array",                   "items": {                     "type": "string"                   }                 },                 "ruleLogicalId": {                   "type": "string"                 }               },               "required": [                 "enabled"               ]             },             "localUi": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "allowSelectedIp": {                   "type": "array",                   "items": {                     "type": "string"                   },                   "description": "List of IP addresses allowed UI access"                 },                 "portNumber": {                   "type": "integer"                 },                 "ruleLogicalId": {                   "type": "string"                 }               },               "required": [                 "enabled",                 "portNumber"               ]             },             "snmp": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "allowSelectedIp": {                   "type": "array",                   "items": {                     "type": "string"                   },                   "description": "List of IP addresses allowed SNMP access"                 },                 "ruleLogicalId": {                   "type": "string"                 }               },               "required": [                 "enabled"               ]             },             "icmp": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "allowSelectedIp": {                   "type": "array",                   "items": {                     "type": "string"                   },                   "description": "List of IP addresses allowed ICMP access"                 },                 "ruleLogicalId": {                   "type": "string"                 }               },               "required": [                 "enabled"               ]             }           },           "required": [             "loggingEnabled"           ]         }       },       "required": [         "firewall_enabled",         "firewall_logging_enabled",         "inbound",         "outbound",         "services"       ]     },     "firewall_inbound_rule": {       "type": "object",       "properties": {         "name": {           "type": "string"         },         "match": {           "$ref": "#/definitions/firewall_rule_match"         },         "action": {           "type": "object",           "properties": {             "type": {               "type": "string",               "enum": [                 "port_forwarding",                 "one_to_one_nat"               ]             },             "nat": {               "type": "object",               "properties": {                 "lan_ip": {                   "type": "string"                 },                 "lan_port": {                   "type": "integer"                 },                 "outbound": {                   "type": "boolean"                 }               },               "required": [                 "lan_ip"               ]             },             "interface": {               "type": "string",               "description": "The name of the interface from which traffic should be forwarded"             },             "subinterfaceId": {               "type": "integer"             }           },           "required": [             "type",             "nat",             "interface"           ]         },         "ruleLogicalId": {           "type": "string"         }       },       "required": [         "match",         "action"       ]     },     "firewall_outbound_rule": {       "type": "object",       "properties": {         "name": {           "type": "string"         },         "match": {           "$ref": "#/definitions/firewall_rule_match"         },         "action": {           "type": "object",           "properties": {             "allow_or_deny": {               "type": "string",               "enum": [                 "allow",                 "deny"               ]             }           }         },         "ruleLogicalId": {           "type": "string"         }       },       "required": [         "match",         "action"       ]     },     "firewall_rule_match": {       "type": "object",       "properties": {         "appid": {           "type": "integer",           "description": "Integer ID corresponding to an application in the network-level application map"         },         "classid": {           "type": "integer",           "description": "Integer ID corresponding to an application class in the network-level application map"         },         "dscp": {           "type": "integer",           "description": "Integer ID indicating DSCP classification"         },         "sip": {           "type": "string",           "description": "Source IP address"         },         "sport_high": {           "type": "integer",           "description": "Upper bound of a source port range"         },         "sport_low": {           "type": "integer",           "description": "Lower bound of a source port range"         },         "ssm": {           "type": "string",           "description": "Source subnet mask, e.g. 255.255.255.0"         },         "smac": {           "type": "string",           "description": "Source MAC address"         },         "svlan": {           "type": "integer",           "description": "Integer ID for the source VLAN"         },         "os_version": {           "type": "integer"         },         "hostname": {           "type": "string"         },         "dip": {           "type": "string",           "description": "Destination IP address"         },         "dport_low": {           "type": "integer",           "description": "Lower bound of a destination port range"         },         "dport_high": {           "type": "integer",           "description": "Upper bound of a destination port range"         },         "dsm": {           "type": "string",           "description": "Destination subnet mask e.g. 255.255.255.0"         },         "dmac": {           "type": "string",           "description": "Destination MAC address"         },         "dvlan": {           "type": "integer",           "description": "Integer ID for the destination VLAN"         },         "proto": {           "type": "integer",           "description": "Integer ID corresponding to a protocol"         }       }     },     "edgeQOS": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/edgeQOSData"             },             "refs": {               "$ref": "#/definitions/genericRefs"             }           }         }       ]     },     "edgeQOSData": {       "type": "object",       "properties": {         "rules": {           "type": "array",           "items": {             "type": "object",             "properties": {               "name": {                 "type": "string"               },               "match": {                 "type": "object",                 "properties": {                   "appid": {                     "type": "integer"                   },                   "classid": {                     "type": "integer"                   },                   "dscp": {                     "type": "integer"                   },                   "sip": {                     "type": "string"                   },                   "sport_high": {                     "type": "integer"                   },                   "sport_low": {                     "type": "integer"                   },                   "ssm": {                     "type": "string"                   },                   "svlan": {                     "type": "integer"                   },                   "os_version": {                     "type": "integer"                   },                   "hostname": {                     "type": "string"                   },                   "dip": {                     "type": "string"                   },                   "dport_low": {                     "type": "integer"                   },                   "dport_high": {                     "type": "integer"                   },                   "dsm": {                     "type": "string"                   },                   "dvlan": {                     "type": "integer"                   },                   "proto": {                     "type": "integer"                   }                 }               },               "action": {                 "type": "object",                 "properties": {                   "routeType": {                     "type": "string"                   },                   "edge2EdgeRouteAction": {                     "$ref": "#/definitions/route_action_object"                   },                   "edge2DataCenterRouteAction": {                     "$ref": "#/definitions/route_action_object"                   },                   "edge2CloudRouteAction": {                     "$ref": "#/definitions/route_action_object"                   },                   "QoS": {                     "type": "object"                   },                   "sla": {                     "type": "object"                   }                 }               }             }           }         },         "defaults": {           "type": "array",           "items": {             "type": "object"           }         },         "webProxy": {           "type": "object",           "properties": {             "providers": {               "type": "array",               "items": {                 "type": "object"               }             }           }         },         "serviceRateLimit": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "inputType": {               "type": "string"             },             "value": {               "type": "integer"             }           }         },         "cosMapping": {           "type": "object",           "properties": {             "lsInputType": {               "type": "string"             },             "bulk": {               "$ref": "#/definitions/cos_mapping"             },             "realtime": {               "$ref": "#/definitions/cos_mapping"             },             "transactional": {               "$ref": "#/definitions/cos_mapping"             }           }         }       }     },     "route_action_object": {       "type": "object",       "properties": {         "interface": {           "type": "string"         },         "linkInternalLogicalId": {           "type": "string"         },         "linkPolicy": {           "type": "string"         },         "routeCfg": {           "type": "object"         },         "routePolicy": {           "type": "string"         },         "serviceGroup": {           "type": "string"         },         "vlanId": {           "type": "integer"         },         "wanlink": {           "type": "string"         },         "linkCosLogicalId": {           "type": "string"         },         "linkOuterDscpTag": {           "type": "string"         },         "linkInnerDscpTag": {           "type": "string"         }       }     },     "cos_mapping": {       "type": "object",       "properties": {         "high": {           "$ref": "#/definitions/cos_mapping_value"         },         "normal": {           "$ref": "#/definitions/cos_mapping_value"         },         "low": {           "$ref": "#/definitions/cos_mapping_value"         }       }     },     "cos_mapping_value": {       "type": "object",       "properties": {         "value": {           "type": "integer"         },         "ratelimit": {           "type": "boolean"         }       }     },     "edgeDeviceSettings": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/edgeDeviceSettingsData"             },             "refs": {               "$ref": "#/definitions/deviceSettingsRefs"             }           }         }       ]     },     "edgeDeviceSettingsData": {       "type": "object",       "properties": {         "bgp": {           "type": "object",           "properties": {             "ASN": {               "type": "string"             },             "connectedRoutes": {               "type": "boolean"             },             "disableASPathCarryOver": {               "type": "boolean"             },             "enabled": {               "type": "boolean"             },             "filters": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "id": {                     "type": "string"                   },                   "name": {                     "type": "string"                   },                   "rules": {                     "type": "array",                     "items": {                       "$ref": "#/definitions/bgp_filter_rule"                     }                   }                 }               }             },             "holdtime": {               "type": "string"             },             "keepalive": {               "type": "string"             },             "neighbors": {               "type": "array",               "items": {                 "$ref": "#/definitions/config_edge_bgp_neighbor"               }             },             "networks": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "cidrIp": {                     "type": "string"                   },                   "cidrPrefix": {                     "type": "integer"                   }                 }               }             },             "overlayPrefix": {               "type": "boolean"             },             "propagateUplink": {               "type": "boolean"             },             "routerId": {               "type": "string"             },             "uplinkCommunity": {               "type": "integer"             }           }         },         "lan": {           "type": "object",           "properties": {             "networks": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "space": {                     "type": "string"                   },                   "guest": {                     "type": "boolean"                   },                   "secure": {                     "type": "boolean"                   },                   "advertise": {                     "type": "boolean"                   },                   "cost": {                     "type": "integer"                   },                   "dhcp": {                     "type": "object",                     "properties": {                       "enabled": {                         "type": "boolean"                       },                       "leaseTimeSeconds": {                         "type": "integer"                       },                       "override": {                         "type": "boolean"                       },                       "dhcpRelay": {                         "type": "object",                         "properties": {                           "servers": {                             "type": "array",                             "items": {                               "type": "string"                             }                           }                         }                       }                     }                   },                   "staticReserved": {                     "type": "integer"                   },                   "netmask": {                     "type": "string"                   },                   "cidrPrefix": {                     "type": "integer"                   },                   "cidrIp": {                     "type": "string"                   },                   "baseDhcpAddr": {                     "type": "integer"                   },                   "numDhcpAddr": {                     "type": "integer"                   },                   "name": {                     "type": "string"                   },                   "interfaces": {                     "type": "array",                     "items": {                       "type": "string"                     }                   },                   "vlanId": {                     "type": "integer"                   },                   "managementIp": {                     "type": "string"                   },                   "disabled": {                     "type": "boolean"                   }                 }               }             }           }         },         "routedInterfaces": {           "type": "array",           "items": {             "type": "object",             "properties": {               "addressing": {                 "type": "object",                 "properties": {                   "type": {                     "type": "string",                     "enum": [                       "DHCP",                       "STATIC",                       "PPPOE"                     ]                   },                   "cidrPrefix": {                     "type": "integer"                   },                   "cidrIp": {                     "type": "string"                   },                   "netmask": {                     "type": "string"                   },                   "gateway": {                     "type": "string"                   },                   "username": {                     "type": "string"                   },                   "password": {                     "type": "string"                   }                 }               },               "advertise": {                 "type": "boolean"               },               "disabled": {                 "type": "boolean"               },               "dhcpServer": {                 "$ref": "#/definitions/edgeDeviceSettingsDataDhcpServer"               },               "encryptOverlay": {                 "type": "boolean"               },               "l2": {                 "type": "object",                 "properties": {                   "autonegotiation": {                     "type": "boolean"                   },                   "speed": {                     "type": "string"                   },                   "duplex": {                     "type": "string"                   },                   "MTU": {                     "type": "integer"                   }                 }               },               "name": {                 "type": "string"               },               "natDirect": {                 "type": "boolean"               },               "ospf": {                 "type": "object",                 "properties": {                   "area": {                     "type": "integer"                   },                   "authentication": {                     "type": "boolean"                   },                   "authId": {                     "type": "integer"                   },                   "authPassphrase": {                     "type": "string"                   },                   "cost": {                     "type": "integer"                   },                   "deadTimer": {                     "type": "integer"                   },                   "enabled": {                     "type": "boolean"                   },                   "helloTimer": {                     "type": "integer"                   },                   "inboundRouteLearning": {                     "type": "object",                     "properties": {                       "defaultAction": {                         "type": "string"                       },                       "filters": {                         "type": "array",                         "items": {                           "type": "object"                         }                       }                     }                   },                   "md5Authentication": {                     "type": "boolean"                   },                   "MTU": {                     "type": "integer"                   },                   "outboundRouteAdvertisement": {                     "type": "object",                     "properties": {                       "defaultAction": {                         "type": "string"                       },                       "filters": {                         "type": "array",                         "items": {                           "type": "object"                         }                       }                     }                   },                   "passive": {                     "type": "boolean"                   },                   "vlanId": {                     "type": "integer"                   }                 }               },               "override": {                 "type": "boolean"               },               "subinterfaces": {                 "type": "array",                 "items": {                   "type": "object",                   "properties": {                     "addressing": {                       "type": "object",                       "properties": {                         "cidrIp": {                           "type": "string"                         },                         "cidrPrefix": {                           "type": "integer"                         },                         "gateway": {                           "type": "string"                         },                         "netmask": {                           "type": "string"                         },                         "type": {                           "type": "string",                           "enum": [                             "DHCP",                             "STATIC",                             "PPPOE"                           ]                         },                         "username": {                           "type": "string"                         },                         "password": {                           "type": "string"                         }                       }                     },                     "advertise": {                       "type": "boolean"                     },                     "dhcpServer": {                       "$ref": "#/definitions/edgeDeviceSettingsDataDhcpServer"                     },                     "disabled": {                       "type": "boolean"                     },                     "natDirect": {                       "type": "boolean"                     },                     "ospf": {                       "type": "object",                       "properties": {                         "area": {                           "type": "integer"                         },                         "authentication": {                           "type": "boolean"                         },                         "authId": {                           "type": "integer"                         },                         "authPassphrase": {                           "type": "string"                         },                         "cost": {                           "type": "integer"                         },                         "deadTimer": {                           "type": "integer"                         },                         "enabled": {                           "type": "boolean"                         },                         "helloTimer": {                           "type": "integer"                         },                         "inboundRouteLearning": {                           "type": "object",                           "properties": {                             "defaultAction": {                               "type": "string"                             },                             "filters": {                               "type": "array",                               "items": {                                 "type": "object"                               }                             }                           }                         },                         "md5Authentication": {                           "type": "boolean"                         },                         "MTU": {                           "type": "integer"                         },                         "outboundRouteAdvertisement": {                           "type": "object",                           "properties": {                             "defaultAction": {                               "type": "string"                             },                             "filters": {                               "type": "array",                               "items": {                                 "type": "object"                               }                             }                           }                         },                         "passive": {                           "type": "boolean"                         }                       }                     },                     "override": {                       "type": "boolean"                     },                     "subinterfaceId": {                       "type": "integer"                     },                     "subinterfaceType": {                       "type": "string"                     },                     "vlanId": {                       "type": "integer",                       "description": "static only"                     },                     "trusted": {                       "type": "boolean"                     },                     "rpf": {                       "type": "string",                       "enum": [                         "SPECIFIC",                         "LOOSE",                         "DISABLED"                       ]                     }                   }                 }               },               "vlanId": {                 "type": "integer",                 "description": "static only"               },               "wanOverlay": {                 "type": "string",                 "enum": [                   "DISABLED",                   "AUTO_DISCOVERED",                   "USER_DEFINED"                 ]               },               "trusted": {                 "type": "boolean"               },               "rpf": {                 "type": "string",                 "enum": [                   "SPECIFIC",                   "LOOSE",                   "DISABLED"                 ]               },               "underlayAccounting": {                 "type": "boolean",                 "default": true               }             }           }         },         "routes": {           "type": "object",           "properties": {             "icmpProbes": {               "type": "array",               "items": {                 "type": "object"               }             },             "icmpResponders": {               "type": "array",               "items": {                 "type": "object"               }             },             "static": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "destination": {                     "type": "string"                   },                   "netmask": {                     "type": "string"                   },                   "sourceIp": {                     "type": "string"                   },                   "gateway": {                     "type": "string"                   },                   "cost": {                     "type": "integer"                   },                   "preferred": {                     "type": "boolean"                   },                   "description": {                     "type": "string"                   },                   "cidrPrefix": {                     "type": "string"                   },                   "wanInterface": {                     "type": "string"                   },                   "icmpProbeLogicalId": {                     "type": "string"                   },                   "vlanId": {                     "type": "integer"                   },                   "advertise": {                     "type": "boolean"                   },                   "subinterfaceId": {                     "type": "integer"                   }                 }               }             }           }         },         "ha": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "interface": {               "type": "string"             }           }         },         "dns": {           "type": "object",           "properties": {             "primaryProvider": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 }               }             },             "backupProvider": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 }               }             },             "privateProviders": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 }               }             }           }         },         "netflow": {           "type": "object",           "properties": {             "enable": {               "type": "boolean"             },             "enabled": {               "type": "boolean"             },             "version": {               "type": "integer"             },             "collectors": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "address": {                     "type": "string"                   },                   "port": {                     "type": "integer"                   }                 }               }             }           }         },         "vqm": {           "type": "object",           "properties": {             "enable": {               "type": "boolean"             },             "enabled": {               "type": "boolean"             },             "protocol": {               "type": "string"             },             "collectors": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "address": {                     "type": "string"                   },                   "port": {                     "type": "integer"                   }                 }               }             }           }         },         "vrrp": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "data": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "cidrIp": {                     "type": "string"                   },                   "interface": {                     "type": "string"                   },                   "interval": {                     "type": "integer"                   },                   "preempt": {                     "type": "boolean"                   },                   "preemptDelay": {                     "type": "integer"                   },                   "priority": {                     "type": "integer"                   },                   "subinterfaceId": {                     "type": "integer"                   },                   "vlanId": {                     "type": "integer"                   },                   "vrid": {                     "type": "integer"                   }                 }               }             }           }         },         "snmp": {           "type": "object",           "properties": {             "port": {               "type": "integer"             },             "snmpv2c": {               "type": "object",               "properties": {                 "enable": {                   "type": "boolean"                 },                 "enabled": {                   "type": "boolean"                 },                 "community": {                   "type": "string"                 },                 "allowedIp": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               }             },             "snmpv3": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "enable": {                   "type": "boolean"                 },                 "users": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "name": {                         "type": "string"                       },                       "passphrase": {                         "type": "string"                       },                       "authAlg": {                         "type": "string"                       },                       "privacy": {                         "type": "boolean"                       },                       "encrAlg": {                         "type": "string"                       }                     }                   }                 }               }             }           }         },         "multiSourceQos": {           "type": "object",           "properties": {             "enable": {               "type": "boolean"             },             "enabled": {               "type": "boolean"             },             "highRatio": {               "type": "integer"             },             "normalRatio": {               "type": "integer"             },             "lowRatio": {               "type": "integer"             },             "maxCapThreshold": {               "type": "integer"             },             "minCapThreshold": {               "type": "integer"             }           }         },         "tacacs": {           "type": "object",           "properties": {             "ref": {               "type": "string"             },             "sourceInterface": {               "type": "string"             }           }         }       }     },     "edgeDeviceSettingsDataDhcpServer": {       "type": "object",       "properties": {         "baseDhcpAddr": {           "type": "integer"         },         "enabled": {           "type": "boolean"         },         "leaseTimeSeconds": {           "type": "integer"         },         "dhcpRelay": {           "type": "object",           "properties": {             "servers": {               "type": "array",               "items": {                 "type": "string"               }             }           }         },         "numDhcpAddr": {           "type": "integer"         },         "staticReserved": {           "type": "integer"         },         "options": {           "type": "array",           "items": {             "type": "object",             "properties": {               "option": {                 "type": "integer"               },               "value": {                 "type": "string"               },               "type": {                 "type": "string"               },               "metaData": {                 "type": "object",                 "properties": {                   "dataType": {                     "type": "string"                   },                   "description": {                     "type": "string"                   },                   "display": {                     "type": "boolean"                   },                   "list": {                     "type": "boolean"                   },                   "name": {                     "type": "string"                   },                   "option": {                     "type": "integer"                   }                 }               }             }           }         }       }     },     "deviceSettings": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/deviceSettingsData"             },             "refs": {               "$ref": "#/definitions/deviceSettingsRefs"             }           },           "required": [             "name",             "data"           ]         }       ]     },     "deviceSettingsRefs": {       "type": "object",       "properties": {         "deviceSettings:segment": {           "type": "object"         },         "deviceSettings:dns:primaryProvider": {           "type": "object"         },         "deviceSettings:dns:backupProvider": {           "type": "object"         },         "deviceSettings:dns:privateProviders": {           "type": "object"         },         "deviceSettings:lan:allocation": {           "type": "object"         },         "deviceSettings:tacacs": {           "type": "object"         }       }     },     "deviceSettingsRefs_tacacs": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "logicalId": {           "type": "string"         },         "enterpriseObjectId": {           "type": "integer"         },         "moduleId": {           "type": "integer"         },         "configurationId": {           "type": "integer"         },         "ref": {           "type": "string"         },         "name": {           "type": "string"         },         "type": {           "type": "string"         },         "data": {           "type": "object"         },         "modified": {           "format": "date-time",           "type": "string"         }       }     },     "deviceSettingsData": {       "type": "object",       "properties": {         "lan": {           "type": "object",           "properties": {             "allocation": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 },                 "assignableVlans": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 },                 "managementVlans": {                   "type": "array",                   "items": {                     "type": "integer"                   }                 }               }             }           }         },         "ospf": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "areas": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "id": {                     "type": "integer"                   },                   "name": {                     "type": "string"                   },                   "type": {                     "type": "string"                   }                 }               }             }           }         },         "bgp": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "asn": {               "type": "string"             },             "neighbors": {               "type": "array",               "items": {                 "type": "object"               }             }           }         },         "dns": {           "type": "object",           "properties": {             "primaryProvider": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 }               }             },             "backupProvider": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 }               }             },             "privateProviders": {               "type": "object",               "properties": {                 "ref": {                   "type": "string"                 }               }             }           }         },         "authentication": {           "type": "object",           "properties": {             "ref": {               "type": "string"             }           }         },         "softwareUpdate": {           "type": "object",           "properties": {             "windowed": {               "type": "boolean"             },             "window": {               "type": "object",               "properties": {                 "day": {                   "type": "integer"                 },                 "beginHour": {                   "type": "integer"                 },                 "endHour": {                   "type": "integer"                 }               }             }           }         },         "radioSettings": {           "type": "object",           "properties": {             "country": {               "type": "string"             },             "radios": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "radioId": {                     "type": "integer"                   },                   "isEnabled": {                     "type": "boolean"                   },                   "name": {                     "type": "string"                   },                   "band": {                     "type": "string"                   },                   "channel": {                     "type": "string"                   },                   "width": {                     "type": "string"                   },                   "mode": {                     "type": "string"                   }                 }               }             }           }         },         "netflow": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "version": {               "type": "integer"             },             "collectors": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "address": {                     "type": "string"                   },                   "port": {                     "type": "integer"                   }                 }               }             }           }         },         "vqm": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "protocol": {               "type": "string"             },             "collectors": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "address": {                     "type": "string"                   },                   "port": {                     "type": "integer"                   }                 }               }             }           }         },         "snmp": {           "type": "object",           "properties": {             "port": {               "type": "integer"             },             "snmpv2c": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "community": {                   "type": "string"                 },                 "allowedIp": {                   "type": "array",                   "items": {                     "type": "string"                   }                 }               }             },             "snmpv3": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "users": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "name": {                         "type": "string"                       },                       "passphrase": {                         "type": "string"                       },                       "authAlg": {                         "type": "string"                       },                       "privacy": {                         "type": "boolean"                       },                       "encrAlg": {                         "type": "string"                       }                     }                   }                 }               }             }           }         },         "multiSourceQos": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "highRatio": {               "type": "integer"             },             "normalRatio": {               "type": "integer"             },             "lowRatio": {               "type": "integer"             },             "maxCapThreshold": {               "type": "integer"             },             "minCapThreshold": {               "type": "integer"             }           }         },         "models": {           "type": "object",           "properties": {             "virtual": {               "type": "object",               "properties": {                 "routedInterfaces": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "name": {                         "type": "string"                       },                       "disabled": {                         "type": "boolean"                       },                       "addressing": {                         "type": "object",                         "properties": {                           "type": {                             "type": "string"                           },                           "cidrPrefix": {                             "type": "integer"                           },                           "cidrIp": {                             "type": "string"                           },                           "netmask": {                             "type": "string"                           },                           "gateway": {                             "type": "string"                           }                         }                       },                       "wanOverlay": {                         "type": "string"                       },                       "natDirect": {                         "type": "boolean"                       },                       "ospf": {                         "type": "object",                         "properties": {                           "enabled": {                             "type": "boolean"                           },                           "area": {                             "type": "integer"                           },                           "authentication": {                             "type": "boolean"                           },                           "authId": {                             "type": "integer"                           },                           "authPassphrase": {                             "type": "string"                           },                           "helloTimer": {                             "type": "integer"                           },                           "deadTimer": {                             "type": "integer"                           },                           "md5Authentication": {                             "type": "boolean"                           },                           "cost": {                             "type": "integer"                           },                           "MTU": {                             "type": "integer"                           },                           "passive": {                             "type": "boolean"                           },                           "inboundRouteLearning": {                             "type": "object",                             "properties": {                               "defaultAction": {                                 "type": "string"                               },                               "filters": {                                 "type": "array",                                 "items": {                                   "type": "object"                                 }                               }                             }                           },                           "outboundRouteAdvertisement": {                             "type": "object",                             "properties": {                               "defaultAction": {                                 "type": "string"                               },                               "filters": {                                 "type": "array",                                 "items": {                                   "type": "object"                                 }                               }                             }                           }                         }                       },                       "vlanId": {                         "type": "integer"                       },                       "l2": {                         "type": "object",                         "properties": {                           "autonegotiation": {                             "type": "boolean"                           },                           "speed": {                             "type": "string"                           },                           "duplex": {                             "type": "string"                           },                           "MTU": {                             "type": "integer"                           }                         }                       },                       "underlayAccounting": {                         "type": "boolean",                         "default": true                       },                       "trusted": {                         "type": "boolean"                       },                       "rpf": {                         "type": "string",                         "enum": [                           "SPECIFIC",                           "LOOSE",                           "DISABLED"                         ]                       }                     }                   }                 },                 "lan": {                   "type": "object",                   "properties": {                     "interfaces": {                       "type": "array",                       "items": {                         "type": "object",                         "properties": {                           "space": {                             "type": "string"                           },                           "name": {                             "type": "string"                           },                           "type": {                             "type": "string"                           },                           "cwp": {                             "type": "boolean"                           },                           "portMode": {                             "type": "string"                           },                           "untaggedVlan": {                             "type": "string"                           },                           "disabled": {                             "type": "boolean"                           },                           "l2": {                             "type": "object",                             "properties": {                               "autonegotiation": {                                 "type": "boolean"                               },                               "speed": {                                 "type": "string"                               },                               "duplex": {                                 "type": "string"                               },                               "MTU": {                                 "type": "integer"                               }                             }                           },                           "vlanIds": {                             "type": "array",                             "items": {                               "type": "integer"                             }                           }                         }                       }                     }                   }                 }               }             }           }         },         "vpn": {           "type": "object",           "properties": {             "enabled": {               "type": "boolean"             },             "edgeToDataCenter": {               "type": "boolean"             },             "ref": {               "type": "string"             },             "edgeToEdgeHub": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "ref": {                   "type": "string"                 }               }             },             "edgeToEdge": {               "type": "boolean"             },             "edgeToEdgeDetail": {               "type": "object",               "properties": {                 "useCloudGateway": {                   "type": "boolean"                 },                 "encryptionProtocol": {                   "type": "string"                 },                 "dynamic": {                   "type": "object",                   "properties": {                     "enabled": {                       "type": "boolean"                     },                     "type": {                       "type": "string"                     },                     "timeout": {                       "type": "integer"                     }                   }                 },                 "vpnHubs": {                   "type": "array",                   "items": {                     "type": "object"                   }                 },                 "autoSelectVpnHubs": {                   "type": "boolean"                 }               }             }           }         }       }     },     "WAN": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/WAN_data"             },             "refs": {               "$ref": "#/definitions/genericRefs"             }           }         }       ]     },     "WAN_data": {       "type": "object",       "properties": {         "links": {           "type": "array",           "items": {             "type": "object",             "properties": {               "logicalId": {                 "type": "string"               },               "internalId": {                 "type": "string"               },               "discovery": {                 "type": "string",                 "enum": [                   "DISABLED",                   "AUTO_DISCOVERED",                   "USER_DEFINED"                 ]               },               "mode": {                 "type": "string",                 "enum": [                   "PUBLIC",                   "PRIVATE"                 ]               },               "type": {                 "type": "string",                 "enum": [                   "WIRED",                   "WIRELESS"                 ]               },               "name": {                 "type": "string"               },               "isp": {                 "type": "string"               },               "publicIpAddress": {                 "type": "string"               },               "sourceIpAddress": {                 "type": "string"               },               "nextHopIpAddress": {                 "type": "string"               },               "customVlanId": {                 "type": "boolean"               },               "vlanId": {                 "type": "integer"               },               "virtualIpAddress": {                 "type": "string"               },               "dynamicBwAdjustmentEnabled": {                 "type": "boolean"               },               "bwMeasurement": {                 "type": "string"               },               "upstreamMbps": {                 "type": "string"               },               "downstreamMbps": {                 "type": "string"               },               "backupOnly": {                 "type": "boolean"               },               "overheadBytes": {                 "type": "integer"               },               "udpHolePunching": {                 "type": "boolean"               },               "MTU": {                 "type": "integer"               },               "mplsNetwork": {                 "type": "string"               },               "dscpTag": {                 "type": "string"               },               "staticSlaEnabled": {                 "type": "boolean"               },               "classesofServiceEnabled": {                 "type": "boolean"               },               "encryptOverlay": {                 "type": "boolean"               },               "staticSLA": {                 "type": "object",                 "properties": {                   "latencyMs": {                     "type": "integer"                   },                   "jitterMs": {                     "type": "integer"                   },                   "lossPct": {                     "type": "integer"                   }                 }               },               "classesOfService": {                 "type": "object",                 "properties": {                   "classId": {                     "type": "integer"                   },                   "classesOfService": {                     "type": "array",                     "items": {                       "type": "object",                       "properties": {                         "id": {                           "type": "string"                         },                         "name": {                           "type": "string"                         },                         "dscpTags": {                           "type": "array",                           "items": {                             "type": "string"                           }                         },                         "staticSLA": {                           "type": "object",                           "properties": {                             "latencyMs": {                               "type": "integer"                             },                             "jitterMs": {                               "type": "integer"                             },                             "lossPct": {                               "type": "string"                             }                           }                         },                         "bandwidthPct": {                           "type": "integer"                         },                         "bandwidthGuaranteed": {                           "type": "boolean"                         },                         "defaultClassOfService": {                           "type": "boolean"                         }                       }                     }                   }                 }               },               "interfaces": {                 "type": "array",                 "items": {                   "type": "string"                 }               },               "lastActive": {                 "type": "string"               }             }           }         },         "networks": {           "type": "array",           "items": {             "type": "object",             "properties": {               "mode": {                 "type": "string"               },               "type": {                 "type": "string"               },               "name": {                 "type": "string"               },               "logicalId": {                 "type": "string"               },               "interface": {                 "type": "string"               },               "internalId": {                 "type": "string"               },               "ipAddress": {                 "type": "string"               },               "isp": {                 "type": "string"               },               "lastActive": {                 "type": "integer"               }             }           }         }       }     },     "metaData": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "type": "object",           "properties": {             "data": {               "$ref": "#/definitions/metadata_data"             }           },           "required": [             "name",             "data"           ]         }       ]     },     "metadata_data": {       "type": "object",       "properties": {         "applications": {           "type": "object",           "properties": {             "logicalId": {               "type": "string"             },             "type": {               "type": "string"             },             "version": {               "type": "string"             }           }         }       }     },     "application": {       "properties": {         "class": {           "type": "integer"         },         "description": {           "type": "string"         },         "displayName": {           "type": "string"         },         "id": {           "type": "integer"         },         "knownIpPortMapping": {           "$ref": "#/definitions/ip_port_mapping"         },         "protocolPortMapping": {           "$ref": "#/definitions/protocol_port_mapping"         }       },       "required": [         "id",         "displayName",         "class",         "description",         "knownIpPortMapping",         "protocolPortMapping"       ],       "type": "object"     },     "application_metadata": {       "properties": {         "blobId": {           "type": "integer"         },         "created": {           "format": "date-time",           "type": "string"         },         "description": {           "type": "string"         },         "fileName": {           "type": "string"         },         "id": {           "type": "integer"         },         "logicalId": {           "type": "string"         },         "manifest": {           "$ref": "#/definitions/application_metadata_manifest"         },         "modified": {           "format": "date-time",           "type": "string"         },         "name": {           "type": "string"         },         "networkId": {           "type": "integer"         },         "type": {           "type": "string"         },         "uploadDetails": {           "$ref": "#/definitions/application_metadata_upload_details"         },         "version": {           "type": "string"         }       },       "required": [         "id",         "networkId",         "created",         "name",         "logicalId",         "type",         "description",         "version",         "manifest",         "blobId",         "modified",         "fileName",         "uploadDetails"       ],       "type": "object"     },     "application_metadata_manifest": {       "properties": {         "description": {           "type": "string"         },         "name": {           "type": "string"         },         "version": {           "type": "string"         }       },       "required": [         "name",         "description",         "version"       ],       "type": "object"     },     "application_metadata_upload_details": {       "additionalProperties": true,       "properties": {         "size": {           "type": "integer"         }       },       "required": [         "size"       ],       "type": "object"     },     "auth_object": {       "properties": {         "email": {           "type": "string"         },         "password": {           "type": "string"         },         "password2": {           "format": "password",           "type": "string"         },         "username": {           "type": "string"         }       },       "required": [         "username",         "password"       ],       "type": "object"     },     "basic_metric": {       "enum": [         "packetsRx",         "packetsTx",         "totalPackets",         "bytesRx",         "bytesTx",         "totalBytes"       ],       "type": "string"     },     "basic_metrics": {       "items": {         "$ref": "#/definitions/basic_metric"       },       "type": "array"     },     "edge_link_metric": {       "type": "string",       "enum": [         "bytesRx",         "bytesTx",         "totalBytes",         "p1BytesRx",         "p1BytesTx",         "p1PacketsRx",         "p1PacketsTx",         "p2BytesRx",         "p2BytesTx",         "p2PacketsRx",         "p2PacketsTx",         "p3BytesRx",         "p3BytesTx",         "p3PacketsRx",         "p3PacketsTx",         "controlBytesRx",         "controlBytesTx",         "controlPacketsRx",         "controlPacketsTx",         "bestBwKbpsRx",         "bestBwKbpsTx",         "bestJitterMsRx",         "bestJitterMsTx",         "bestLatencyMsRx",         "bestLatencyMsTx",         "bestLossPctRx",         "bestLossPctTx",         "bpsOfBestPathRx",         "bpsOfBestPathTx",         "signalStrength",         "scoreTx",         "scoreRx"       ]     },     "model_configuration": {       "type": "object",       "properties": {         "created": {           "type": "string"         },         "description": {           "type": "string"         },         "edgeCount": {           "type": "integer"         },         "effective": {           "type": "string"         },         "id": {           "type": "integer"         },         "modified": {           "type": "string"         },         "modules": {           "type": "array",           "items": {             "$ref": "#/definitions/configuration_module"           }         },         "name": {           "type": "string"         },         "version": {           "type": "string"         }       }     },     "empty_object": {       "type": "object",       "properties": {}     },     "bgp_peer_status": {       "type": "object",       "properties": {         "neighborIp": {           "type": "string"         },         "neighborAS": {           "type": "integer"         },         "records": {           "type": "array",           "items": {             "$ref": "#/definitions/bgp_peer_status_record"           }         }       }     },     "bgp_peer_status_record": {       "type": "object",       "properties": {         "timestamp": {           "type": "string",           "format": "date-time"         },         "state": {           "type": "string",           "enum": [             "IDLE",             "CONNECT",             "ACTIVE",             "OPENSENT",             "OPENCONFIRM",             "ESTABLISHED",             "CLEARING",             "IDLEADMIN",             "IDLEPRFXCT"           ]         },         "msgRcvd": {           "type": "integer"         },         "pfxRcvd": {           "type": "integer"         },         "msgSent": {           "type": "integer"         },         "upDownTime": {           "type": "integer"         }       }     },     "config_edge_bgp_filter_set": {       "type": "object",       "properties": {         "ids": {           "type": "array",           "items": {             "type": "string"           }         }       }     },     "config_edge_bgp_neighbor": {       "type": "object",       "properties": {         "neighborAS": {           "type": "string"         },         "neighborIp": {           "type": "string"         },         "neighborTag": {           "type": "string",           "enum": [             "UPLINK"           ]         },         "inboundFilter": {           "$ref": "#/definitions/config_edge_bgp_filter_set"         },         "outboundFilter": {           "$ref": "#/definitions/config_edge_bgp_filter_set"         },         "allowAS": {           "type": "boolean"         },         "connect": {           "type": "string"         },         "defaultRoute": {           "type": "boolean"         },         "holdtime": {           "type": "string"         },         "keepalive": {           "type": "string"         }       }     },     "configuration_clone_configuration_result": {       "properties": {         "id": {           "description": "The ID of the newly cloned configuration",           "type": "integer"         }       },       "required": [         "id"       ],       "type": "object"     },     "configuration_clone_and_convert_configuration_result": {       "properties": {         "id": {           "description": "The ID of the newly cloned configuration",           "type": "integer"         }       },       "required": [         "id"       ],       "type": "object"     },     "configuration_clone_enterprise_template_result": {       "properties": {         "id": {           "description": "The ID of the newly cloned configuration",           "type": "integer"         }       },       "required": [         "id"       ],       "type": "object"     },     "configuration_delete_configuration_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "configuration_get_configuration_modules_result_item": {       "allOf": [         {           "$ref": "#/definitions/configuration_module"         },         {           "required": [             "id",             "name",             "type",             "data",             "refs",             "description",             "configurationId"           ]         }       ]     },     "configuration_get_configuration_result": {       "allOf": [         {           "$ref": "#/definitions/model_configuration"         },         {           "required": [             "id",             "created",             "name",             "version",             "description",             "effective",             "modified"           ]         }       ]     },     "configuration_get_routable_applications_result": {       "properties": {         "applicationClassToApplication": {           "allOf": [             {               "$ref": "#/definitions/id_map_one_to_many"             }           ],           "description": "Maps application class IDs (strings) to application IDs (integers)"         },         "applicationToApplicationClass": {           "allOf": [             {               "$ref": "#/definitions/id_map_one_to_many"             }           ],           "description": "Maps application IDs (strings) to class IDs (integers)"         },         "applications": {           "items": {             "$ref": "#/definitions/application"           },           "type": "array"         },         "metaData": {           "$ref": "#/definitions/application_metadata"         }       },       "required": [         "applications",         "applicationClassToApplication",         "applicationToApplicationClass",         "metaData"       ],       "type": "object"     },     "configuration_insert_configuration_module_result": {       "properties": {         "id": {           "description": "The ID of the newly created configuration module",           "type": "integer"         }       },       "required": [         "id"       ],       "type": "object"     },     "configuration_options_list": {       "items": {         "enum": [           "modules",           "edgeCount",           "enterprises",           "enterpriseCount",           "counts"         ],         "type": "string"       },       "type": "array"     },     "configuration_update_configuration_module_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "base_enterprise_user": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "userType": {           "type": "string"         },         "username": {           "type": "string"         },         "domain": {           "type": "string"         },         "password": {           "type": "string",           "format": "password"         },         "firstName": {           "type": "string"         },         "lastName": {           "type": "string"         },         "officePhone": {           "type": "string"         },         "mobilePhone": {           "type": "string"         },         "isNative": {           "type": "boolean"         },         "isActive": {           "type": "boolean"         },         "isLocked": {           "type": "boolean"         },         "email": {           "type": "string"         },         "lastLogin": {           "type": "string",           "format": "date-time"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "destinations": {       "properties": {         "ip_addr": {           "type": "string"         },         "name": {           "type": "string"         }       },       "type": "object"     },     "disaster_recovery_client_contact": {       "properties": {         "activeAddress": {           "type": "string"         },         "activeLastResponseTime": {           "format": "date-time",           "type": "string"         },         "clientLogicalId": {           "type": "string"         },         "clientType": {           "enum": [             "EDGE",             "GATEWAY"           ],           "type": "string"         },         "id": {           "type": "integer"         },         "modified": {           "format": "date-time",           "type": "string"         },         "standbyAddress": {           "type": "string"         },         "standbyLastResponseTime": {           "format": "date-time",           "type": "string"         }       },       "required": [         "id",         "clientType",         "clientLogicalId",         "activeAddress",         "activeLastResponseTime",         "standbyAddress",         "standbyLastResponseTime",         "modified"       ],       "type": "object"     },     "disaster_recovery_configure_active_for_replication_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "disaster_recovery_demote_active_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "disaster_recovery_get_replication_blob": {       "allOf": [         {           "$ref": "#/definitions/empty_object"         }       ]     },     "disaster_recovery_get_replication_blob_result": {       "properties": {         "activeAccessFromStandby": {           "type": "string"         }       },       "required": [         "activeAccessFromStandby"       ],       "type": "object"     },     "disaster_recovery_get_replication_status_result": {       "properties": {         "activeAddress": {           "type": "string"         },         "activeReplicationAddress": {           "type": "string"         },         "clientContact": {           "type": "array",           "items": {             "$ref": "#/definitions/disaster_recovery_client_contact"           }         },         "clientCount": {           "type": "object",           "properties": {             "edgeCount": {               "type": "integer"             },             "gatewayCount": {               "type": "integer"             },             "currentActiveEdgeCount": {               "type": "integer"             },             "currentStandbyEdgeCount": {               "type": "integer"             },             "currentActiveGatewayCount": {               "type": "integer"             },             "currentStandbyGatewayCount": {               "type": "integer"             }           }         },         "drState": {           "enum": [             "UNCONFIGURED",             "ACTIVE_CONFIGURING",             "ACTIVE_CONFIGURED",             "LAUNCHING_STANDBY",             "LAUNCHED_STANDBY",             "ACTIVE_WAIT_STANDBY",             "PENDING_STANDBY_CANDIDATE",             "STANDBY_CANDIDATE",             "STANDBY_CONFIG_RQST",             "STANDBY_CONFIGURING",             "STANDBY_CONFIGURED",             "PENDING_STANDBY_UNCONFIG",             "STANDBY_UNCONFIG",             "PENDING_STANDBY_PROMOTION",             "STANDBY_PROMOTED",             "PENDING_ACTIVE_DEMOTION",             "COPYING_DB",             "COPY_DB_DONE",             "COPYING_FILES",             "COPY_FILES_DONE",             "SYNC_CONFIGURING",             "STANDBY_SYNC",             "STANDBY_BACKGROUND_IMPORT",             "STANDBY_RUNNING",             "UPGRADING",             "FAILURE_ACTIVE_CONFIGURING",             "FAILURE_LAUNCHING_STANDBY",             "FAILURE_STANDBY_CONFIGURING",             "FAILURE_GET_STANDBY_CONFIG",             "FAILURE_COPYING_DB",             "FAILURE_COPYING_FILES",             "FAILURE_SYNC_CONFIGURING",             "FAILURE_BACKGROUND_IMPORT",             "FAILURE_SYNCING_FILES",             "FAILURE_GET_STANDBY_STATUS",             "FAILURE_GET_ACTIVE_STATUS",             "FAILURE_MYSQL_ACTIVE_STATUS",             "FAILURE_MYSQL_STANDBY_STATUS",             "FAILURE_STANDBY_CANDIDATE",             "FAILURE_STANDBY_UNCONFIG",             "FAILURE_STANDBY_PROMOTION",             "FAILURE_ACTIVE_DEMOTION"           ],           "type": "string"         },         "drVCOUser": {           "type": "string"         },         "failureDescription": {           "type": "string"         },         "lastDrProtectedTime": {           "type": "string",           "format": "date-time"         },         "role": {           "enum": [             "STANDALONE",             "ACTIVE",             "STANDBY",             "ZOMBIE"           ],           "type": "string"         },         "roleTimestamp": {           "type": "string",           "format": "date-time"         },         "standbyList": {           "type": "array",           "items": {             "type": "object",             "properties": {               "standbyAddress": {                 "type": "string"               },               "standbyReplicationAddress": {                 "type": "string"               },               "standbyUuid": {                 "type": "string"               }             }           }         },         "stateHistory": {           "type": "array",           "items": {             "type": "object",             "properties": {               "from": {                 "type": "string",                 "enum": [                   "UNCONFIGURED",                   "ACTIVE_CONFIGURING",                   "ACTIVE_CONFIGURED",                   "LAUNCHING_STANDBY",                   "LAUNCHED_STANDBY",                   "ACTIVE_WAIT_STANDBY",                   "PENDING_STANDBY_CANDIDATE",                   "STANDBY_CANDIDATE",                   "STANDBY_CONFIG_RQST",                   "STANDBY_CONFIGURING",                   "STANDBY_CONFIGURED",                   "PENDING_STANDBY_UNCONFIG",                   "STANDBY_UNCONFIG",                   "PENDING_STANDBY_PROMOTION",                   "STANDBY_PROMOTED",                   "PENDING_ACTIVE_DEMOTION",                   "COPYING_DB",                   "COPY_DB_DONE",                   "COPYING_FILES",                   "COPY_FILES_DONE",                   "SYNC_CONFIGURING",                   "STANDBY_SYNC",                   "STANDBY_BACKGROUND_IMPORT",                   "STANDBY_RUNNING",                   "UPGRADING",                   "FAILURE_ACTIVE_CONFIGURING",                   "FAILURE_LAUNCHING_STANDBY",                   "FAILURE_STANDBY_CONFIGURING",                   "FAILURE_GET_STANDBY_CONFIG",                   "FAILURE_COPYING_DB",                   "FAILURE_COPYING_FILES",                   "FAILURE_SYNC_CONFIGURING",                   "FAILURE_BACKGROUND_IMPORT",                   "FAILURE_SYNCING_FILES",                   "FAILURE_GET_STANDBY_STATUS",                   "FAILURE_GET_ACTIVE_STATUS",                   "FAILURE_MYSQL_ACTIVE_STATUS",                   "FAILURE_MYSQL_STANDBY_STATUS",                   "FAILURE_STANDBY_CANDIDATE",                   "FAILURE_STANDBY_UNCONFIG",                   "FAILURE_STANDBY_PROMOTION",                   "FAILURE_ACTIVE_DEMOTION"                 ]               },               "to": {                 "type": "string",                 "enum": [                   "UNCONFIGURED",                   "ACTIVE_CONFIGURING",                   "ACTIVE_CONFIGURED",                   "LAUNCHING_STANDBY",                   "LAUNCHED_STANDBY",                   "ACTIVE_WAIT_STANDBY",                   "PENDING_STANDBY_CANDIDATE",                   "STANDBY_CANDIDATE",                   "STANDBY_CONFIG_RQST",                   "STANDBY_CONFIGURING",                   "STANDBY_CONFIGURED",                   "PENDING_STANDBY_UNCONFIG",                   "STANDBY_UNCONFIG",                   "PENDING_STANDBY_PROMOTION",                   "STANDBY_PROMOTED",                   "PENDING_ACTIVE_DEMOTION",                   "COPYING_DB",                   "COPY_DB_DONE",                   "COPYING_FILES",                   "COPY_FILES_DONE",                   "SYNC_CONFIGURING",                   "STANDBY_SYNC",                   "STANDBY_BACKGROUND_IMPORT",                   "STANDBY_RUNNING",                   "UPGRADING",                   "FAILURE_ACTIVE_CONFIGURING",                   "FAILURE_LAUNCHING_STANDBY",                   "FAILURE_STANDBY_CONFIGURING",                   "FAILURE_GET_STANDBY_CONFIG",                   "FAILURE_COPYING_DB",                   "FAILURE_COPYING_FILES",                   "FAILURE_SYNC_CONFIGURING",                   "FAILURE_BACKGROUND_IMPORT",                   "FAILURE_SYNCING_FILES",                   "FAILURE_GET_STANDBY_STATUS",                   "FAILURE_GET_ACTIVE_STATUS",                   "FAILURE_MYSQL_ACTIVE_STATUS",                   "FAILURE_MYSQL_STANDBY_STATUS",                   "FAILURE_STANDBY_CANDIDATE",                   "FAILURE_STANDBY_UNCONFIG",                   "FAILURE_STANDBY_PROMOTION",                   "FAILURE_ACTIVE_DEMOTION"                 ]               },               "timestamp": {                 "type": "string",                 "format": "date-time"               }             }           }         },         "stateTimestamp": {           "type": "string",           "format": "date-time"         },         "vcoIp": {           "type": "string"         },         "vcoReplicationIp": {           "type": "string"         },         "vcoUuid": {           "type": "string"         }       },       "required": [         "drState",         "failureDescription",         "role",         "roleTimestamp",         "activeAddress",         "standbyList",         "drVCOUser",         "vcoUuid",         "vcoIp"       ],       "type": "object"     },     "disaster_recovery_prepare_for_standby": {       "allOf": [         {           "$ref": "#/definitions/empty_object"         }       ]     },     "disaster_recovery_prepare_for_standby_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "disaster_recovery_promote_standby_to_active_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "disaster_recovery_remove_standby": {       "allOf": [         {           "$ref": "#/definitions/empty_object"         }       ]     },     "disaster_recovery_remove_standby_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "disaster_recovery_transition_to_standby_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "edge_delete_edge_bgp_neighbor_records_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "edge_delete_edge_result_item": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "edge_edge_cancel_reactivation_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "edge_edge_provision_result": {       "properties": {         "id": {           "type": "integer"         },         "activationKey": {           "type": "string"         },         "generatedCertificate": {           "type": "object",           "properties": {             "certificate": {               "type": "string"             },             "ca-certificate": {               "type": "string"             },             "privateKey": {               "type": "string"             },             "privateKeyPassword": {               "type": "string"             },             "csr": {               "type": "string"             }           }         }       },       "required": [         "id",         "activationKey"       ]     },     "edge_edge_request_reactivation_result": {       "properties": {         "activationKey": {           "type": "string"         },         "activationKeyExpires": {           "format": "date-time",           "type": "string"         }       },       "required": [         "activationKey",         "activationKeyExpires"       ]     },     "edge_get_edge_configuration_stack_result_item": {       "allOf": [         {           "$ref": "#/definitions/model_configuration"         },         {           "required": [             "id",             "created",             "name",             "version",             "description",             "modified",             "modules"           ]         }       ]     },     "edge_get_edge_result": {       "allOf": [         {           "$ref": "#/definitions/edge_object"         },         {           "properties": {             "configuration": {               "$ref": "#/definitions/model_configuration"             },             "enterprise": {               "$ref": "#/definitions/enterprise"             },             "links": {               "type": "array",               "items": {                 "$ref": "#/definitions/link"               }             },             "recentLinks": {               "type": "array",               "items": {                 "$ref": "#/definitions/link"               }             },             "site": {               "$ref": "#/definitions/site"             }           },           "required": [             "id",             "created",             "edgeHardwareId",             "enterpriseId",             "siteId",             "activationKey",             "activationKeyExpires",             "activationState",             "activationTime",             "softwareVersion",             "buildNumber",             "softwareUpdated",             "selfMacAddress",             "deviceId",             "logicalId",             "serialNumber",             "modelNumber",             "deviceFamily",             "name",             "dnsName",             "description",             "alertsEnabled",             "operatorAlertsEnabled",             "edgeState",             "edgeStateTime",             "isLive",             "systemUpSince",             "serviceUpSince",             "lastContact",             "serviceState",             "endpointPkiMode",             "haState",             "haPreviousState",             "haLastContact",             "haSerialNumber",             "modified"           ],           "type": "object"         }       ]     },     "edge_object": {       "properties": {         "activationKey": {           "type": "string"         },         "activationKeyExpires": {           "type": "string"         },         "activationState": {           "enum": [             "UNASSIGNED",             "PENDING",             "ACTIVATED",             "REACTIVATION_PENDING"           ],           "type": "string"         },         "activationTime": {           "type": "string"         },         "alertsEnabled": {           "type": "integer"         },         "buildNumber": {           "type": "string"         },         "created": {           "type": "string"         },         "description": {           "type": "string"         },         "deviceFamily": {           "type": "string"         },         "deviceId": {           "type": "string"         },         "dnsName": {           "type": "string"         },         "edgeHardwareId": {           "type": "string"         },         "edgeState": {           "enum": [             "NEVER_ACTIVATED",             "DEGRADED",             "OFFLINE",             "DISABLED",             "EXPIRED",             "CONNECTED"           ],           "type": "string"         },         "edgeStateTime": {           "type": "string"         },         "endpointPkiMode": {           "enum": [             "CERTIFICATE_DISABLED",             "CERTIFICATE_OPTIONAL",             "CERTIFICATE_REQUIRED"           ],           "type": "string"         },         "enterpriseId": {           "type": "integer"         },         "haLastContact": {           "type": "string"         },         "haPreviousState": {           "enum": [             "UNCONFIGURED",             "PENDING_INIT",             "PENDING_CONFIRMATION",             "PENDING_CONFIRMED",             "PENDING_DISSOCIATION",             "READY",             "FAILED"           ],           "type": "string"         },         "haSerialNumber": {           "type": "string"         },         "haState": {           "enum": [             "UNCONFIGURED",             "PENDING_INIT",             "PENDING_CONFIRMATION",             "PENDING_CONFIRMED",             "PENDING_DISSOCIATION",             "READY",             "FAILED"           ],           "type": "string"         },         "id": {           "type": "integer"         },         "isLive": {           "type": "integer"         },         "lastContact": {           "type": "string"         },         "logicalId": {           "type": "string"         },         "modelNumber": {           "type": "string"         },         "modified": {           "type": "string"         },         "name": {           "type": "string"         },         "operatorAlertsEnabled": {           "type": "integer"         },         "selfMacAddress": {           "type": "string"         },         "serialNumber": {           "type": "string"         },         "serviceState": {           "enum": [             "IN_SERVICE",             "OUT_OF_SERVICE",             "PENDING_SERVICE"           ],           "type": "string"         },         "serviceUpSince": {           "type": "string"         },         "siteId": {           "type": "integer"         },         "softwareUpdated": {           "type": "string"         },         "softwareVersion": {           "type": "string"         },         "systemUpSince": {           "type": "string"         }       },       "type": "object"     },     "edge_set_edge_hand_off_gateways_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "edge_update_edge_admin_password_result": {       "properties": {         "id": {           "description": "The ID of the action queued",           "type": "string"         }       },       "required": [         "id"       ],       "type": "object"     },     "set_client_device_host_name_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "edge_update_edge_attributes_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "edge_update_edge_credentials_by_configuration_result": {       "properties": {         "actionIds": {           "items": {             "type": "integer"           },           "type": "array"         }       },       "required": [         "actionIds"       ],       "type": "object"     },     "edge_set_edge_operator_configuration_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "edge_set_edge_enterprise_configuration_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_alert_notification_user_data": {       "properties": {         "email": {           "type": "string"         },         "emailEnabled": {           "type": "integer"         },         "enabled": {           "type": "integer"         },         "enterpriseUserId": {           "type": "integer"         },         "mobileEnabled": {           "type": "integer"         },         "mobilePhone": {           "type": "string"         },         "smsEnabled": {           "type": "integer"         },         "username": {           "type": "string"         }       },       "required": [         "email",         "emailEnabled",         "enabled",         "enterpriseUserId",         "mobileEnabled",         "mobilePhone",         "smsEnabled",         "username"       ],       "type": "object"     },     "enterprise_delete_enterprise_delete_enterprise_gateway_records_record": {       "properties": {         "gatewayId": {           "type": "integer"         },         "neighborIp": {           "type": "string"         }       },       "type": "object"     },     "enterprise_delete_enterprise_gateway_records_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "enterprise_delete_enterprise_network_allocation_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "enterprise_delete_enterprise_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "enterprise_delete_enterprise_service_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "enterprise_enterprise_proxy": {       "allOf": [         {           "$ref": "#/definitions/enterprise_proxy"         },         {           "required": [             "id",             "created",             "networkId",             "proxyType",             "operateGateways",             "logicalId",             "name",             "domain",             "prefix",             "description",             "contactName",             "contactPhone",             "contactMobile",             "contactEmail",             "streetAddress",             "streetAddress2",             "city",             "state",             "postalCode",             "country",             "lat",             "lon",             "modified"           ]         }       ]     },     "enterprise_get_enterprise_addresses_result_item": {       "properties": {         "address": {           "type": [             "string",             "object"           ]         },         "entity": {           "enum": [             "ACTIVE_VCO",             "STANDBY_VCO",             "GATEWAY",             "DATACENTER"           ],           "type": "string"         }       },       "type": "object"     },     "enterprise_get_enterprise_alert_configurations_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_alert_configuration"         },         {           "required": [             "id",             "created",             "alertDefinitionId",             "enterpriseId",             "enabled",             "name",             "description",             "type",             "definition",             "firstNotificationSeconds",             "maxNotifications",             "notificationIntervalSeconds",             "resetIntervalSeconds",             "modified"           ]         }       ]     },     "enterprise_get_enterprise_alerts_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_alert_trigger"         },         {           "required": [             "id",             "created",             "triggerTime",             "enterpriseAlertConfigurationId",             "enterpriseId",             "edgeId",             "edgeName",             "linkId",             "linkName",             "enterpriseObjectId",             "enterpriseObjectName",             "name",             "type",             "state",             "stateSetTime",             "lastContact",             "firstNotificationSeconds",             "maxNotifications",             "notificationIntervalSeconds",             "resetIntervalSeconds",             "comment",             "nextNotificationTime",             "remainingNotifications",             "timezone",             "locale",             "modified"           ]         }       ]     },     "enterprise_get_enterprise_all_alert_recipients_result": {       "properties": {         "emailEnabled": {           "type": "boolean"         },         "emailList": {           "items": {             "type": "string"           },           "type": "array"         },         "enterpriseUsers": {           "items": {             "$ref": "#/definitions/enterprise_alert_notification_user_data"           },           "type": "array"         },         "mobileEnabled": {           "type": "boolean"         },         "mobileList": {           "items": {             "type": "string"           },           "type": "array"         },         "smsEnabled": {           "type": "boolean"         },         "smsList": {           "items": {             "type": "string"           },           "type": "array"         },         "snmpEnabled": {           "type": "boolean"         },         "snmpList": {           "items": {             "type": "string"           },           "type": "array"         }       },       "required": [         "emailEnabled",         "emailList",         "enterpriseUsers",         "mobileEnabled",         "mobileList",         "smsEnabled",         "smsList"       ],       "type": "object"     },     "enterprise_get_enterprise_capabilities_result": {       "type": "object",       "properties": {         "enableBGP": {           "type": "boolean"         },         "enableCosMapping": {           "type": "boolean"         },         "enableFwLogs": {           "type": "boolean"         },         "enableOSPF": {           "type": "boolean"         },         "enablePKI": {           "type": "boolean"         },         "enablePremium": {           "type": "boolean"         },         "enableServiceRateLimiting": {           "type": "boolean"         }       },       "example": {         "enableBGP": false,         "enableCosMapping": true,         "enableFwLogs": false,         "enableOSPF": true,         "enablePKI": true,         "enablePremium": true,         "enableServiceRateLimiting": false       }     },     "enterprise_get_enterprise_configurations_result_item": {       "allOf": [         {           "$ref": "#/definitions/model_configuration"         },         {           "required": [             "id",             "created",             "name",             "version",             "description",             "effective",             "modified"           ]         }       ]     },     "enterprise_get_enterprise_edges_result_item": {       "allOf": [         {           "$ref": "#/definitions/edge_object"         },         {           "properties": {             "configuration": {               "$ref": "#/definitions/model_configuration"             },             "links": {               "type": "array",               "items": {                 "$ref": "#/definitions/link"               }             },             "recentLinks": {               "type": "array",               "items": {                 "$ref": "#/definitions/link"               }             },             "site": {               "$ref": "#/definitions/site"             }           },           "required": [             "id",             "created",             "edgeHardwareId",             "enterpriseId",             "siteId",             "activationKey",             "activationKeyExpires",             "activationState",             "activationTime",             "softwareVersion",             "buildNumber",             "softwareUpdated",             "selfMacAddress",             "deviceId",             "logicalId",             "serialNumber",             "modelNumber",             "deviceFamily",             "name",             "dnsName",             "description",             "alertsEnabled",             "operatorAlertsEnabled",             "edgeState",             "edgeStateTime",             "isLive",             "systemUpSince",             "serviceUpSince",             "lastContact",             "serviceState",             "endpointPkiMode",             "haState",             "haPreviousState",             "haLastContact",             "haSerialNumber",             "modified"           ],           "type": "object"         }       ]     },     "enterprise_get_enterprise_network_allocation_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object_base"         }       ]     },     "enterprise_get_enterprise_network_allocations_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object_base"         }       ]     },     "enterprise_get_enterprise_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise"         },         {           "properties": {             "enterpriseProxy": {               "$ref": "#/definitions/enterprise_enterprise_proxy"             }           },           "required": [             "domain",             "contactPhone",             "locale",             "alertsEnabled",             "endpointPkiMode",             "contactEmail",             "prefix",             "contactName",             "timezone",             "id",             "gatewayPoolId",             "networkId",             "city",             "lon",             "state",             "streetAddress",             "postalCode",             "streetAddress2",             "description",             "accountNumber",             "contactMobile",             "lat",             "logicalId",             "operatorAlertsEnabled",             "name",             "created",             "country",             "modified"           ]         }       ]     },     "enterprise_get_enterprise_route_configuration_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object_base"         }       ]     },     "enterprise_get_enterprise_route_table_result": {       "properties": {         "profiles": {           "items": {             "allOf": [               {                 "$ref": "#/definitions/model_configuration"               },               {                 "required": [                   "id",                   "description",                   "name"                 ]               }             ],             "type": "object"           },           "type": "array"         },         "subnets": {           "items": {             "$ref": "#/definitions/enterprise_route_collection"           },           "type": "array"         }       },       "type": "object"     },     "enterprise_get_enterprise_services_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object_base"         }       ]     },     "enterprise_object": {       "allOf": [         {           "$ref": "#/definitions/site"         },         {           "type": "object",           "properties": {             "gatewayPoolId": {               "type": "integer"             },             "name": {               "type": "string"             },             "networkId": {               "type": "integer"             },             "returnData": {               "type": "boolean"             },             "user": {               "$ref": "#/definitions/auth_object"             }           }         }       ]     },     "enterprise_insert_enterprise_network_allocation_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_insert_enterprise_network_segment_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_insert_enterprise": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object"         },         {           "type": "object",           "properties": {             "configurationId": {               "type": "integer"             },             "enableEnterpriseDelegationToOperator": {               "type": "boolean"             },             "enableEnterpriseDelegationToProxy": {               "type": "boolean"             },             "enableEnterpriseUserManagementDelegationToOperator": {               "type": "boolean"             }           },           "required": [             "networkId",             "configurationId",             "name"           ]         }       ]     },     "enterprise_insert_enterprise_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_proxy_insert_enterprise_proxy_enterprise": {       "allOf": [         {           "$ref": "#/definitions/enterprise_insert_enterprise"         },         {           "type": "object",           "properties": {             "enterpriseProxyId": {               "type": "integer"             }           }         }       ]     },     "enterprise_proxy_insert_enterprise_proxy_enterprise_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_insert_enterprise_result"         }       ]     },     "enterprise_proxy_get_enterprise_proxy_enterprises_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise"         },         {           "type": "object",           "properties": {             "edgeCount": {               "type": "integer"             },             "edges": {               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_object"               }             }           }         }       ]     },     "proxy_edge_inventory_object": {       "type": "object",       "properties": {         "enterpriseName": {           "type": "string"         },         "enterpriseId": {           "type": "integer"         },         "edgeName": {           "type": "string"         },         "edgeId": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "edgeState": {           "type": "string",           "enum": [             "NEVER_ACTIVATED",             "DEGRADED",             "OFFLINE",             "DISABLED",             "EXPIRED",             "CONNECTED"           ]         },         "serialNumber": {           "type": "string"         },         "haSerialNumber": {           "type": "string"         },         "activationState": {           "type": "string",           "enum": [             "UNASSIGNED",             "PENDING",             "ACTIVATED",             "REACTIVATION_PENDING"           ]         },         "activationTime": {           "type": "string",           "format": "date-time"         },         "modelNumber": {           "type": "string"         },         "softwareVersion": {           "type": "string"         },         "softwareUpdated": {           "type": "string",           "format": "date-time"         },         "lastContact": {           "type": "string",           "format": "date-time"         }       },       "required": [         "enterpriseName",         "enterpriseId",         "edgeName",         "edgeId",         "created",         "edgeState",         "serialNumber",         "haSerialNumber",         "activationState",         "activationTime",         "modelNumber",         "softwareVersion",         "softwareUpdated",         "lastContact"       ]     },     "enterprise_proxy_get_enterprise_proxy_edge_inventory_result_item": {       "allOf": [         {           "$ref": "#/definitions/proxy_edge_inventory_object"         }       ]     },     "enterprise_proxy_get_enterprise_proxy_operator_profiles_result_item": {       "allOf": [         {           "$ref": "#/definitions/model_configuration"         },         {           "type": "object",           "properties": {             "edges": {               "type": "array",               "items": {                 "$ref": "#/definitions/edge_object"               }             },             "enterprises": {               "type": "array",               "items": {                 "$ref": "#/definitions/configuration_enterprise"               }             }           },           "required": [             "id",             "created",             "name",             "version",             "description",             "effective",             "modified"           ]         }       ]     },     "enterprise_insert_enterprise_service_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_insert_or_update_enterprise_alert_configurations_result": {       "type": "object",       "properties": {         "enterpriseAlertConfigurations": {           "type": "array",           "items": {             "$ref": "#/definitions/enterprise_alert_configuration"           }         }       }     },     "enterprise_insert_or_update_enterprise_capability_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_insert_or_update_enterprise_property_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_property": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "enterpriseId": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "name": {           "type": "string"         },         "value": {           "type": "string"         },         "isPassword": {           "type": "boolean"         },         "dataType": {           "type": "string",           "enum": [             "STRING",             "NUMBER",             "BOOLEAN",             "JSON",             "DATE",             "DATETIME"           ]         },         "description": {           "type": "string"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "enterprise_get_enterprise_property_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_property"         },         {           "required": [             "id",             "created",             "name",             "enterpriseId",             "value",             "isPassword",             "dataType",             "description",             "modified"           ]         }       ]     },     "enterprise_get_enterprise_gateway_handoff_result": {       "allOf": [         {           "$ref": "#/definitions/gateway_handoff"         },         {           "type": "object",           "properties": {             "id": {               "type": "integer"             },             "created": {               "type": "string",               "format": "date-time"             },             "name": {               "type": "string"             },             "isPassword": {               "type": "boolean"             },             "dataType": {               "type": "string"             },             "description": {               "type": "string"             },             "modified": {               "type": "string",               "format": "date-time"             }           },           "required": [             "enterpriseId",             "value"           ]         }       ]     },     "enterprise_insert_or_update_enterprise_gateway_handoff": {       "allOf": [         {           "$ref": "#/definitions/gateway_handoff"         }       ]     },     "enterprise_insert_or_update_enterprise_gateway_handoff_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_proxy_get_enterprise_proxy_gateway_pools_result_item": {       "allOf": [         {           "$ref": "#/definitions/gateway_pool"         },         {           "properties": {             "enterprises": {               "items": {                 "$ref": "#/definitions/enterprise"               },               "type": "array"             },             "gateways": {               "items": {                 "$ref": "#/definitions/gateway_pool_gateway"               },               "type": "array"             }           }         }       ]     },     "enterprise_route_collection": {       "properties": {         "eligableExits": {           "items": {             "$ref": "#/definitions/enterprise_route"           },           "type": "array"         },         "preferredExits": {           "items": {             "$ref": "#/definitions/enterprise_route"           },           "type": "array"         },         "subnet": {           "type": "string"         }       },       "type": "object"     },     "enterprise_set_enterprise_all_alert_recipients_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_get_enterprise_all_alert_recipients_result"         }       ]     },     "enterprise_update_enterprise_network_allocation_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_update_enterprise_network_segment_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_update_enterprise_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_update_enterprise_route_configuration_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_update_enterprise_route_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_route_collection"         },         {           "required": [             "subnet",             "preferredExits",             "eligableExits"           ]         }       ]     },     "enterprise_update_enterprise_security_policy_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_update_enterprise_service_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "event_get_enterprise_events_result": {       "properties": {         "data": {           "items": {             "$ref": "#/definitions/enterprise_event"           },           "type": "array"         },         "metaData": {           "$ref": "#/definitions/list_metadata"         }       },       "required": [         "metaData",         "data"       ],       "type": "object"     },     "event_get_operator_events_result": {       "properties": {         "data": {           "items": {             "$ref": "#/definitions/operator_event"           },           "type": "array"         },         "metaData": {           "$ref": "#/definitions/list_metadata"         }       },       "required": [         "metaData",         "data"       ],       "type": "object"     },     "flow_metric_summary": {       "properties": {         "bytesRx": {           "type": "integer"         },         "bytesTx": {           "type": "integer"         },         "flowCount": {           "type": "integer"         },         "packetsRx": {           "type": "integer"         },         "packetsTx": {           "type": "integer"         },         "totalBytes": {           "type": "integer"         },         "totalPackets": {           "type": "integer"         }       },       "type": "object"     },     "flow_metric_time_series_item": {       "properties": {         "data": {           "items": {             "type": "integer"           },           "type": "array"         },         "max": {           "type": "integer"         },         "metric": {           "$ref": "#/definitions/basic_metric"         },         "min": {           "type": "integer"         },         "startTime": {           "type": "string",           "format": "date-time"         },         "tickInterval": {           "type": "integer"         },         "total": {           "type": "integer"         }       },       "required": [         "data",         "metric",         "max",         "min",         "startTime",         "tickInterval",         "total"       ],       "type": "object"     },     "flow_metric_time_series_meta_base": {       "properties": {         "series": {           "type": "array",           "items": {             "$ref": "#/definitions/flow_metric_time_series_item"           }         }       },       "required": [         "series"       ],       "type": "object"     },     "enterprise_user_with_role_info": {       "allOf": [         {           "$ref": "#/definitions/base_enterprise_user"         },         {           "properties": {             "roleId": {               "type": "integer"             },             "roleName": {               "type": "string"             }           }         }       ]     },     "enterprise_user_with_role_and_assocs": {       "allOf": [         {           "$ref": "#/definitions/enterprise_user_with_role_info"         },         {           "properties": {             "enterpriseId": {               "type": "integer"             },             "enterpriseProxyId": {               "type": "integer"             },             "networkId": {               "type": "integer"             }           }         }       ]     },     "base_operator_user": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "operatorId": {           "type": "integer"         },         "userType": {           "type": "string"         },         "username": {           "type": "string"         },         "domain": {           "type": "string"         },         "password": {           "type": "string",           "format": "password"         },         "firstName": {           "type": "string"         },         "lastName": {           "type": "string"         },         "officePhone": {           "type": "string"         },         "mobilePhone": {           "type": "string"         },         "isNative": {           "type": "boolean"         },         "isActive": {           "type": "boolean"         },         "isLocked": {           "type": "boolean"         },         "email": {           "type": "string"         },         "lastLogin": {           "type": "string",           "format": "date-time"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "operator_user_with_role_info": {       "allOf": [         {           "$ref": "#/definitions/base_operator_user"         },         {           "properties": {             "roleId": {               "type": "integer"             },             "roleName": {               "type": "string"             }           }         }       ]     },     "gateway_delete_gateway_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "gateway_gateway_provision_result": {       "properties": {         "activationKey": {           "type": "string"         },         "id": {           "type": "integer"         },         "logicalId": {           "type": "string"         }       },       "required": [         "id",         "activationKey",         "logicalId"       ],       "type": "object"     },     "gateway_roles_object": {       "items": {         "properties": {           "gatewayRole": {             "enum": [               "DATA_PLANE",               "CONTROL_PLANE",               "VPN_TUNNEL",               "ON_PREMISE",               "CDE"             ],             "type": "string"           },           "required": {             "type": "boolean"           }         },         "type": "object"       },       "type": "array"     },     "gateway_update_gateway_attributes_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "gateway_get_gateway_edge_assignments_result_item": {       "allOf": [         {           "$ref": "#/definitions/edge_object"         },         {           "type": "object",           "properties": {             "enterpriseName": {               "type": "string"             },             "enterpriseProxyId": {               "type": "integer"             },             "enterpriseProxyName": {               "type": "string"             },             "lat": {               "type": "number"             },             "lon": {               "type": "number"             },             "city": {               "type": "string"             },             "state": {               "type": "string"             },             "country": {               "type": "string"             },             "postalCode": {               "type": "string"             }           }         }       ]     },     "id_map_one_to_many": {       "additionalProperties": {         "type": "integer"       },       "type": "object"     },     "interval": {       "properties": {         "end": {           "format": "date-time",           "type": "string"         },         "start": {           "format": "date-time",           "type": "string"         }       },       "required": [         "start"       ],       "type": "object"     },     "ip_port_mapping": {       "properties": {         "subnets": {           "items": {             "type": "string"           },           "type": "array"         },         "tcpPorts": {           "items": {             "type": "integer"           },           "type": "array"         },         "udpPorts": {           "items": {             "type": "integer"           },           "type": "array"         }       },       "type": "object"     },     "link_quality_event_get_link_quality_events_result": {       "type": "object",       "properties": {         "overallLinkQuality": {           "$ref": "#/definitions/link_quality_object"         }       },       "additionalProperties": {         "$ref": "#/definitions/link_quality_object"       }     },     "link_service_groups": {       "items": {         "enum": [           "ALL",           "PRIVATE_WIRED",           "PUBLIC_WIRED",           "PUBLIC_WIRELESS"         ],         "type": "string"       },       "type": "array"     },     "list_metadata": {       "properties": {         "limit": {           "type": "integer"         },         "more": {           "type": "boolean"         }       },       "required": [         "limit",         "more"       ],       "type": "object"     },     "live_mode_data": {       "properties": {         "linkStats": {           "$ref": "#/definitions/live_mode_data_link_stats"         }       },       "required": [         "linkStats"       ],       "type": "object"     },     "live_mode_data_link_stats": {       "properties": {         "data": {           "items": {             "$ref": "#/definitions/live_mode_data_link_stats_data"           },           "type": "array"         },         "timestamp": {           "format": "date-time",           "type": "string"         },         "type": {           "type": "string"         }       },       "required": [         "type",         "timestamp",         "data"       ],       "type": "object"     },     "live_mode_data_link_stats_data": {       "properties": {         "data": {           "items": {             "$ref": "#/definitions/live_mode_data_link_stats_data_data"           },           "type": "array"         },         "timestamp": {           "format": "date-time",           "type": "string"         },         "type": {           "type": "string"         }       },       "required": [         "type",         "timestamp",         "data"       ],       "type": "object"     },     "live_mode_data_link_stats_data_data": {       "properties": {         "backupOnly": {           "type": "integer"         },         "bestJitterMsRx": {           "type": "integer"         },         "bestJitterMsTx": {           "type": "integer"         },         "bestLatencyMsRx": {           "type": "integer"         },         "bestLatencyMsTx": {           "type": "integer"         },         "bestLossPctRx": {           "type": "integer"         },         "bestLossPctTx": {           "type": "integer"         },         "bpsOfBestPathRx": {           "type": "integer"         },         "bpsOfBestPathTx": {           "type": "integer"         },         "bytesRx": {           "type": "integer"         },         "bytesTx": {           "type": "integer"         },         "controlBytesRx": {           "type": "integer"         },         "controlBytesTx": {           "type": "integer"         },         "controlPacketsRx": {           "type": "integer"         },         "controlPacketsTx": {           "type": "integer"         },         "destinations": {           "items": {             "$ref": "#/definitions/destinations"           },           "type": "array"         },         "icmpBytesRx": {           "type": "integer"         },         "icmpBytesTx": {           "type": "integer"         },         "icmpPacketsRx": {           "type": "integer"         },         "icmpPacketsTx": {           "type": "integer"         },         "interface": {           "type": "string"         },         "internalId": {           "type": "string"         },         "localIpAddress": {           "type": "string"         },         "logicalId": {           "type": "string"         },         "mode": {           "enum": [             "PUBLIC",             "PRIVATE"           ],           "type": "string"         },         "mtu": {           "type": "integer"         },         "name": {           "type": "string"         },         "otherBytesRx": {           "type": "integer"         },         "otherBytesTx": {           "type": "integer"         },         "otherPacketsRx": {           "type": "integer"         },         "otherPacketsTx": {           "type": "integer"         },         "p1BytesRx": {           "type": "integer"         },         "p1BytesTx": {           "type": "integer"         },         "p1PacketsRx": {           "type": "integer"         },         "p1PacketsTx": {           "type": "integer"         },         "p2BytesRx": {           "type": "integer"         },         "p2BytesTx": {           "type": "integer"         },         "p2PacketsRx": {           "type": "integer"         },         "p2PacketsTx": {           "type": "integer"         },         "p3BytesRx": {           "type": "integer"         },         "p3BytesTx": {           "type": "integer"         },         "p3PacketsRx": {           "type": "integer"         },         "p3PacketsTx": {           "type": "integer"         },         "publicIpAddress": {           "type": "string"         },         "scoreRx": {           "type": "integer"         },         "scoreTx": {           "type": "integer"         },         "signalStrength": {           "type": "integer"         },         "state": {           "enum": [             "UNKNOWN",             "STABLE",             "UNSTABLE",             "DISCONNECTED",             "QUIET",             "INITIAL",             "STANDBY"           ],           "type": "string"         },         "tcpBytesRx": {           "type": "integer"         },         "tcpBytesTx": {           "type": "integer"         },         "tcpPacketsRx": {           "type": "integer"         },         "tcpPacketsTx": {           "type": "integer"         },         "type": {           "enum": [             "WIRED",             "WIRELESS"           ],           "type": "string"         },         "udpBytesRx": {           "type": "integer"         },         "udpBytesTx": {           "type": "integer"         },         "udpHolePunching": {           "type": "integer"         },         "udpPacketsRx": {           "type": "integer"         },         "udpPacketsTx": {           "type": "integer"         },         "vlanId": {           "type": "integer"         },         "vpnState": {           "enum": [             "UNKNOWN",             "STABLE",             "UNSTABLE",             "DEAD",             "STANDBY"           ],           "type": "string"         }       },       "type": "object"     },     "live_mode_enter_live_mode_result": {       "properties": {         "actionId": {           "description": "The ID of the action queued",           "type": "integer"         },         "alreadyLive": {           "type": "boolean"         },         "lastContact": {           "type": "integer"         },         "refreshIntervalMs": {           "type": "integer"         },         "token": {           "type": "string"         },         "url": {           "type": "string"         }       },       "type": "object"     },     "live_mode_exit_live_mode_result": {       "properties": {         "id": {           "description": "The ID of the action queued",           "type": "string"         }       },       "required": [         "id"       ],       "type": "object"     },     "live_mode_read_live_data_result": {       "properties": {         "data": {           "$ref": "#/definitions/live_mode_data"         },         "status": {           "$ref": "#/definitions/live_mode_status"         },         "timestamp": {           "type": "integer"         }       },       "required": [         "timestamp",         "data",         "status"       ],       "type": "object"     },     "live_mode_status": {       "properties": {         "isActive": {           "type": "boolean"         },         "lastContact": {           "type": "integer"         }       },       "required": [         "isActive",         "lastContact"       ],       "type": "object"     },     "metrics_get_edge_app_link_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "linkId": {               "type": "integer"             },             "name": {               "type": "integer"             },             "serviceGroups": {               "$ref": "#/definitions/link_service_groups"             }           },           "required": [             "linkId",             "name",             "serviceGroups"           ]         }       ]     },     "metrics_get_edge_app_link_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "integer"             },             "serviceGroups": {               "$ref": "#/definitions/link_service_groups"             }           },           "required": [             "name",             "serviceGroups"           ]         }       ]     },     "metrics_get_edge_app_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "application": {               "type": "integer"             },             "category": {               "type": "integer"             },             "name": {               "type": "integer"             },             "linkId": {               "type": "integer"             }           },           "required": [             "name",             "application"           ]         }       ]     },     "metrics_get_edge_app_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "integer"             }           },           "required": [             "name"           ]         }       ]     },     "metrics_get_edge_category_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "category": {               "type": "integer"             },             "name": {               "type": "integer"             }           },           "required": [             "name",             "category"           ]         }       ]     },     "metrics_get_edge_category_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "integer"             }           },           "required": [             "name"           ]         }       ]     },     "metrics_get_edge_segment_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "segment": {               "type": "integer"             },             "name": {               "type": "integer"             }           },           "required": [             "name",             "segment"           ]         }       ]     },     "metrics_get_edge_segment_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "integer"             }           },           "required": [             "name"           ]         }       ]     },     "metrics_get_edge_dest_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "destDomain": {               "type": "string"             },             "name": {               "type": "string"             }           },           "required": [             "destDomain",             "name"           ]         }       ]     },     "metrics_get_edge_dest_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "string"             }           },           "required": [             "name"           ]         }       ]     },     "metrics_get_edge_device_metrics_device_edge_info": {       "properties": {         "edgeId": {           "type": "integer"         },         "enterpriseId": {           "type": "integer"         },         "hostName": {           "type": "string"         },         "id": {           "type": "integer"         },         "ipAddress": {           "type": "string"         },         "lastContact": {           "format": "date-time",           "type": "string"         },         "macAddress": {           "type": "string"         }       },       "type": "object"     },     "metrics_get_edge_device_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "edgeInfo": {               "$ref": "#/definitions/metrics_get_edge_device_metrics_device_edge_info"             },             "info": {               "$ref": "#/definitions/client_device"             },             "name": {               "type": "string"             },             "sourceMac": {               "type": "string"             }           },           "required": [             "edgeInfo",             "info",             "name",             "sourceMac"           ]         }       ]     },     "metrics_get_edge_device_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "string"             }           },           "required": [             "name"           ]         }       ]     },     "metrics_get_edge_link_metrics_result_item": {       "properties": {         "bestJitterMsRx": {           "type": "integer"         },         "bestJitterMsTx": {           "type": "integer"         },         "bestLatencyMsRx": {           "type": "integer"         },         "bestLatencyMsTx": {           "type": "integer"         },         "bestLossPctRx": {           "type": "integer"         },         "bestLossPctTx": {           "type": "integer"         },         "bpsOfBestPathRx": {           "type": "integer"         },         "bpsOfBestPathTx": {           "type": "integer"         },         "bytesRx": {           "type": "integer"         },         "bytesTx": {           "type": "integer"         },         "controlBytesRx": {           "type": "integer"         },         "controlBytesTx": {           "type": "integer"         },         "controlPacketsRx": {           "type": "integer"         },         "controlPacketsTx": {           "type": "integer"         },         "link": {           "$ref": "#/definitions/link"         },         "linkId": {           "type": "integer"         },         "name": {           "type": "string"         },         "p1BytesRx": {           "type": "integer"         },         "p1BytesTx": {           "type": "integer"         },         "p1PacketsRx": {           "type": "integer"         },         "p1PacketsTx": {           "type": "integer"         },         "p2BytesRx": {           "type": "integer"         },         "p2BytesTx": {           "type": "integer"         },         "p2PacketsRx": {           "type": "integer"         },         "p2PacketsTx": {           "type": "integer"         },         "p3BytesRx": {           "type": "integer"         },         "p3BytesTx": {           "type": "integer"         },         "p3PacketsRx": {           "type": "integer"         },         "p3PacketsTx": {           "type": "integer"         },         "scoreRx": {           "type": "integer"         },         "scoreTx": {           "type": "integer"         },         "signalStrength": {           "type": "integer"         },         "state": {           "type": "integer"         }       },       "required": [         "link",         "linkId",         "name"       ],       "type": "object"     },     "metrics_get_edge_link_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "edgeId": {               "type": "integer"             },             "link": {               "$ref": "#/definitions/link"             },             "linkId": {               "type": "integer"             }           },           "required": [             "edgeId",             "linkId",             "link"           ]         }       ]     },     "metrics_get_edge_os_metrics_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_summary"         },         {           "properties": {             "name": {               "type": "integer"             },             "os": {               "type": "integer"             }           },           "required": [             "os",             "name"           ]         }       ]     },     "metrics_get_edge_os_series_result_item": {       "allOf": [         {           "$ref": "#/definitions/flow_metric_time_series_meta_base"         },         {           "properties": {             "name": {               "type": "integer"             }           },           "required": [             "name"           ]         }       ]     },     "monitoring_get_aggregate_edge_link_metrics_result_item": {       "type": "object",       "properties": {         "bestJitterMsRx": {           "type": "integer"         },         "bestJitterMsTx": {           "type": "integer"         },         "bestLatencyMsRx": {           "type": "integer"         },         "bestLatencyMsTx": {           "type": "integer"         },         "bestLossPctRx": {           "type": "integer"         },         "bestLossPctTx": {           "type": "integer"         },         "bpsOfBestPathRx": {           "type": "integer"         },         "bpsOfBestPathTx": {           "type": "integer"         },         "bytesRx": {           "type": "integer"         },         "bytesTx": {           "type": "integer"         },         "controlBytesRx": {           "type": "integer"         },         "controlBytesTx": {           "type": "integer"         },         "controlPacketsRx": {           "type": "integer"         },         "controlPacketsTx": {           "type": "integer"         },         "link": {           "type": "object",           "properties": {             "enterpriseName": {               "type": "string"             },             "enterpriseId": {               "type": "integer"             },             "edgeName": {               "type": "string"             },             "edgeSerialNumber": {               "type": "string"             },             "edgeHASerialNumber": {               "type": "string"             },             "edgeState": {               "type": "string",               "enum": [                 "NEVER_ACTIVATED",                 "DEGRADED",                 "OFFLINE",                 "DISABLED",                 "EXPIRED",                 "CONNECTED"               ]             },             "edgeLastContact": {               "type": "string",               "format": "date-time"             },             "edgeId": {               "type": "integer"             },             "edgeSystemUpSince": {               "type": "string",               "format": "date-time"             },             "edgeServiceUpSince": {               "type": "string",               "format": "date-time"             },             "edgeModelNumber": {               "type": "string"             },             "isp": {               "type": "string"             },             "displayName": {               "type": "string"             },             "interface": {               "type": "string"             },             "linkId": {               "type": "integer"             },             "linkState": {               "type": "string",               "enum": [                 "UNKNOWN",                 "STABLE",                 "UNSTABLE",                 "DISCONNECTED",                 "QUIET",                 "INITIAL",                 "STANDBY"               ]             },             "linkLastActive": {               "type": "string",               "format": "date-time"             },             "linkVpnState": {               "type": "string",               "enum": [                 "UNKNOWN",                 "STABLE",                 "UNSTABLE",                 "DEAD",                 "STANDBY"               ]             }           },           "required": [             "id",             "created",             "edgeId",             "logicalId",             "internalId",             "interface",             "macAddress",             "ipAddress",             "netmask",             "networkSide",             "networkType",             "displayName",             "isp",             "org",             "lat",             "lon",             "lastActive",             "state",             "backupState",             "vpnState",             "lastEvent",             "lastEventState",             "alertsEnabled",             "operatorAlertsEnabled",             "serviceState",             "modified"           ]         },         "linkId": {           "type": "integer"         },         "name": {           "type": "string"         },         "p1BytesRx": {           "type": "integer"         },         "p1BytesTx": {           "type": "integer"         },         "p1PacketsRx": {           "type": "integer"         },         "p1PacketsTx": {           "type": "integer"         },         "p2BytesRx": {           "type": "integer"         },         "p2BytesTx": {           "type": "integer"         },         "p2PacketsRx": {           "type": "integer"         },         "p2PacketsTx": {           "type": "integer"         },         "p3BytesRx": {           "type": "integer"         },         "p3BytesTx": {           "type": "integer"         },         "p3PacketsRx": {           "type": "integer"         },         "p3PacketsTx": {           "type": "integer"         },         "scoreRx": {           "type": "integer"         },         "scoreTx": {           "type": "integer"         },         "signalStrength": {           "type": "integer"         },         "state": {           "type": "integer"         }       },       "required": [         "link",         "linkId",         "name"       ]     },     "monitoring_get_aggregate_enterprise_events_result": {       "type": "object",       "properties": {         "data": {           "items": {             "$ref": "#/definitions/aggregate_enterprise_event"           },           "type": "array"         },         "metaData": {           "$ref": "#/definitions/list_metadata"         }       },       "required": [         "metaData",         "data"       ]     },     "monitoring_get_aggregates_result": {       "type": "object",       "properties": {         "edgeCount": {           "type": "integer"         },         "edges": {           "type": "object",           "additionalProperties": {             "type": "integer"           }         },         "enterprises": {           "type": "array",           "items": {             "$ref": "#/definitions/enterprise_with_proxy_attributes"           }         }       }     },     "monitoring_get_enterprise_bgp_peer_status_result_item": {       "type": "object",       "properties": {         "gatewayName": {           "type": "string"         },         "gatewayLogicalId": {           "type": "string"         },         "neighbors": {           "type": "array",           "items": {             "$ref": "#/definitions/bgp_peer_status"           }         }       }     },     "monitoring_get_enterprise_edge_bgp_peer_status_result_item": {       "type": "object",       "properties": {         "edgeName": {           "type": "string"         },         "edgeId": {           "type": "integer"         },         "edgeLogicalId": {           "type": "string"         },         "neighbors": {           "type": "array",           "items": {             "$ref": "#/definitions/bgp_peer_status"           }         }       }     },     "monitoring_get_enterprise_edge_link_status_result_item": {       "type": "object",       "properties": {         "edgeId": {           "type": "integer"         },         "edgeLastContact": {           "format": "date-time",           "type": "string"         },         "edgeModelNumber": {           "type": "string"         },         "edgeName": {           "type": "string"         },         "edgeServiceUpSince": {           "format": "date-time",           "type": "string"         },         "edgeState": {           "enum": [             "NEVER_ACTIVATED",             "DEGRADED",             "OFFLINE",             "DISABLED",             "EXPIRED",             "CONNECTED"           ],           "type": "string"         },         "edgeSystemUpSince": {           "format": "date-time",           "type": "string"         },         "enterpriseId": {           "type": "integer"         },         "enterpriseName": {           "type": "string"         },         "interface": {           "type": "string"         },         "isp": {           "type": "string"         },         "linkId": {           "type": "integer"         },         "linkLastActive": {           "format": "date-time",           "type": "string"         },         "linkState": {           "enum": [             "UNKNOWN",             "STABLE",             "UNSTABLE",             "DISCONNECTED",             "QUIET",             "INITIAL",             "STANDBY"           ],           "type": "string"         }       },       "required": [         "enterpriseName",         "enterpriseId",         "edgeName",         "edgeState",         "edgeLastContact",         "edgeId",         "edgeSystemUpSince",         "edgeServiceUpSince",         "edgeModelNumber",         "isp",         "interface",         "linkState",         "linkLastActive",         "linkId"       ]     },     "monitoring_get_enterprise_edge_vnf_status_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object_base"         },         {           "type": "object",           "properties": {             "data": {               "type": "object",               "properties": {                 "type": {                   "type": "string"                 },                 "vendor": {                   "type": "string"                 },                 "vendorSpecificData": {                   "type": "object"                 }               }             },             "edgeCount": {               "type": "integer"             },             "edgeUsage": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "configurationId": {                     "type": "integer"                   },                   "edgeSpecificId": {                     "type": "integer"                   },                   "name": {                     "type": "string"                   },                   "logicalId": {                     "type": "string"                   },                   "profileId": {                     "type": "integer"                   },                   "vnfStatus": {                     "type": "object",                     "properties": {                       "description": {                         "type": "string"                       },                       "status": {                         "type": "string"                       },                       "vmStatus": {                         "type": "string"                       },                       "vnfInsertionEnabled": {                         "type": "string"                       }                     }                   }                 }               }             }           }         }       ]     },     "network_delete_network_gateway_pool_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "network_get_network_configurations_result_item": {       "allOf": [         {           "$ref": "#/definitions/model_configuration"         },         {           "required": [             "id",             "created",             "description",             "effective",             "modified",             "name",             "version"           ]         }       ]     },     "network_get_network_enterprises_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise"         },         {           "properties": {             "enterpriseProxyId": {               "type": "integer"             },             "enterpriseProxyName": {               "type": "string"             },             "edgeCount": {               "type": "integer"             },             "edges": {               "type": "array",               "items": {                 "$ref": "#/definitions/edge_object"               }             },             "edgeConfigUpdate": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "enabledOnUpgrade": {                   "type": "boolean"                 }               }             }           }         }       ]     },     "network_get_network_gateway_pools_result_item": {       "allOf": [         {           "$ref": "#/definitions/gateway_pool"         },         {           "properties": {             "gateways": {               "type": "array",               "items": {                 "$ref": "#/definitions/gateway_pool_gateway"               }             },             "enterprises": {               "type": "array",               "items": {                 "$ref": "#/definitions/enterprise_with_proxy_attributes"               }             }           },           "required": [             "id",             "networkId",             "enterpriseProxyId",             "created",             "name",             "description",             "isDefault",             "handOffType",             "modified"           ]         }       ]     },     "gateway_handoff_edge": {       "allOf": [         {           "$ref": "#/definitions/edge_object"         },         {           "type": "object",           "properties": {             "edgeId": {               "type": "integer"             },             "isPrimary": {               "type": "integer"             },             "pinned": {               "type": "integer"             },             "enterpriseLogicalId": {               "type": "string"             },             "enterpriseName": {               "type": "string"             }           }         }       ]     },     "gateway_enterprise_assoc": {       "allOf": [         {           "$ref": "#/definitions/enterprise"         },         {           "type": "object",           "properties": {             "enterpriseId": {               "type": "integer"             },             "enterpriseObjectId": {               "type": "integer"             },             "edgeId": {               "type": "integer"             },             "gatewayType": {               "type": "string",               "enum": [                 "OTHER",                 "SUPER",                 "DATACENTER",                 "HANDOFF"               ]             },             "pinned": {               "type": "integer"             },             "enterpriseObjectName": {               "type": "string"             },             "enterpriseObjectType": {               "type": "string"             },             "edgeName": {               "type": "string"             },             "edgeLogicalId": {               "type": "string"             }           }         }       ]     },     "gateway_certificate": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "csrId": {           "type": "integer"         },         "gatewayId": {           "type": "integer"         },         "networkId": {           "type": "integer"         },         "certificate": {           "type": "string"         },         "serialNumber": {           "type": "string"         },         "subjectKeyId": {           "type": "string"         },         "fingerPrint": {           "type": "string"         },         "validFrom": {           "type": "string",           "format": "date-time"         },         "validTo": {           "type": "string",           "format": "date-time"         }       }     },     "gateway_site": {       "allOf": [         {           "$ref": "#/definitions/site"         },         {           "type": "object",           "properties": {             "id": {               "type": "integer"             },             "created": {               "type": "string",               "format": "date-time"             },             "modified": {               "type": "string",               "format": "date-time"             },             "timezone": {               "type": "string"             },             "locale": {               "type": "string"             },             "shippingSameAsLocation": {               "type": "integer"             },             "shippingContactName": {               "type": "string"             },             "shippingAddress": {               "type": "string"             },             "shippingAddress2": {               "type": "string"             },             "shippingCity": {               "type": "string"             },             "shippingState": {               "type": "string"             },             "shippingPostalCode": {               "type": "string"             },             "shippingCountry": {               "type": "string"             }           }         }       ]     },     "gateway_gateway_pool": {       "allOf": [         {           "$ref": "#/definitions/gateway_pool"         },         {           "type": "object",           "properties": {             "gatewayPoolAssocId": {               "type": "integer"             },             "gatewayId": {               "type": "integer"             }           }         }       ]     },     "gateway_role": {       "type": "object",       "properties": {         "created": {           "type": "string",           "format": "date-time"         },         "gatewayId": {           "type": "integer"         },         "gatewayRole": {           "type": "string",           "enum": [             "DATA_PLANE",             "CONTROL_PLANE",             "VPN_TUNNEL",             "ON_PREMISE",             "CDE"           ],           "x-alternate-name": "gatewayRoleProperty"         },         "required": {           "type": "integer"         }       }     },     "gateway_handoff": {       "type": "object",       "properties": {         "enterpriseId": {           "type": "integer"         },         "value": {           "type": "object",           "properties": {             "bgpPrioritySetup": {               "type": "object",               "properties": {                 "autoAs": {                   "type": "object",                   "properties": {                     "enabled": {                       "type": "boolean",                       "default": false                     }                   }                 },                 "autoMed": {                   "type": "object",                   "properties": {                     "enabled": {                       "type": "boolean",                       "default": false                     }                   }                 },                 "communityMapping": {                   "type": "object",                   "properties": {                     "enabled": {                       "type": "boolean",                       "default": false                     },                     "priorities": {                       "type": "array",                       "items": {                         "type": "object",                         "properties": {                           "community": {                             "type": "string"                           },                           "community2": {                             "type": "string"                           },                           "priority": {                             "type": "integer"                           }                         }                       }                     }                   }                 }               }             },             "type": {               "type": "string",               "enum": [                 "802.1Q",                 "802.1ad",                 "QinQ (0x9100)",                 "QinQ (0x8100)"               ]             },             "override": {               "type": "boolean",               "default": false             },             "cTag": {               "type": "integer"             },             "sTag": {               "type": "integer"             },             "localAddress": {               "type": "object",               "properties": {                 "cidrIp": {                   "type": "string"                 },                 "cidrPrefix": {                   "type": "integer"                 },                 "useForPrivate": {                   "type": "boolean"                 },                 "advertiseViaBgp": {                   "type": "boolean"                 },                 "override": {                   "type": "boolean",                   "default": false                 }               }             },             "staticRoutes": {               "type": "object",               "properties": {                 "override": {                   "type": "boolean",                   "default": false                 },                 "subnets": {                   "type": "array",                   "items": {                     "type": "object",                     "properties": {                       "name": {                         "type": "string"                       },                       "cidrIp": {                         "type": "string"                       },                       "cidrPrefix": {                         "type": "integer"                       },                       "encrypt": {                         "type": "boolean"                       },                       "handOffType": {                         "type": "string",                         "enum": [                           "NAT",                           "VLAN"                         ]                       },                       "routeCost": {                         "type": "integer"                       }                     }                   }                 }               }             },             "bgp": {               "type": "object",               "properties": {                 "enabled": {                   "type": "boolean"                 },                 "ASN": {                   "type": "string"                 },                 "neighborIp": {                   "type": "string"                 },                 "neighborASN": {                   "type": "string"                 },                 "encryption": {                   "type": "boolean"                 }               }             },             "bgpInboundMap": {               "$ref": "#/definitions/gateway_handoff_bgp_rules_map"             },             "bgpOutboundMap": {               "$ref": "#/definitions/gateway_handoff_bgp_rules_map"             },             "overrides": {               "type": "object",               "properties": {                 "VLAN": {                   "type": "object",                   "additionalProperties": {                     "type": "object",                     "properties": {                       "type": {                         "type": "string"                       },                       "cTag": {                         "type": "integer"                       },                       "sTag": {                         "type": "integer"                       },                       "transportLanVLAN": {                         "type": "string"                       }                     }                   }                 },                 "bgp": {                   "type": "object",                   "additionalProperties": {                     "type": "object",                     "properties": {                       "enabled": {                         "type": "boolean"                       },                       "ASN": {                         "type": "string"                       },                       "neighborIp": {                         "type": "string"                       },                       "neighborASN": {                         "type": "string"                       },                       "encryption": {                         "type": "boolean"                       }                     }                   }                 },                 "bgpInboundMap": {                   "type": "object",                   "additionalProperties": {                     "$ref": "#/definitions/gateway_handoff_bgp_rules_map"                   }                 },                 "bgpOutboundMap": {                   "type": "object",                   "additionalProperties": {                     "$ref": "#/definitions/gateway_handoff_bgp_rules_map"                   }                 },                 "localAddress": {                   "type": "object",                   "additionalProperties": {                     "type": "object",                     "properties": {                       "cidrIp": {                         "type": "string"                       },                       "cidrPrefix": {                         "type": "integer"                       },                       "useForPrivate": {                         "type": "boolean"                       },                       "advertiseViaBgp": {                         "type": "boolean"                       }                     }                   }                 },                 "subnets": {                   "type": "object",                   "additionalProperties": {                     "type": "array",                     "items": {                       "type": "object"                     }                   }                 }               }             }           }         }       }     },     "gateway_handoff_bgp_rules_map": {       "type": "object",       "properties": {         "rules": {           "type": "array",           "items": {             "$ref": "#/definitions/gateway_handoff_bgp_rule"           }         },         "override": {           "type": "boolean"         }       }     },     "gateway_handoff_bgp_rule": {       "allOf": [         {           "$ref": "#/definitions/bgp_filter_rule"         }       ]     },     "bgp_filter_rule": {       "type": "object",       "properties": {         "action": {           "type": "object",           "properties": {             "type": {               "type": "string"             },             "values": {               "type": "array",               "items": {                 "type": "object",                 "properties": {                   "type": {                     "type": "string"                   },                   "value": {                     "type": "string"                   }                 }               }             }           }         },         "match": {           "type": "object",           "properties": {             "exactMatch": {               "type": "boolean"             },             "type": {               "type": "string"             },             "value": {               "type": "string"             }           }         }       }     },     "network_get_network_gateways_result_item": {       "type": "object",       "properties": {         "activationKey": {           "type": "string"         },         "activationState": {           "type": "string",           "enum": [             "UNASSIGNED",             "PENDING",             "ACTIVATED",             "REACTIVATION_PENDING"           ]         },         "activationTime": {           "type": "string"         },         "alertsEnabled": {           "type": "boolean"         },         "buildNumber": {           "type": "string"         },         "certificates": {           "type": "array",           "items": {             "$ref": "#/definitions/gateway_certificate"           }         },         "connectedEdges": {           "type": "integer"         },         "connectedEdgeList": {           "type": "array",           "items": {             "type": "object",             "properties": {               "vceid": {                 "type": "string"               }             }           }         },         "created": {           "type": "string",           "format": "date-time"         },         "dataCenters": {           "type": "array",           "items": {             "$ref": "#/definitions/enterprise_object_base"           }         },         "description": {           "type": "string"         },         "deviceId": {           "type": "string"         },         "dnsName": {           "type": "string"         },         "endpointPkiMode": {           "type": "string",           "enum": [             "CERTIFICATE_DISABLED",             "CERTIFICATE_OPTIONAL",             "CERTIFICATE_REQUIRED"           ]         },         "enterpriseAssociations": {           "type": "array",           "items": {             "$ref": "#/definitions/gateway_enterprise_assoc"           }         },         "enterprises": {           "type": "array",           "items": {             "$ref": "#/definitions/enterprise"           }         },         "enterpriseProxyId": {           "type": "integer"         },         "gatewayState": {           "type": "string",           "enum": [             "NEVER_ACTIVATED",             "DEGRADED",             "QUIESCED",             "DISABLED",             "OUT_OF_SERVICE",             "CONNECTED",             "OFFLINE"           ]         },         "handOffDetail": {           "$ref": "#/definitions/gateway_handoff_detail"         },         "handOffEdges": {           "type": "array",           "items": {             "$ref": "#/definitions/gateway_handoff_edge"           }         },         "id": {           "type": "integer"         },         "ipAddress": {           "type": "string"         },         "ipsecGatewayDetail": {           "type": "object",           "properties": {             "strictHostCheck": {               "type": "boolean"             },             "strictHostCheckDN": {               "type": "string"             }           }         },         "isLoadBalanced": {           "type": "boolean"         },         "lastContact": {           "type": "string"         },         "logicalId": {           "type": "string"         },         "modified": {           "type": "string",           "format": "date-time"         },         "name": {           "type": "string"         },         "networkId": {           "type": "integer"         },         "pools": {           "type": "array",           "items": {             "$ref": "#/definitions/gateway_gateway_pool"           }         },         "privateIpAddress": {           "type": "string"         },         "roles": {           "type": "array",           "items": {             "$ref": "#/definitions/gateway_role"           }         },         "serviceState": {           "type": "string",           "enum": [             "IN_SERVICE",             "OUT_OF_SERVICE",             "PENDING_SERVICE",             "QUIESCED"           ]         },         "serviceUpSince": {           "type": "string"         },         "site": {           "$ref": "#/definitions/gateway_site"         },         "siteId": {           "type": "integer"         },         "softwareVersion": {           "type": "string"         },         "systemUpSince": {           "type": "string"         },         "utilization": {           "type": "number"         },         "utilizationDetail": {           "type": "object",           "properties": {             "load": {               "type": "number"             },             "overall": {               "type": "number"             },             "cpu": {               "type": "number"             },             "memory": {               "type": "number"             }           }         }       }     },     "network_get_network_operator_users_result_item": {       "allOf": [         {           "$ref": "#/definitions/operator_user_with_role_info"         }       ]     },     "network_insert_network_gateway_pool_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "network_update_network_gateway_pool_attributes_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "new_enterprise_user": {       "allOf": [         {           "$ref": "#/definitions/base_enterprise_user"         },         {           "type": "object",           "properties": {             "enterpriseId": {               "type": "integer"             },             "enterpriseProxyId": {               "type": "integer"             },             "roleId": {               "type": "integer"             }           },           "required": [             "roleId",             "username",             "password"           ]         }       ]     },     "new_enterprise_proxy_user": {       "allOf": [         {           "$ref": "#/definitions/new_enterprise_user"         }       ]     },     "operator_user_insert_operator_user": {       "allOf": [         {           "$ref": "#/definitions/base_enterprise_user"         },         {           "properties": {             "networkId": {               "type": "integer"             },             "password": {               "format": "password",               "type": "string"             },             "roleId": {               "type": "integer"             },             "username": {               "type": "string"             }           },           "required": [             "networkId",             "roleId",             "username",             "password"           ],           "type": "object"         }       ]     },     "role_create_role_customization_result": {       "allOf": [         {           "$ref": "#/definitions/empty_object"         }       ]     },     "role_delete_role_customization_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "role_get_user_type_roles_result_item": {       "allOf": [         {           "$ref": "#/definitions/role"         },         {           "required": [             "id",             "created",             "operatorId",             "networkId",             "enterpriseId",             "enterpriseProxyId",             "name",             "userType",             "fromUserType",             "isSuper",             "description",             "precedence",             "modified"           ]         }       ]     },     "set_delegated_result": {       "type": "object",       "properties": {         "isDelegated": {           "type": "boolean"         }       },       "required": [         "isDelegated"       ]     },     "role_set_enterprise_delegated_to_enterprise_proxy_result": {       "allOf": [         {           "$ref": "#/definitions/set_delegated_result"         }       ]     },     "role_set_enterprise_delegated_to_operator_result": {       "allOf": [         {           "$ref": "#/definitions/set_delegated_result"         }       ]     },     "role_set_enterprise_proxy_delegated_to_operator_result": {       "allOf": [         {           "$ref": "#/definitions/set_delegated_result"         }       ]     },     "role_set_enterprise_user_management_delegated_to_operator_result": {       "allOf": [         {           "$ref": "#/definitions/set_delegated_result"         }       ]     },     "system_property": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "name": {           "type": "string"         },         "value": {           "type": "string"         },         "defaultValue": {           "type": "string"         },         "isReadOnly": {           "type": "boolean"         },         "isPassword": {           "type": "boolean"         },         "dataType": {           "type": "string",           "enum": [             "STRING",             "NUMBER",             "BOOLEAN",             "JSON",             "DATE",             "DATETIME"           ]         },         "description": {           "type": "string"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "system_property_get_system_property_result": {       "allOf": [         {           "$ref": "#/definitions/system_property"         },         {           "required": [             "id",             "created",             "name",             "value",             "defaultValue",             "isReadOnly",             "isPassword",             "dataType",             "description"           ]         }       ]     },     "system_property_get_system_properties_result_item": {       "allOf": [         {           "$ref": "#/definitions/system_property"         },         {           "required": [             "id",             "created",             "name",             "value",             "defaultValue",             "isReadOnly",             "isPassword",             "dataType",             "description"           ]         }       ]     },     "system_property_insert_or_update_system_property_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "system_property_insert_system_property_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "system_property_update_system_property_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_get_enterprise_users_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_user_with_role_info"         },         {           "required": [             "id",             "created",             "userType",             "username",             "domain",             "password",             "firstName",             "lastName",             "officePhone",             "mobilePhone",             "email",             "isNative",             "isActive",             "isLocked",             "lastLogin",             "modified",             "roleId",             "roleName"           ]         }       ]     },     "enterprise_insert_enterprise_user_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_user_delete_enterprise_user_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "enterprise_user_get_enterprise_user_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_user_with_role_and_assocs"         },         {           "required": [             "id",             "created",             "userType",             "username",             "domain",             "password",             "firstName",             "lastName",             "officePhone",             "mobilePhone",             "email",             "isNative",             "isActive",             "isLocked",             "lastLogin",             "modified",             "roleId",             "roleName",             "enterpriseId",             "enterpriseProxyId",             "networkId"           ]         }       ]     },     "enterprise_user_update_enterprise_user_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_proxy_delete_enterprise_proxy_user_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_proxy_get_enterprise_proxy_user_result": {       "allOf": [         {           "$ref": "#/definitions/enterprise_user_with_role_info"         },         {           "properties": {             "enterpriseProxyId": {               "type": "integer"             },             "networkId": {               "type": "integer"             }           }         }       ]     },     "enterprise_proxy_insert_enterprise_proxy_user_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "enterprise_proxy_update_enterprise_proxy_user_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "enterprise_proxy_get_enterprise_proxy_users_result_item": {       "allOf": [         {           "$ref": "#/definitions/enterprise_user_with_role_info"         },         {           "properties": {             "enterpriseProxyId": {               "type": "integer"             },             "networkId": {               "type": "integer"             }           }         }       ]     },     "operator_user_delete_operator_user_result": {       "allOf": [         {           "$ref": "#/definitions/deletion_confirmation"         }       ]     },     "operator_user_get_operator_user_result": {       "allOf": [         {           "$ref": "#/definitions/operator_user_with_role_info"         }       ]     },     "operator_user_insert_operator_user_result": {       "allOf": [         {           "$ref": "#/definitions/insertion_confirmation"         }       ]     },     "operator_user_update_operator_user_result": {       "allOf": [         {           "$ref": "#/definitions/rows_modified_confirmation"         }       ]     },     "role": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "created": {           "type": "string",           "format": "date-time"         },         "operatorId": {           "type": "integer"         },         "networkId": {           "type": "integer"         },         "enterpriseId": {           "type": "integer"         },         "enterpriseProxyId": {           "type": "integer"         },         "name": {           "type": "string"         },         "userType": {           "type": "string",           "enum": [             "OPERATOR",             "MSP",             "PARTNER",             "ENTERPRISE",             "END_USER",             "CUSTOM"           ]         },         "fromUserType": {           "type": "string",           "enum": [             "OPERATOR",             "MSP",             "PARTNER",             "ENTERPRISE",             "END_USER",             "CUSTOM"           ]         },         "isSuper": {           "type": "integer"         },         "description": {           "type": "string"         },         "precedence": {           "type": "integer"         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "protocol_port_mapping": {       "properties": {         "tcpPorts": {           "items": {             "type": "integer"           },           "type": "array"         },         "udpPorts": {           "items": {             "type": "integer"           },           "type": "array"         }       },       "type": "object"     },     "rows_modified_confirmation": {       "type": "object",       "properties": {         "error": {           "description": "An error message explaining why the method failed",           "type": "string"         },         "rows": {           "description": "The number of rows modified",           "type": "integer"         }       },       "required": [         "rows"       ],       "example": {         "rows": 1       }     },     "insertion_confirmation": {       "type": "object",       "properties": {         "id": {           "type": "integer",           "description": "The id of the newly-created object."         },         "rows": {           "description": "The number of rows modified",           "type": "integer"         },         "error": {           "description": "An error message explaining why the method failed",           "type": "string"         }       },       "required": [         "rows"       ],       "example": {         "id": 123,         "rows": 1       }     },     "deletion_confirmation": {       "type": "object",       "properties": {         "id": {           "type": "integer",           "description": "The id of the deleted object."         },         "error": {           "description": "An error message explaining why the method failed",           "type": "string"         },         "rows": {           "description": "The number of rows modified",           "type": "integer"         }       },       "required": [         "rows"       ],       "example": {         "id": 123,         "rows": 1       }     },     "site": {       "allOf": [         {           "$ref": "#/definitions/site_object"         }       ]     },     "site_object": {       "type": "object",       "properties": {         "city": {           "type": "string"         },         "contactEmail": {           "format": "email",           "type": "string"         },         "contactMobile": {           "type": "string"         },         "contactName": {           "type": "string"         },         "contactPhone": {           "type": "string"         },         "country": {           "type": "string"         },         "lat": {           "type": "number"         },         "lon": {           "type": "number"         },         "name": {           "type": "string"         },         "postalCode": {           "type": "string"         },         "state": {           "type": "string"         },         "streetAddress": {           "type": "string"         },         "streetAddress2": {           "type": "string"         }       }     },     "firewall_get_enterprise_firewall_logs_result": {       "type": "object",       "properties": {         "metaData": {           "$ref": "#/definitions/list_metadata"         },         "data": {           "type": "array",           "items": {             "$ref": "#/definitions/firewall_log_data"           }         },         "rules": {           "type": "object",           "additionalProperties": {             "$ref": "#/definitions/firewall_rule"           }         }       }     },     "firewall_log_data": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "edgeId": {           "type": "integer"         },         "timestamp": {           "type": "string",           "format": "date-time"         },         "allow": {           "type": "integer"         },         "ruleLogicalId": {           "type": "string"         },         "interface": {           "type": "string"         },         "protocol": {           "type": "string",           "enum": [             "ICMP",             "TCP",             "UDP",             "GRE"           ]         },         "sourceIp": {           "type": "string"         },         "sourcePort": {           "type": "integer"         },         "destIp": {           "type": "string"         },         "destPort": {           "type": "integer"         },         "icmpType": {           "type": "string"         },         "length": {           "type": "integer"         }       }     },     "firewall_rule": {       "type": "object",       "properties": {         "created": {           "type": "string",           "format": "date-time"         },         "data": {           "type": "string"         },         "deactivated": {           "type": "string"         },         "edgeLogicalId": {           "type": "string"         },         "enterpriseId": {           "type": "integer"         },         "id": {           "type": "integer"         },         "logicalId": {           "type": "string"         },         "name": {           "type": "string"         },         "type": {           "type": "string",           "enum": [             "INBOUND",             "OUTBOUND",             "SERVICE"           ]         }       }     },     "vco_inventory_get_inventory_items_result": {       "type": "array",       "items": {         "$ref": "#/definitions/inventory_item"       }     },     "inventory_item": {       "type": "object",       "properties": {         "id": {           "type": "integer"         },         "deviceSerialNumber": {           "type": "string"         },         "deviceUuid": {           "type": "string"         },         "modelNumber": {           "type": "string"         },         "siteId": {           "type": "integer"         },         "description": {           "type": "string"         },         "acknowledged": {           "type": "integer"         },         "edgeId": {           "type": "integer"         },         "edge": {           "type": "object",           "properties": {             "id": {               "type": "integer"             },             "edge": {               "type": "string"             },             "site": {               "type": "object",               "properties": {                 "name": {                   "type": "string"                 }               }             }           }         },         "inventoryState": {           "type": "string"         },         "inventoryEdgeState": {           "type": "string"         },         "inventoryAction": {           "type": "string"         },         "vcoOwnerId": {           "type": "integer"         },         "vcoOwner": {           "type": "object",           "properties": {             "accountNumber": {               "type": "string"             },             "name": {               "type": "string"             }           }         },         "modified": {           "type": "string",           "format": "date-time"         }       }     },     "enterprise_get_enterprise_network_segments_result_item": {       "allOf": [         {           "$ref": "#/definitions/network_segment"         }       ]     },     "network_segment": {       "allOf": [         {           "$ref": "#/definitions/enterprise_object_base"         },         {           "type": "object",           "properties": {             "data": {               "type": "object",               "properties": {                 "segmentId": {                   "type": "integer"                 },                 "serviceVlan": {                   "type": "integer"                 },                 "delegateToEnterprise": {                   "type": "boolean"                 },                 "delegateToEnterpriseProxy": {                   "type": "boolean"                 }               }             },             "profileCount": {               "type": "integer"             },             "handoffUsage": {               "type": "array",               "items": {                 "type": "object"               }             },             "isAllMPGCDE": {               "type": "boolean"             },             "isAllCtrlCDE": {               "type": "boolean"             }           }         }       ]     }   },   "parameters": {     "auth_param": {       "name": "authorization",       "in": "body",       "required": true,       "schema": {         "$ref": "#/definitions/auth_object"       }     }   },   "responses": {     "generic_200": {       "description": "Request was successfully processed",       "schema": {         "type": "object"       }     },     "generic_400": {       "description": "Invalid Request: Please check your request schema",       "schema": {         "$ref": "#/definitions/error"       }     },     "generic_500": {       "description": "Error parsing or processing request",       "schema": {         "$ref": "#/definitions/error"       }     },     "no_credentials": {       "description": "Authorization Cookie not Received"     },     "forbidden": {       "description": "Insufficient Permissions"     }   } }
