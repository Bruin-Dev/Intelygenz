# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EnterpriseProxyApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def enterpriseProxyGetEnterpriseProxyEdgeInventory(self, body, **kwargs):
        """
        Get a list of all partner enterprises and edge inventory associated with each enterprise
        Get  partner enterprises and their edge inventory.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEdgeInventory(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEdgeInventory body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEdgeInventoryResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(self, body, **kwargs):
        """
        Get a list of all partner enterprises and edge inventory associated with each enterprise
        Get  partner enterprises and their edge inventory.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEdgeInventory_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEdgeInventory body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEdgeInventoryResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyEdgeInventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyEdgeInventory`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyEdgeInventory'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyEdgeInventoryResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyEnterprises(self, body, **kwargs):
        """
        Get a list of all partner enterprises
        Get all partner enterprises, optionally including all edges or edge counts.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEnterprises(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEnterprises body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEnterprisesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(self, body, **kwargs):
        """
        Get a list of all partner enterprises
        Get all partner enterprises, optionally including all edges or edge counts.  Privileges required:  `READ` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyEnterprises_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyEnterprises body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyEnterprisesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyEnterprises" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyEnterprises`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyEnterprises'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyEnterprisesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyGatewayPools(self, body, **kwargs):
        """
        Get list of gateway pools
        Get list of gateway pools associated with an enterprise proxy, optionally with lists of gateways or enterprises belonging to each pool.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyGatewayPools(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyGatewayPools body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(self, body, **kwargs):
        """
        Get list of gateway pools
        Get list of gateway pools associated with an enterprise proxy, optionally with lists of gateways or enterprises belonging to each pool.  Privileges required:  `READ` `GATEWAY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyGatewayPools_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyGatewayPools body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyGatewayPools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyGatewayPools`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyGatewayPools'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyGetEnterpriseProxyOperatorProfiles(self, body, **kwargs):
        """
        Get the operator profiles associated with a partner
        Get the operator profiles associated with a proxy (MSP), as assigned by the operator.  Privileges required:  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyOperatorProfiles(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyOperatorProfiles body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyOperatorProfilesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(self, body, **kwargs):
        """
        Get the operator profiles associated with a partner
        Get the operator profiles associated with a proxy (MSP), as assigned by the operator.  Privileges required:  `READ` `OPERATOR_PROFILE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyGetEnterpriseProxyOperatorProfiles_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyGetEnterpriseProxyOperatorProfiles body: (required)
        :return: list[EnterpriseProxyGetEnterpriseProxyOperatorProfilesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyGetEnterpriseProxyOperatorProfiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyGetEnterpriseProxyOperatorProfiles`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/getEnterpriseProxyOperatorProfiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnterpriseProxyGetEnterpriseProxyOperatorProfilesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enterpriseProxyInsertEnterpriseProxyEnterprise(self, body, **kwargs):
        """
        Insert a new enterprise owned by an MSP
        Insert an enterprise owned by an MSP. Whereas the `insertEnterprise` method will create an enterprise in the global or network context with no MSP association, this method will create one owned by an MSP, as determined by the credentials of the caller.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyEnterprise(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyInsertEnterpriseProxyEnterprise body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(body, **kwargs)
        else:
            (data) = self.enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(body, **kwargs)
            return data

    def enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(self, body, **kwargs):
        """
        Insert a new enterprise owned by an MSP
        Insert an enterprise owned by an MSP. Whereas the `insertEnterprise` method will create an enterprise in the global or network context with no MSP association, this method will create one owned by an MSP, as determined by the credentials of the caller.  Privileges required:  `CREATE` `ENTERPRISE`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterpriseProxyInsertEnterpriseProxyEnterprise_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnterpriseProxyInsertEnterpriseProxyEnterprise body: (required)
        :return: EnterpriseProxyInsertEnterpriseProxyEnterpriseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterpriseProxyInsertEnterpriseProxyEnterprise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enterpriseProxyInsertEnterpriseProxyEnterprise`")


        collection_formats = {}

        resource_path = '/enterpriseProxy/insertEnterpriseProxyEnterprise'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnterpriseProxyInsertEnterpriseProxyEnterpriseResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
