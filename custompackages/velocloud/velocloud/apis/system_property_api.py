# coding: utf-8

"""
    Velocloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.2.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SystemPropertyApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def systemPropertyGetSystemProperties(self, body, **kwargs):
        """
        Get all system properties
        Get a list of all configured system properties.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperties(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperties body: (required)
        :return: list[SystemPropertyGetSystemPropertiesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyGetSystemProperties_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyGetSystemProperties_with_http_info(body, **kwargs)
            return data

    def systemPropertyGetSystemProperties_with_http_info(self, body, **kwargs):
        """
        Get all system properties
        Get a list of all configured system properties.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperties_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperties body: (required)
        :return: list[SystemPropertyGetSystemPropertiesResultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyGetSystemProperties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyGetSystemProperties`")


        collection_formats = {}

        resource_path = '/systemProperty/getSystemProperties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[SystemPropertyGetSystemPropertiesResultItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyGetSystemProperty(self, body, **kwargs):
        """
        Get system property
        Get a system property by object id or other attribute.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperty body: (required)
        :return: SystemPropertyGetSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyGetSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyGetSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyGetSystemProperty_with_http_info(self, body, **kwargs):
        """
        Get system property
        Get a system property by object id or other attribute.  Privileges required:  `READ` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyGetSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyGetSystemProperty body: (required)
        :return: SystemPropertyGetSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyGetSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyGetSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/getSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyGetSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyInsertOrUpdateSystemProperty(self, body, **kwargs):
        """
        Insert or update a system property
        Insert a system property. If property with the given name already exists, the property will be updated.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertOrUpdateSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertOrUpdateSystemProperty body: (required)
        :return: SystemPropertyInsertOrUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyInsertOrUpdateSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyInsertOrUpdateSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyInsertOrUpdateSystemProperty_with_http_info(self, body, **kwargs):
        """
        Insert or update a system property
        Insert a system property. If property with the given name already exists, the property will be updated.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertOrUpdateSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertOrUpdateSystemProperty body: (required)
        :return: SystemPropertyInsertOrUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyInsertOrUpdateSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyInsertOrUpdateSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/insertOrUpdateSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyInsertOrUpdateSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyInsertSystemProperty(self, body, **kwargs):
        """
        Insert a system property
        Insert a new system property.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertSystemProperty body: (required)
        :return: SystemPropertyInsertSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyInsertSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyInsertSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyInsertSystemProperty_with_http_info(self, body, **kwargs):
        """
        Insert a system property
        Insert a new system property.  Privileges required:  `CREATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyInsertSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyInsertSystemProperty body: (required)
        :return: SystemPropertyInsertSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyInsertSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyInsertSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/insertSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyInsertSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemPropertyUpdateSystemProperty(self, body, **kwargs):
        """
        Update a system property
        Update an existing system property, provided an object `id` or other identifying attributes  Privileges required:  `UPDATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyUpdateSystemProperty(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyUpdateSystemProperty body: (required)
        :return: SystemPropertyUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemPropertyUpdateSystemProperty_with_http_info(body, **kwargs)
        else:
            (data) = self.systemPropertyUpdateSystemProperty_with_http_info(body, **kwargs)
            return data

    def systemPropertyUpdateSystemProperty_with_http_info(self, body, **kwargs):
        """
        Update a system property
        Update an existing system property, provided an object `id` or other identifying attributes  Privileges required:  `UPDATE` `SYSTEM_PROPERTY`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemPropertyUpdateSystemProperty_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SystemPropertyUpdateSystemProperty body: (required)
        :return: SystemPropertyUpdateSystemPropertyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemPropertyUpdateSystemProperty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemPropertyUpdateSystemProperty`")


        collection_formats = {}

        resource_path = '/systemProperty/updateSystemProperty'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemPropertyUpdateSystemPropertyResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
